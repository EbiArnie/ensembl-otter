* New session selection

** tk/otterlace->run_gui()
   + creates and displays a MCW:SpeciesListWindow

** MCW:SpeciesListWindow->open_dataset_by_name()
   + loads the DataSet via the Client
   + calls $ds->load_client_config
   + creates a CW:SequenceSetChooser

** CW:SequenceSetChooser->open_sequence_set_by_ssname_subset()
   + creates a CW:SequenceNotes


* Session Startup

** CW:SequenceNotes->open_SequenceSet()
*** creates slice B:O:L:Slice
*** creates adb   B:O:L:AceDatabase via
    + Client->new_AceDatabase()
      - chooses but does not create the session path
*** on adb:
    + calls adb->make_database_directory()
      - creates the session directory and fetches the AceDB tarball
    + calls adb->load_dataset_info()
      - delegates to B:O:L:DB to fetch meta, coord, attrib info
        and store these into SQLite
*** locks the slice, if the session is to be write-enabled
*** creates the MCW::ColumnChooser with init_flag set.

** Column Chooser's Load button calls MCW:ColumnChooser->load_filters()
*** saves filter selection state to AceDatabase
*** if init_flag is set (which it will be for a new session):
    + calls AceDatabase->init_AceDatabase()
      + fetches the XML region
      + saves a copy of the XML
      + parses XML to a B:V:Region region
      + creates the ace file from the region [AceDB]
      + fetches the DNA and tiles
      + writes the dna and tile data to ace files [AceDB]
      + stores region and dna to SQLite [SQLite]
      + writes the methods_acefile [AceDB]
      + saves the XML, less loci and feature_sets, to SQLite [SQLite]
        - for subsequent recovery in recover_slice_from_region_xml()
        - this will be redundant soon, region is now in SQLite EnsEMBL
      + calls initialize_database()
        - launches tace which parses the ace files. [AceDB]
*** unless there's a SessionWindow
    + sets up a MCW:SessionWindow, optionally passing in an existing Zircon::ZMap
      SessionWindow->initialise()
      + calls AceDatabase->zmap_dir_init() to set up ZMap and blixem configs
        + calls zmap_config()
          + calls ace_config()
            + calls ace_server()
              - fires off sgifaceserver() {*YUCK* long tree} [AceDB]
      + calls self->Assembly()
        - builds _assembly via Hum::Ace::Assembly->express_data_fetch() on AceDB.
      + calls _zmap_view_new()
        - launches a new ZMap (unless using existing)
        - sets up Zircon comms
        - creates view
      + creates a B:O:RequestQueuer
*** queues feature requests via the SessionWindow's RequestQueuer.


* Session Recovery

** MCW:SpeciesListWindow->recover_some_sessions()
*** calls B:O:L:Client->recover_session() to get the adb
    + kills any sgifaceserver associated with the directory
    + calls self->new_AceDatabase()
    + renames existing session directory to the new path set by new_AceDatabase.
    + calls adb->recover_slice_from_region_xml()
    + calls adb->DataSet->load_client_config() {this is done in SpeciesListWindow->open_dataset_by_name() for new session}
    + calls adb->reload_filter_state() {originally saved by ColumnChooser->load_filters()}
*** connects a MCW:ColumnChooser to the adb.
*** calls ColumnChooser->load_filters()
    - see above under 'Session Startup' for details


* Session Editing
  Handled via MCW:SessionWindow

** MCW:TranscriptWindow->_do_save_subseq_work()
   + calls MCW:SessionWindow->replace_SubSeq() {the workhorse}
     + saves to ace via self->_save_ace()
     + updates ZMap
     + updates internal state (Assembly and _subsequence_cache)

** MCW:SessionWindow also supplies:
*** _add_SubSeq() {just caches it in the SessionWindow's _subsequence_cache}
*** _delete_subsequences()
     + deletes from acedb, via _save_ace()
     + calls self->_delete_SubSeq()
       + deletes from Assembly
       + deletes from _subsequence_cache
     + deletes from ZMap
*** do_rename_locus(), via _save_ace()
*** _exit_save_data(), via _save_ace(), to update annotation_in_progress.
*** save_Assembly(),   via _save_ace(), called from MCW:GenomicFeaturesWindow->save_to_ace()


* Session Save to Server

** MCW:SessionWindow->_save_data()
   + calls adb->generate_XML_from_acedb()
   + passes the XML to Client->save_otter_xml()
   + receives XML in return
   + parses this to a B:V:Region
   + makes Ace via B:V:Region::Ace->make_ace_genes_transcripts
   + saves the region to AceDB via self->_save_ace()
   + calls self->_resync_with_db() to rebuild internal state from AceDB
     + calls self->Assembly()


* Notes

** Locus handling

[4:25pm] mg13: Hmm, I think Iâ€™m going to have to familiarise myself with Locus handling in the TranscriptWindow.
[4:25pm] jgrg: It isn't straigtforward.
[4:25pm] jgrg: Have to make sure that we don't have transcripts with references to old locus objects since edits.
[4:26pm] jgrg: Edits to locus fields have to update all the transcript edit windows.
[4:26pm] mg13: The EnsEMBL ownership of transcripts by genes is the other way around compared with Hum::Ace
[4:28pm] mg13: I only need to worry about that when a TranscriptWindow does a save, though.

** Why not make the Locus & SubSeq caches a feature of the assembly?
   Because they only get added to the assembly when saved in the TranscriptWindow?
   But it might make more sense to have a cache class which we can use.

** update_Locus
   Updating the slave Locus is a bit tricky. We need to know what changed.

** truncated handling
   Gene method: truncated_flag()
   When writing Ace, gene's transcripts get method with the suffix '_trunc' added.
   Locus method: is_truncated()
   B:V:Region:Ace also sets SubSeq's method to the _trunc version if appropriate.
   SO: need to set analysis->gff_source appropriately.

** ZMap columns
   All appear in the slice stanza of ZMap config, e.g. [chr12-38_7087281-7264845]
*** DNA
    Also appears in a separate DNA stanza which is loaded first as it's first it the sources list
    ZMap default
*** Gap
    Can go
*** Transcripts
    See otter_config and otter_styles.ini on my deskpro for a start.
    Will need to auto-generate these.
    Need to handle _trunc.
**** Coding Transcripts
     Method
     Child method: Coding
     Child method: Coding_trunc
**** Known CDS Transcripts
     Method
     Child method: Known_CDS
     Child method: Known_CDS_trunc
**** Novel CDS Transcripts
     Method
     Child method: Novel_CDS
     Child method: Novel_CDS_trunc
**** Putative and NMD
     Method
     Child method: Putative_CDS
     Child method: Putative_CDS_trunc
     Child method: Nonsense_mediated_decay
     Child method: Nonsense_mediated_decay_trunc
     Child method: Non_stop_decay
     Child method: Non_stop_decay_trunc
**** Curated Transcripts
     Method
     Child method: Transcript
     Child method: Transcript_trunc
     Child method: Retained_intron
     Child method: Retained_intron_trunc
     Child method: Disrupted_domain
     Child method: Disrupted_domain_trunc
     Child method: IG_gene
     Child method: IG_gene_trunc
     Child method: TR_gene
     Child method: TR_gene_trunc
     Child method: Putative
     Child method: Putative_trunc
     Child method: Non_coding
     Child method: Non_coding_trunc
     Child method: lincRNA
     Child method: lincRNA_trunc
     ...etc.
*** curated_features
    Method
    Child method: polyA_signal
    Child method: polyA_site
    Child method: polyA-seq_site
    Child method: polyA-seq_signal
    Child method: TATA_box
    Child method: RSS
    Child method: EUCOMM
*** ext_curated
    Method
*** Glean_parent
    Method
    Child method: Glean
    Child method: Glean_trunc
*** NCBI_parent
    Method
    Child method: NCBI
    Child method: NCBI_trunc
*** 3 Frame Translation
    ZMap default
    Method
*** Show Translation
    ZMap default
    Method
*** GeneFinderFeatures
    ZMap built-in
    Method
*** 3 Frame
    ZMap default
    Method
*** ATG
    Method
*** hexExon
    Method
*** hexIntron
    Method
*** GF_coding_seg
    Method
*** GF_ATG
    Method
*** hexExon_span
    Method
*** RNA
    Method
*** SPLICED_cDNA
    Method
*** GF_splice
    Method

# EOF
