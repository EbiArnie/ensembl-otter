#!/bin/bash -l

# Work out where we now live
macos_dir=`dirname "$0"`
contents_dir=`dirname "$macos_dir"`
resources_dir="$contents_dir/Resources"
bin_dir="$resources_dir/bin"

export PATH="$bin_dir:$PATH"

# Set up bits and pieces needed by GTK

export FONTCONFIG_PATH="$resources_dir/etc/fonts"

# Make etc directory inside ~/.otter to store
# the gdk-pixbuf and pango config files needed
dot_otter=~/.otter
dot_otter_etc="$dot_otter/etc"
mkdir -p "$dot_otter_etc"

dyld_path="$resources_dir/lib"

# Use the FALLBACK path.  Any dynamic libraries containing
# file paths which are not found will look here.
export DYLD_FALLBACK_LIBRARY_PATH="$dyld_path"
# echo DYLD_FALLBACK_LIBRARY_PATH=$DYLD_FALLBACK_LIBRARY_PATH

# export DYLD_LIBRARY_PATH="$dyld_path"

# Create config file so that gdk-pixbuf can load
# its bitmap image format loaders
export GDK_PIXBUF_MODULE_FILE="$dot_otter_etc/gdk-pixbuf.loaders"

GDK_PIXBUF_MODULEDIR="$resources_dir/lib/gtk-2.0/2.10.0/loaders" \
gdk-pixbuf-query-loaders > "$GDK_PIXBUF_MODULE_FILE"

# Create config files for pango font handling library
pango_module_file="$dot_otter_etc/pango.modules"
pangox_alias_file="$dot_otter_etc/pangox.aliases"
export PANGO_RC_FILE="$dot_otter_etc/pangorc"
cp -f "$resources_dir/etc/pango/pangox.aliases" "$pangox_alias_file"

cat > $PANGO_RC_FILE << PANGO_RC

[Pango]
ModuleFiles = $pango_module_file

[PangoX]
AliasFiles = $pangox_alias_file

PANGO_RC

find "$resources_dir/lib/pango" -name '*.so' -print0 \
| xargs -0 pango-querymodules > "$pango_module_file"


# Installation script will set this
version=

# Check that OTTER_HOME exists
export OTTER_SWAC="$resources_dir"
export OTTER_HOME="$resources_dir/otter/otter_rel${version}"

if [ ! -d "$OTTER_HOME" ]; then
    echo
    echo "OTTER_HOME $OTTER_HOME not found"
    echo
    exit 1
else
    echo "OTTER_HOME is $OTTER_HOME"
fi

# Now try the default script

$OTTER_HOME/bin/otterlace

