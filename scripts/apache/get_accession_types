#!/usr/local/bin/perl -Tw

# Author:        gr5
# Group:         anacode
# Maintainer:    gr5

use strict;
use warnings;

use SangerPaths qw{ core bioperl123 ensembl59 otter54 humpub };
use SangerWeb;

use IO::Socket;

use Bio::Otter::ServerScriptSupport;
use Bio::Otter::Utils::MM;
use Hum::Conf qw{ PFETCH_SERVER_LIST };

my $server = Bio::Otter::ServerScriptSupport->new;

my $accs = $server->param('accessions');

my @acc_list = split(/,/, $accs);

my $mm = Bio::Otter::Utils::MM->new;

my $types;

eval {
    $types = $mm->get_accession_types(\@acc_list);
};
if ($@) {
    
    # mole and mushroom probably failed, so let's try to parse the pfetch header
    
    # XXX: much of this code nicked from scripts/apache/pfetch but rejigged here
    
    my $socket;

    foreach my $srv_arr (@$PFETCH_SERVER_LIST) {
	my ($ip_addr, $port) = @$srv_arr;
        last if $socket = IO::Socket::INET->new(
            PeerAddr    => $ip_addr,
            PeerPort    => $port,
            Proto       => 'tcp',
            Type        => SOCK_STREAM,
            Timeout     => 10,
        );
    }
    
    die "Connect to pfetch server failed" unless $socket;
    
    # detaint and join the accessions into one string

    my $acc_string;

    for my $acc (@acc_list) {
        $acc =~ s/\s+/ /g;
        $acc =~ s/[^\w\-\.\: ]//g;
        $acc_string .= "$acc ";
        $types->{$acc} = [];
    }
    
    # chuck it down the pipe
    
    print $socket "-F $acc_string\n";
    
    # NB: I assume here that the results come back in the order requested
    
    my $idx = 0;
    
    while (<$socket>) {
        if (/^ID/) {
            my $acc = $acc_list[$idx];
            
            if (/EST/) {
                $types->{$acc} = ['EST', $acc];
            }
            elsif (/mRNA/) {
                # Here we return cDNA, which is more technically correct since
                # both ESTs and cDNAs are mRNAs.
                $types->{$acc} = ['cDNA', $acc];
            }
            elsif (/other RNA/) {
                $types->{$acc} = ['ncRNA', $acc];
            }
            elsif (/\d+\s+AA/) {
                $types->{$acc} = ['Protein', $acc];
            }
        }
        elsif (/^\/\/$/ or /^no match$/) {
            # Database entries in Uniprot and EMBL end with the line "//"
            # Entries not found appear as the line "no match"
            $idx++;
        }
    }
    
    close $socket;
}

my $response = '';

foreach my $acc (keys %$types) {
    my ($acc_type, $full_acc) = @{$types->{$acc}};
    $response .= "$acc\t$acc_type\t$full_acc\n";
}

$server->send_response($response);

1;
