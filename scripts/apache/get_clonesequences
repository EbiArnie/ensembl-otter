#!/usr/bin/perl -Tw

use strict;
use warnings;

BEGIN { use lib ($ENV{OTTER_PERL_INC} || q{}) =~ m{([^:]+)}g }
use SangerPaths qw{ core bioperl123 otter };
use Bio::Otter::Git qw{ :server_ensembl :match };

use Bio::Otter::Server::Support::Web;
use Bio::EnsEMBL::Utils::Slice qw(split_Slices);
use Data::Dumper;
sub get_clonesequences {
    my ($server) = @_;

my $dataset     = $server->require_argument('dataset');
my $sequenceset = $server->require_argument('sequenceset'); 
my $coord_system_name = $server->require_argument('coord_system_name');
my $coord_system_version = $server->require_argument('coord_system_version');

my $otter_dba = $server->otter_dba;
my $dbc = $otter_dba->dbc;

# Allow local scripts to access without authorization
unless ($server->local_user) {
    $server->authorized_user;
}
my $slice = $otter_dba->get_SliceAdaptor->fetch_by_region($coord_system_name, $sequenceset, undef, undef, undef, $coord_system_version);

my $sql = <<'SQL'
    select distinct asm.asm_start, asm.asm_end, asm.cmp_start, asm.cmp_end, sr.name, sr.length, asm.ori 
    from assembly asm 
    left join seq_region sr on asm.asm_seq_region_id = 
    (select seq_region_id from seq_region where name = ? and coord_system_id = 4) 
    and asm.cmp_seq_region_id = sr.seq_region_id 
    left join misc_attrib ma on sr.name = ma.value 
    left join misc_feature mf on ma.misc_feature_id = mf.misc_feature_id and ma.attrib_type_id = 4 
    left join misc_feature_misc_set mfms on mf.misc_feature_id = mfms.misc_feature_id and mfms.misc_set_id = 91 
    where mf.seq_region_id = 
    (select seq_region_id from seq_region where name = ? and coord_system_id = 4) 
    and sr.coord_system_id = 1 order by asm.asm_start
SQL
;
my @cs_list;
my ($acc, $sv);

my $misc_set = $otter_dba->get_MiscSetAdaptor->fetch_by_code('otter');
if ($misc_set) {
  foreach my $feature (@{$otter_dba->get_MiscFeatureAdaptor->fetch_all_by_Slice_and_set_code($slice, $misc_set->code)}) {
    push(@cs_list, {
      clone_name  => $feature->get_scalar_attribute('name'),
      accession   => $feature->get_scalar_attribute('name'),
      sv          => 1,
      contig_name => $feature->get_scalar_attribute('name'),
      length      => $feature->length,
      chr         => {
          name    =>  $sequenceset,
          length  =>  $slice->seq_region_length,
      },
      chr_start     => $feature->start,
      chr_end       => $feature->end,
      contig_start  => $feature->get_all_Attributes('inner_start')->[0],
      contig_end    => $feature->get_all_Attributes('inner_end')->[0],
      contig_strand => $feature->strand,
      coord_system_name => $coord_system_name,
      coord_system_version => $coord_system_version,
    });
  }
}

if (!@cs_list) {

   my $sth = $dbc->prepare($sql);
   $sth->execute($sequenceset, $sequenceset);
   while (
    my (
        $chr_start,    $chr_end,    $ctg_start,    $ctg_end,  $ctg_name,  $ctg_length,
        $ctg_strand
    )
    = $sth->fetchrow
  )
  {
    my @temp = split(/\./, $ctg_name);
    $acc = $temp[0];
    $sv = $temp[1];

    my $cs = {
        clone_name  => $ctg_name,
        accession   => $acc,
        sv          => $sv,
        contig_name => $ctg_name,
        length      => $ctg_length,
        chr         => {
            name   => $sequenceset,
            length => $slice->seq_region_length,
        },
        chr_start     => $chr_start,
        chr_end       => $chr_end,
        contig_start  => $ctg_start,
        contig_end    => $ctg_end,
        contig_strand => $ctg_strand,
        coord_system_name => $coord_system_name,
        coord_system_version => $coord_system_version,
    };

    push(@cs_list, $cs);
  }

}

my $xml = '';
$xml .= qq{  <dataset name="$dataset">\n};
$xml .= qq{    <sequenceset name="$sequenceset">\n};
$xml .= qq{      <clonesequences>\n};

foreach my $cs (@cs_list) {
    $xml .= qq{        <clonesequence>\n};
    foreach my $tag (
        qw{ clone_name accession sv contig_name length
        chr chr_start chr_end
        coord_system_name coord_system_version
        contig_start contig_end contig_strand }
      )
    {
        my $value = $cs->{$tag};
        next unless defined $value;
        if (ref($value)) {
            my $att_str = join(' ', map { qq{$_="$value->{$_}"} } keys %$value);
            $xml .= qq{          <$tag $att_str></$tag>\n};
        }
        else {
            $xml .= qq{          <$tag>$value</$tag>\n};
        }
    }
    $xml .= qq{        </clonesequence>\n};
}

$xml .= qq{      </clonesequences>\n};
$xml .= qq{    </sequenceset>\n};
$xml .= qq{  </dataset>\n};

return $server->otter_wrap_response($xml);
}

Bio::Otter::Server::Support::Web->send_response(\&get_clonesequences);

__END__

=head1 NAME - get_clonesequences


=head1 DESCRIPTION

return xml for Clone Sequences of a sequence set.

=head1 AUTHOR

Ana Code B<email> anacode@sanger.ac.uk

