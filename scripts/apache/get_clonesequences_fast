#!/usr/local/bin/perl -Tw

# Author:        jgrg
# Group:         anacode
# Maintainer:    jgrg

use strict;
use warnings;

use SangerPaths qw{ core bioperl123 ensembl57 otter53 };

use Bio::Otter::ServerScriptSupport;

my $server = Bio::Otter::ServerScriptSupport->new;

my $dataset     = $server->require_argument('dataset');
my $sequenceset = $server->require_argument('sequenceset');

my $dbc = $server->otter_dba->dbc;

# Allow local scripts to access without authorization
unless ($server->local_user) {
    $server->authorized_user;
}

my $sql = q{
    SELECT cl.name
      , intl_clone_name.value
      , embl_acc.value
      , embl_version.value
      , ctg.name
      , ctg.length
      , chr_name.value
      , chr.length
      , chr2ctg.asm_start
      , chr2ctg.asm_end
      , chr2ctg.cmp_start
      , chr2ctg.cmp_end
      , chr2ctg.ori
      , l.contig_lock_id
      , l.hostname
      , aut.author_name
      , aut.author_email
    FROM (assembly chr2ctg
          , assembly cl2ctg
          , seq_region chr
          , seq_region ctg
          , seq_region_attrib embl_acc
          , seq_region_attrib embl_version
          , seq_region_attrib chr_name)
    LEFT JOIN contig_lock l
      ON l.seq_region_id = ctg.seq_region_id
    LEFT JOIN author aut
      ON aut.author_id = l.author_id
      , seq_region cl
    LEFT JOIN seq_region_attrib intl_clone_name
      ON intl_clone_name.seq_region_id = cl.seq_region_id
      AND intl_clone_name.attrib_type_id =
    (SELECT attrib_type_id
        FROM attrib_type
        WHERE code = 'intl_clone_name')
    WHERE chr.name = ?
      AND chr2ctg.asm_seq_region_id = chr.seq_region_id
      AND chr2ctg.cmp_seq_region_id = ctg.seq_region_id
      AND cl2ctg.asm_seq_region_id = cl.seq_region_id
      AND cl2ctg.cmp_seq_region_id = ctg.seq_region_id
      AND ctg.coord_system_id =
    (SELECT coord_system_id
        FROM coord_system
        WHERE name = 'contig')
      AND cl.coord_system_id =
    (SELECT coord_system_id
        FROM coord_system
        WHERE name = 'clone')
      AND chr.seq_region_id = chr_name.seq_region_id
      AND chr_name.attrib_type_id =
    (SELECT attrib_type_id
        FROM attrib_type
        WHERE code = 'chr')
      AND cl.seq_region_id = embl_acc.seq_region_id
      AND embl_acc.attrib_type_id =
    (SELECT attrib_type_id
        FROM attrib_type
        WHERE code = 'embl_acc')
      AND cl.seq_region_id = embl_version.seq_region_id
      AND embl_version.attrib_type_id =
    (SELECT attrib_type_id
        FROM attrib_type
        WHERE code = 'embl_version')
    ORDER BY chr2ctg.asm_start
    };

# If a clone is missing from the results, check that it has embl_acc and embl_version attributes.
# If the whole chromosome is missing, check that it has the chr attribute.

my $sth = $dbc->prepare($sql);
$sth->execute($sequenceset);


my @cs_list;
while (
    my (
        $cl_name,    $intl_name,     $acc,       $sv,          $ctg_name,  $ctg_length,
        $chr_name,   $chr_length,    $chr_start, $chr_end,     $ctg_start, $ctg_end,
        $ctg_strand, $clone_lock_id, $host_name, $author_name, $author_email
    )
    = $sth->fetchrow
  )
{

    my $clone_name = $intl_name || $cl_name;
    my $cs = {
        clone_name  => $clone_name,
        accession   => $acc,
        sv          => $sv,
        contig_name => $ctg_name,
        length      => $ctg_length,
        chr         => {
            name   => $chr_name,
            length => $chr_length,
        },
        chr_start     => $chr_start,
        chr_end       => $chr_end,
        contig_start  => $ctg_start,
        contig_end    => $ctg_end,
        contig_strand => $ctg_strand,
    };
    if ($clone_lock_id) {
        $cs->{'lock'} = {
            lock_id     => $clone_lock_id,
            author_name => $author_name,
            email       => $author_email,
            host_name   => $host_name,
        };
    }

    if (my $prev = $cs_list[-1]) {
        # Merge adjacent segments of the same contig together.
        if ($cs->{'contig_name'} eq $prev->{'contig_name'}) {
            $prev->{'chr_end'} = $cs->{'chr_end'};
            $prev->{'contig_start'} = $cs->{'contig_start'}
                if $cs->{'contig_start'} < $prev->{'contig_start'};
            $prev->{'contig_end'} = $cs->{'contig_end'}
                if $cs->{'contig_end'} > $prev->{'contig_end'};
            next;   # Skip to next row so that $cs is not added to list
        }
    }
    push(@cs_list, $cs);
}

my $xml = '';
$xml .= qq{  <dataset name="$dataset">\n};
$xml .= qq{    <sequenceset name="$sequenceset">\n};
$xml .= qq{      <clonesequences>\n};

foreach my $cs (@cs_list) {
    $xml .= qq{        <clonesequence>\n};
    foreach my $tag (
        qw{ clone_name accession sv contig_name length
        chr chr_start chr_end
        contig_start contig_end contig_strand lock }
      )
    {
        my $value = $cs->{$tag};
        next unless defined $value;
        if (ref($value)) {
            my $att_str = join(' ', map { qq{$_="$value->{$_}"} } keys %$value);
            $xml .= qq{          <$tag $att_str></$tag>\n};
        }
        else {
            $xml .= qq{          <$tag>$value</$tag>\n};
        }
    }
    $xml .= qq{        </clonesequence>\n};
}

$xml .= qq{      </clonesequences>\n};
$xml .= qq{    </sequenceset>\n};
$xml .= qq{  </dataset>\n};

$server->send_response($xml, 1);

__END__

=head1 NAME - get_clonesequences_fast


=head1 DESCRIPTION

return xml for Clone Sequences of a sequence set.

=head1 AUTHOR

Sindhu K.Pillai B<email> sp1@sanger.ac.uk
Leo Gordon B<email> lg4@sanger.ac.uk

