#!/usr/local/bin/perl -Tw

# Author:        jgrg
# Group:         anacode
# Maintainer:    jgrg

use strict;
use warnings;

use SangerPaths qw{ core bioperl123 ensembl60 otter54 };

use Bio::Otter::ServerScriptSupport;
use Bio::Otter::ToXML;


my $server = Bio::Otter::ServerScriptSupport->new;

my $output_string = '';

eval {
    my @analysis_names = $server->param('analysis') ? split(/,/, $server->param('analysis')) :
                                                      ( undef );
    my $transcript_analyses  = $server->param('transcript_analyses')  || '';
    my $translation_xref_dbs = $server->param('translation_xref_dbs') || '';

    my $allowed_transcript_analyses_hash = $transcript_analyses
        ? { map { $_ => 1 } split(/,/, $transcript_analyses) }
        : '';
    my $allowed_translation_xref_db_hash = $translation_xref_dbs
        ? { map { $_ => 1 } split(/,/, $translation_xref_dbs) }
        : '';

    foreach my $analysis_name (@analysis_names) {
        # third parameter of $slice->get_all_Genes() helps preventing lazy-loading of transcripts
        my $genes = $server->fetch_mapped_features('gene', 'get_all_Genes', [$analysis_name, undef, 1],
            map { defined($server->param($_)) ? $server->param($_) : '' } qw(cs name type start end metakey csver csver_remote)
        );

        foreach my $gene (@$genes) {
            $output_string .= $gene->toXMLstring(
                $allowed_transcript_analyses_hash,
                $allowed_translation_xref_db_hash
            );
        }
    }
};

if ($@) {
    $server->error_exit("Error fetching genes:\n" . $@);
} else {
    $server->send_response($output_string, 1);
}

1;

