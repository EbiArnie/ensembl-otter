#!/usr/bin/perl -Tw

use strict;
use warnings;

BEGIN { use lib ($ENV{OTTER_PERL_INC} || q{}) =~ m{([^:]+)}g }
use SangerPaths qw{ core bioperl123 otter };
use Bio::Otter::Git qw{ :server_ensembl :match };

use Bio::Otter::Server::Support::Web;

use Bio::Vega::ContigLockBroker;
use Bio::Vega::SliceLockBroker;

my $select_locks_sql = <<'SQL'
SELECT DISTINCT cl.name
  , concat(embl_acc.value, '.', embl_version.value)
  , ctg.name
  , l.hostname
  , l.timestamp
  , aut.author_name
  , aut.author_email
FROM (seq_region cl
  , seq_region ctg
  , assembly cl2ctg
  , seq_region_attrib embl_acc
  , assembly chr2ctg
  , seq_region chr
  , seq_region_attrib embl_version)
LEFT JOIN contig_lock l
  ON ctg.seq_region_id = l.seq_region_id
LEFT JOIN author aut
  ON aut.author_id = l.author_id
WHERE cl2ctg.asm_seq_region_id = cl.seq_region_id
  AND cl2ctg.cmp_seq_region_id = ctg.seq_region_id
  AND cl.coord_system_id =
(SELECT coord_system_id
    FROM coord_system
    WHERE name = 'clone')
  AND ctg.coord_system_id =
(SELECT coord_system_id
    FROM coord_system
    WHERE name = 'contig')
  AND embl_acc.seq_region_id = cl.seq_region_id
  AND embl_acc.attrib_type_id =
(SELECT attrib_type_id
    FROM attrib_type
    WHERE code = 'embl_acc')
  AND embl_version.seq_region_id = cl.seq_region_id
  AND embl_version.attrib_type_id =
(SELECT attrib_type_id
    FROM attrib_type
    WHERE code = 'embl_version')
  AND chr.name = ?
  AND chr2ctg.asm_seq_region_id = chr.seq_region_id
  AND chr2ctg.cmp_seq_region_id = ctg.seq_region_id
  AND l.contig_lock_id IS NOT NULL
ORDER BY l.timestamp
SQL
    ;

sub get_CloneLocks {
    my ($server) = @_;

    my $asm_type = $server->require_argument('chr');
    my $sth = $server->otter_dba()->dbc()->prepare($select_locks_sql);
    $sth->execute($asm_type);
    my @out;
    while (my (@columns) = $sth->fetchrow()) {
        my %field;
        @field{qw{ intl_name acc_sv ctg_name hostname timestamp author_name author_email }}
          = @columns;
        push @out, \%field;
    }
    return \@out;
}

sub get_SliceLocks {
    my ($server) = @_;

    my $SLdba = $server->otter_dba->get_SliceLockAdaptor;
    my $S_dba = $server->otter_dba->get_SliceAdaptor;
    my $chr = $server->require_argument('chr');
    my $chr_slice = $S_dba->fetch_by_region
      ('chromosome', $chr, undef, undef, undef, 'Otter', 1);
    die "Cannot find chromosome:Otter:$chr" unless $chr_slice;
    my $srid = $chr_slice->get_seq_region_id;

    my $slocks = $SLdba->fetch_by_seq_region_id($srid, 1); # extant

    return $slocks;
}

sub get_locks {
    my ($server) = @_;
    my $ds = $server->dataset;
    my %out;

    $out{CloneLock} = get_CloneLocks($server)
      if Bio::Vega::ContigLockBroker->supported($ds);

    $out{SliceLock} = get_SliceLocks($server)
      if Bio::Vega::SliceLockBroker->supported($ds);
    $server->json->convert_blessed;

    return \%out;
}

Bio::Otter::Server::Support::Web->send_response(-content_type => 'application/json', \&get_locks);
