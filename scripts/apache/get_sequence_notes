#!/usr/bin/perl -Tw

# Author:        jgrg
# Group:         anacode
# Maintainer:    jgrg

use strict;
use warnings;

BEGIN { use lib ($ENV{OTTER_PERL_INC} || q{}) =~ m{([^:]+)}g }
use SangerPaths qw{ core bioperl123 ensembl70 otter74 };

use Bio::Otter::ServerScriptSupport;

my $select_sequence_notes_sql = <<'SQL'
    SELECT ctg.name,
           aut.author_name,
           sn.is_current,
           sn.note_time,
           UNIX_TIMESTAMP(sn.note_time) as ts,
           sn.note
      FROM assembly asm, seq_region chr,
           seq_region ctg,
           sequence_note sn,
           author aut
     WHERE chr.name = ?
       AND asm.asm_seq_region_id = chr.seq_region_id
       AND asm.cmp_seq_region_id = ctg.seq_region_id
       AND sn.seq_region_id = ctg.seq_region_id 
       AND sn.author_id = aut.author_id
  GROUP BY ctg.name,
           aut.author_name,
           sn.is_current,
           sn.note_time,
           sn.note
  ORDER BY ctg.name, sn.note_time ASC
SQL
    ;

sub get_sequence_notes {
    my ($server) = @_;

    my $asm_type = $server->require_argument('type');
    my $sth = $server->otter_dba()->dbc()->prepare($select_sequence_notes_sql);
    $sth->execute($asm_type);

    my $output_string = '';
    while (my ($ctg_name, $author_name, $is_current, $note_time, $timestamp, $note) = $sth->fetchrow()) {
        $note=~s/\n/\ /g;
        if($is_current=~/^(.)/) {
            $is_current = uc($1);
        }
        $output_string .= join("\t", $ctg_name, $author_name, $is_current, $note_time, $timestamp, $note)."\n";
    }

    return $server->otter_wrap_response($output_string);
}

Bio::Otter::ServerScriptSupport->send_response(\&get_sequence_notes);
