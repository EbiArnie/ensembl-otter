#!/usr/local/bin/perl -Tw

# Author:        jgrg
# Group:         anacode
# Maintainer:    jgrg

use strict;
use warnings;

use SangerPaths qw{ core bioperl123 ensembl61 otter54 };

use Bio::Otter::ServerScriptSupport;
use Bio::Vega::ContigLockBroker;
use Bio::Vega::Transform::XML;

my $server = Bio::Otter::ServerScriptSupport->new;

my $cs      = $server->param('cs')       || 'chromosome';
my $csver   = $server->param('csver')    || (($cs eq 'chromosome') ? 'Otter' : undef);
my $name    = $server->require_argument('name');
my $type    = $server->require_argument('type');
my $start   = $server->require_argument('start');
my $end     = $server->require_argument('end');
my $strand  = $server->param('strand')   || undef;
my $cl_host = $server->param('hostname') || $ENV{REMOTE_ADDR};

my ($xml);
eval {
    my $odba = $server->otter_dba();

    my $cb = Bio::Vega::ContigLockBroker->new;
    $cb->client_hostname($cl_host);

    warn "Getting slice [$name] [$start] [$end]\n";
    my $slice = $server->get_slice($odba, $cs, $name, $type, $start, $end, $strand, $csver);
    my $author_obj = $server->make_Author_obj();

    warn "Attempting to lock clones...\n";
    $cb->lock_clones_by_slice($slice, $author_obj, $odba);
    my $formatter = Bio::Vega::Transform::XML->new;
    $formatter->otter_dba($odba);
    $formatter->slice($slice);
    $formatter->fetch_species;
    $formatter->fetch_CloneSequences;
    $xml = $formatter->generate_OtterXML;
};

if ($@) {
    warn "Error getting locks: $@\n";
    $server->error_exit("Clones locked - exiting [$@]");
} else {
    warn "Obtained the locks.\n";
    $server->send_response($xml);
}


1;

