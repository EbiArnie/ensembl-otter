#!/usr/local/bin/perl -Tw

# Author:        jgrg
# Group:         anacode
# Maintainer:    jgrg
# Last modified: $Date: 2008-05-22 10:40:44 $
# Id:            $Id: nph-get_clonesequences_fast,v 1.11 2008-05-22 10:40:44 jgrg Exp $
# Source:        $Source: /tmp/ENSCOPY-ENSEMBL-OTTER/scripts/apache/Attic/nph-get_clonesequences_fast,v $

use strict;
use SangerPaths qw{ core bioperl123 ensembl49 otter49 };

use Bio::Otter::ServerScriptSupport;

my $server = Bio::Otter::ServerScriptSupport->new;

my $dataset     =  $server->require_argument('dataset');
my $sequenceset =  $server->require_argument('sequenceset');

my $odba = $server->otter_dba();

# Allow local scripts to access without authorization
unless ($server->local_user) {
    $server->authorized_user;
}

my $xml = '';
$xml   .= qq`  <dataset name="$dataset">\n`;
$xml   .= qq`    <sequenceset name="$sequenceset">\n`;
$xml   .= qq`      <clonesequences>\n`;

my $sql = q{
    SELECT cl.name
      , intl_clone_name.value
      , embl_acc.value
      , embl_version.value
      , ctg.name
      , ctg.length
      , chr_name.value
      , chr.length
      , chr2ctg.asm_start
      , chr2ctg.asm_end
      , chr2ctg.cmp_start
      , chr2ctg.cmp_end
      , chr2ctg.ori
      , l.contig_lock_id
      , l.hostname
      , aut.author_name
      , aut.author_email
    FROM assembly chr2ctg
      , assembly cl2ctg
      , seq_region chr
      , seq_region ctg
      , seq_region cl
      , seq_region_attrib embl_acc
      , seq_region_attrib embl_version
      , seq_region_attrib chr_name
    LEFT JOIN seq_region_attrib intl_clone_name
      ON intl_clone_name.seq_region_id = cl.seq_region_id
      AND intl_clone_name.attrib_type_id = (SELECT attrib_type_id
                                            FROM attrib_type
                                            WHERE code = 'intl_clone_name')
    LEFT JOIN contig_lock l
      ON l.seq_region_id = ctg.seq_region_id
    LEFT JOIN author aut
      ON aut.author_id = l.author_id
    WHERE chr.name = ?

      AND chr2ctg.asm_seq_region_id = chr.seq_region_id
      AND chr2ctg.cmp_seq_region_id = ctg.seq_region_id

      AND cl2ctg.asm_seq_region_id = cl.seq_region_id
      AND cl2ctg.cmp_seq_region_id = ctg.seq_region_id

      AND ctg.coord_system_id = (SELECT coord_system_id
                                 FROM coord_system
                                 WHERE name = 'contig')

      AND cl.coord_system_id = (SELECT coord_system_id
                                FROM coord_system
                                WHERE name = 'clone')

      AND chr.seq_region_id = chr_name.seq_region_id
      AND chr_name.attrib_type_id = (SELECT attrib_type_id
                                     FROM attrib_type
                                     WHERE code = 'chr')

      AND cl.seq_region_id = embl_acc.seq_region_id
      AND embl_acc.attrib_type_id = (SELECT attrib_type_id
                                     FROM attrib_type
                                     WHERE code = 'embl_acc')

      AND cl.seq_region_id = embl_version.seq_region_id
      AND embl_version.attrib_type_id = (SELECT attrib_type_id
                                         FROM attrib_type
                                         WHERE code = 'embl_version')
    ORDER BY chr2ctg.asm_start
    };

my $sth = $odbc->dbc->prepare($sql);
$sth->execute($sequenceset);
while (my ($cl_name, $intl_name, $acc,  $sv,
       $ctg_name,  $ctg_length,
       $chr_name, $chr_length, $chr_start,  $chr_end,
       $ctg_start, $ctg_end, $ctg_strand,
       $clone_lock_id, $hostname,
       $author_name, $author_email ) = $sth->fetchrow) {

  my $clone_name = $intl_name || $cl_name;

  $xml .= qq`        <clonesequence>\n`;
  $xml .= qq`          <clone_name>$clone_name</clone_name>\n`;
  $xml .= qq`          <accession>$acc</accession>\n`;
  $xml .= qq`          <sv>$sv</sv>\n`;
  $xml .= qq`          <contig_name>$ctg_name</contig_name>\n`;
  $xml .= qq`          <length>$ctg_length</length>\n`;
  $xml .= qq`          <chr name="$chr_name" length="$chr_length"></chr>\n`;
  $xml .= qq`          <chr_start>$chr_start</chr_start>\n`;
  $xml .= qq`          <chr_end>$chr_end</chr_end>\n`;
  $xml .= qq`          <contig_start>$ctg_start</contig_start>\n`;
  $xml .= qq`          <contig_end>$ctg_end</contig_end>\n`;
  $xml .= qq`          <contig_strand>$ctg_strand</contig_strand>\n`;
  if (defined $clone_lock_id){
    $xml .= qq`          <lock lock_id="$clone_lock_id" author_name="$author_name" email="$author_email" host_name="$hostname"> </lock>\n`;
  } # endif
  $xml .= qq`        </clonesequence>\n`;
} # endwhile

$xml .= qq`      </clonesequences>\n`;
$xml .= qq`    </sequenceset>\n`;
$xml .= qq`  </dataset>\n`;
$server->send_response($xml, 1);

__END__

=head1 NAME - get_clonesequences


=head1 DESCRIPTION

return xml for Clone Sequences of a sequence set.

=head1 AUTHOR

Sindhu K.Pillai B<email> sp1@sanger.ac.uk
Leo Gordon B<email> lg4@sanger.ac.uk

