#!/usr/local/bin/perl -Tw

# Author:        jgrg
# Group:         anacode
# Maintainer:    jgrg
# Last modified: $Date: 2008-06-03 14:09:44 $
# Id:            $Id: nph-get_genes,v 1.15 2008-06-03 14:09:44 jgrg Exp $
# Source:        $Source: /tmp/ENSCOPY-ENSEMBL-OTTER/scripts/apache/Attic/nph-get_genes,v $

use strict;
use SangerPaths qw{ core bioperl123 ensembl49 otter50 };

use Bio::Otter::ServerScriptSupport;
use Bio::Otter::Lace::ViaText::ToText ('&GenerateGenes');

sub Bio::EnsEMBL::Gene::propagate_slice {
    my ($gene, $slice) = @_;

    foreach my $transcript (@{ $gene->get_all_Transcripts() }) {
        foreach my $exon (@{ $transcript->get_all_Exons() }) {
            $exon->slice($slice);
        }
        $transcript->slice($slice);
    }
    $gene->slice($slice);
}

my $server = Bio::Otter::ServerScriptSupport->new;

my $output_string = '';

eval {
    my $analysis_name        = $server->param('analysis');
    my $transcript_analyses  = $server->param('transcript_analyses')  || '';
    my $translation_xref_dbs = $server->param('translation_xref_dbs') || '';

    my $allowed_transcript_analyses_hash = $transcript_analyses
        ? { map { $_ => 1 } split(/,/, $transcript_analyses) }
        : '';
    my $allowed_translation_xref_db_hash = $translation_xref_dbs
        ? { map { $_ => 1 } split(/,/, $translation_xref_dbs) }
        : '';

        # third parameter of $slice->get_all_Genes() helps preventing lazy-loading of transcripts
    my $genes = $server->fetch_mapped_features('gene', 'get_all_Genes', [$analysis_name, undef, 1],
        map { defined($server->param($_)) ? $server->param($_) : '' } qw(cs name type start end metakey csver csver_remote)
    );

    $output_string = GenerateGenes($genes, $allowed_transcript_analyses_hash, $allowed_translation_xref_db_hash);
};

if ($@) {
    $server->error_exit("Error fetching genes:\n" . $@);
} else {
    $server->send_response($output_string, 1);
}

1;

