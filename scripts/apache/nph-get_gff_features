#!/usr/local/bin/perl -Tw

# Author:        gr5
# Group:         anacode
# Maintainer:    gr5

use strict;
use warnings;

use SangerPaths qw{ core bioperl123 ensembl57 otter53 };

use Bio::Otter::ServerScriptSupport;
use Bio::Vega::Utils::EnsEMBL2GFF;

use Time::HiRes qw(time);

my $server = Bio::Otter::ServerScriptSupport->new;

my $gff_string = '';

my ($t0, $t1, $t2);

eval {
    my $analyses        = $server->param('analysis');
    my $types           = $server->param('kind');
    my $rebase          = $server->param('rebase');
    my $gff_source      = $server->param('gff_source');
    my $gff_seqname     = $server->param('gff_seqname');
    my $swap_strands    = $server->param('swap_strands');
    
    $t0 = time();

    my $features = $server->get_requested_features;
   
    $t1 = time();

    my %gff_args = (
        rebase      => $rebase,
        gff_source  => $gff_source,
        gff_seqname => $gff_seqname,
    );

    if (@$features) {
        $gff_string = $features->[0]->slice->gff_header(%gff_args);
        
        for my $f (@$features) {
            if ($swap_strands && $f->can('hstrand') && $f->hstrand == -1) {
                $f->hstrand($f->hstrand * -1);
                $f->strand($f->strand * -1);
            }
            my $gff = $f->to_gff(%gff_args);
            $gff_string .= $gff."\n" if $gff;
        }
    }
    else {
        $gff_string = $server->empty_gff_header;
    }

    $t2 = time();
};

if ($@) {
	$server->error_exit($@);
}
else {
    $server->send_response($gff_string, 0, 1);
    #$server->send_response("db took: ".($t1-$t0)." gff took: ".($t2-$t1));
}

1;

