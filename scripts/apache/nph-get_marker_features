#!/usr/local/bin/perl -Tw

# Author:        jgrg
# Group:         anacode
# Maintainer:    jgrg
# Last modified: $Date: 2008-04-25 09:43:10 $
# Id:            $Id: nph-get_marker_features,v 1.12 2008-04-25 09:43:10 jgrg Exp $
# Source:        $Source: /tmp/ENSCOPY-ENSEMBL-OTTER/scripts/apache/Attic/nph-get_marker_features,v $

use strict;
use SangerPaths qw{ core bioperl123 ensembl48 otter49 };

use Bio::Otter::ServerScriptSupport;
use Bio::Otter::Lace::ViaText ('%OrderOfOptions');

my $server = Bio::Otter::ServerScriptSupport->new;

my $analysis_name = $server->param('analysis');

my $mfs = $server->fetch_mapped_features('marker_feature', 'get_all_MarkerFeatures', [$analysis_name],
    map { defined($server->param($_)) ? $server->param($_) : '' } qw(cs name type start end metakey csver csver_remote)
);

my @mf_optnames = @{ $OrderOfOptions{MarkerFeature} };
my @mo_optnames = @{ $OrderOfOptions{MarkerObject} };
my @ms_optnames = @{ $OrderOfOptions{MarkerSynonym} };
my $output_string = '';

    # Stringify only the simple fields:
my %mo_seen = (); # collect the seen marker object ids here
foreach my $mf (@$mfs) {
    my $mo = $mf->marker(); # object
    my $mo_id = $mo->dbID();

    if(!exists($mo_seen{$mo_id})) { # a new one

            # output a marker object line:
        my @mo_optvalues = ('MarkerObject');
        for my $opt (@mo_optnames) {
            push @mo_optvalues, $mo->$opt() || 0;
        }
        $output_string .= join("\t", @mo_optvalues)."\n";

            # output all marker synonym lines:
        my $mss = $mo->get_all_MarkerSynonyms();
        for my $ms (@$mss) {
            my @ms_optvalues = ('MarkerSynonym');
            for my $opt (@ms_optnames) {
                push @ms_optvalues, $ms->$opt() || 0;
            }
            push @ms_optvalues, $mo_id;
            $output_string .= join("\t", @ms_optvalues)."\n";
        }

        $mo_seen{$mo_id} = 1;
    }
    
        # output a marker feature line:
    my @mf_optvalues = ('MarkerFeature');
    for my $opt (@mf_optnames) {
        push @mf_optvalues, $mf->$opt();
    }
    push @mf_optvalues, $mo_id;

    if(!$analysis_name) {
        push @mf_optvalues, $mf->analysis()->logic_name();
    }

    $output_string .= join("\t", @mf_optvalues)."\n";
}

$server->send_response($output_string, 1);

1;

