#!/usr/local/bin/perl -Tw

# Author:        jgrg
# Group:         anacode
# Maintainer:    jgrg
# Last modified: $Date: 2008-02-22 14:29:37 $
# Id:            $Id: nph-get_sequencesets,v 1.12 2008-02-22 14:29:37 jgrg Exp $
# Source:        $Source: /tmp/ENSCOPY-ENSEMBL-OTTER/scripts/apache/Attic/nph-get_sequencesets,v $

use strict;
use SangerPaths qw{ core bioperl123 ensembl46 otter48 };

use Bio::Otter::ServerScriptSupport;

my $server = Bio::Otter::ServerScriptSupport->new;
my $xml = '';

eval {

    my $dataset = $server->require_argument('dataset');

    # Allow local scripts to access without authorization
    unless ($server->local_user) {
        $server->authorized_user;
    }

    my $odba = $server->otter_dba();

        # mapping between subregions and chromosomes:
    my $sql = qq{
        SELECT sub.name, chr.name, count(*) cnt, group_concat(cln.name ORDER BY sub_ctg.asm_start SEPARATOR ','), sub_hdn.value
        FROM seq_region sub,
             assembly sub_ctg,
             seq_region ctg,
             assembly chr_ctg,
             seq_region chr,
             assembly cln_ctg,
             seq_region cln,
             seq_region_attrib sub_hdn
        WHERE sub.coord_system_id=(SELECT coord_system_id FROM coord_system where name='subregion')
          AND sub_hdn.seq_region_id=sub.seq_region_id
          AND sub_hdn.attrib_type_id=(SELECT attrib_type_id FROM attrib_type where code='hidden')
          AND sub.seq_region_id=sub_ctg.asm_seq_region_id
          AND ctg.seq_region_id=sub_ctg.cmp_seq_region_id
          AND ctg.coord_system_id=(SELECT coord_system_id FROM coord_system where name='contig')
          AND cln.seq_region_id=cln_ctg.asm_seq_region_id
          AND ctg.seq_region_id=cln_ctg.cmp_seq_region_id
          AND cln.coord_system_id=(SELECT coord_system_id FROM coord_system where name='clone')
          AND sub_ctg.cmp_seq_region_id=chr_ctg.cmp_seq_region_id
          AND chr.seq_region_id=chr_ctg.asm_seq_region_id
          AND (chr.coord_system_id=(SELECT coord_system_id FROM coord_system where name='chromosome' and version='Otter')
               OR chr.seq_region_id=sub.seq_region_id)
        GROUP BY sub.name, chr.name
        ORDER BY sub.name, cnt DESC
    };

    my $sth = $odba->dbc()->prepare($sql);
    $sth->execute();

    my %sub_contig_count = ();
    my %chr_2_sub = ();
    my %sub_contigs = ();
    my %sub_hidden = ();
    while( my ($sub_name, $chr_name, $cnt, $contig_list, $sub_hidden) = $sth->fetchrow() ) {
        if(!defined($sub_contig_count{$sub_name})) { # this is the first time we see it
            $sub_contig_count{$sub_name} = $cnt;
            $sub_contigs{$sub_name} = $contig_list; # just as comma-separated list
            $sub_hidden{$sub_name} = $sub_hidden;
        }

        if(($cnt == $sub_contig_count{$sub_name}) && ($chr_name ne $sub_name)) {
            push @{$chr_2_sub{$chr_name}}, $sub_name;
        }
    }


    $xml   .= qq`  <dataset name="$dataset">\n`;
    $xml   .= qq`    <sequencesets>\n`;

    my $slice_adaptor     = $odba->get_SliceAdaptor();
    my $attribute_adaptor = $odba->get_AttributeAdaptor();

    foreach my $ss_slice (@{$slice_adaptor->fetch_all('chromosome', 'Otter')}) {

        my $chr_name = $ss_slice->seq_region_name();
        my $description  = ''; # default
        my $write_access = 1;  # default
        my $hidden       = 1;  # default

        # FIXME: we will need finer, by-author's-name control over visibility/writability of sequence sets

        for my $attrib (@{ $attribute_adaptor->fetch_all_by_Slice( $ss_slice ) }) {
            my ($code, $value) = ($attrib->code(), $attrib->value());
            if($code eq 'description') {
                $description  = $value;
            }elsif($code eq 'write_access') {
                $write_access = $value;
            }elsif($code eq 'hidden') {
                $hidden       = $value;
            }
        }

        $xml .= qq`      <sequenceset name="$chr_name">\n`;
        $xml .= qq`        <description>$description</description>\n`;
        $xml .= qq`        <is_hidden>$hidden</is_hidden>\n`;
        $xml .= qq`        <write_access>$write_access</write_access>\n`;

        foreach my $sub_name (@{$chr_2_sub{$chr_name}}) {
            $xml .= qq`        <subregion name="$sub_name" hidden="$sub_hidden{$sub_name}">$sub_contigs{$sub_name}</subregion>\n`;
        }

        $xml .= qq`      </sequenceset>\n`;
    }

    $xml .= qq`    </sequencesets>\n`;
    $xml .= qq`  </dataset>\n`;
};

if ($@) {
    $server->error_exit($@);
} else {
    $server->send_response($xml, 1);
}

1;

__END__

=head1 NAME - get_sequencesets


=head1 DESCRIPTION

return xml for sequence sets

=head1 AUTHOR

Roy Storey,,,, B<email> rds@sanger.ac.uk
refactored by Sindhu K.Pillai B<email> sp1@sanger.ac.uk
Leo Gordon B<email> lg4@sanger.ac.uk - support for the new schema

