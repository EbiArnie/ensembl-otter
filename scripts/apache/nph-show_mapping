#!/usr/local/bin/perl -Tw

# Author:        jgrg
# Group:         anacode
# Maintainer:    jgrg
# Last modified: $Date: 2009-03-06 18:38:12 $
# Id:            $Id: nph-show_mapping,v 1.19 2009-03-06 18:38:12 jgrg Exp $
# Source:        $Source: /tmp/ENSCOPY-ENSEMBL-OTTER/scripts/apache/Attic/nph-show_mapping,v $

use strict;
use SangerPaths qw{ core bioperl123 ensembl51 otter51 };

use Bio::Otter::ServerScriptSupport;


my $server = Bio::Otter::ServerScriptSupport->new;

my $dataset   = $server->require_argument('dataset');
my $csver_cmp = $server->require_argument('csver');
my $csver_asm = 'Otter';
my $mapper_metakey = "mapper_db.${csver_cmp}";

my $odba = $server->otter_dba();

my ($mapper_val) = @{$odba->get_MetaContainer()->list_value_by_key($mapper_metakey)};
my $mdba;

if (!$mapper_val) {
    $server->error_exit("'$mapper_metakey' is not properly defined");
} elsif($mapper_val eq '=otter_head') {
    $mdba = $odba;
} elsif($mapper_val eq '=pipeline_head') {
    $mdba = $server->satellite_dba( '' );
} else {
    $mdba = $server->satellite_dba($mapper_metakey);
}

my $mdbc = $mdba->dbc();

my $sth = $mdbc->prepare(q{
    SELECT asm.name
      , cmp.name
      , a.asm_start
      , a.asm_end
      , a.cmp_start
      , a.cmp_end
    FROM assembly a
      , seq_region asm
      , seq_region cmp
      , coord_system cs_asm
      , coord_system cs_cmp
    WHERE a.asm_seq_region_id = asm.seq_region_id
      AND a.cmp_seq_region_id = cmp.seq_region_id
      AND cs_asm.version = ?
      AND cs_cmp.version = ?
      AND asm.coord_system_id IN (cs_asm.coord_system_id
          , cs_cmp.coord_system_id)
      AND cmp.coord_system_id IN (cs_asm.coord_system_id
          , cs_cmp.coord_system_id)
    ORDER BY asm.name
      , a.asm_start
});
$sth->execute($csver_asm, $csver_cmp);

my $output_string = '';
while (my ($asm_name, $cmp_name, $asm_start, $asm_end, $cmp_start, $cmp_end) = $sth->fetchrow) {
    $output_string .= sprintf "%s:%s [ %11s  %11s ] - %s:%s [ %11s  %11s ]\n",
        $csver_asm, $asm_name, comma_separate_thousands($asm_start), comma_separate_thousands($asm_end),
        $csver_cmp, $cmp_name, comma_separate_thousands($cmp_start), comma_separate_thousands($cmp_end);
}

$server->send_response($output_string, 1);

sub comma_separate_thousands {
    my ($num) = @_;
    
    for (my $i = length($num) - 3; $i > 0; $i -= 3) {
        substr($num, $i, 0) = ',';
    }
    return $num;
}

1;

