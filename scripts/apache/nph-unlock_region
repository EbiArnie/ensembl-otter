#!/usr/local/bin/perl -Tw

use strict;
use SangerPaths qw{ otter48 ensembl44 bioperl123 core };

use Bio::Otter::ServerScriptSupport;
use Bio::Vega::ContigLockBroker;
use Bio::Vega::Transform::Otter;


{
  my $server = Bio::Otter::ServerScriptSupport->new;

  my $odba        = $server->otter_dba();
  my $author_obj  = $server->make_Author_obj();
  my $slice;

  # the original string lives here:
  my    $xml_string = $server->require_argument('data');
  eval{
	 my $parser = Bio::Vega::Transform::Otter->new;
	 $parser->parse($xml_string);
	 my $cs='chromosome';
	 my $chr_slice=$parser->get_ChromosomeSliceDB($odba);
	 my $chrstart=$chr_slice->start;
	 my $chrend=$chr_slice->end;
	 my $strand=$chr_slice->strand;
	 my $cs_version=$parser->init_CoordSystem_Version;
	 my $segment_name=$parser->get_AssemblyType->{'assembly_type'};
	 my $chrname=$chr_slice->seq_region_name;
	 $slice =  $odba->get_SliceAdaptor()->fetch_by_region($cs,$segment_name,$chrstart,$chrend,$strand,$cs_version);
	 $server->log("Processed incoming xml file with slice: [$chrname] [$chrstart] [$chrend]");
  };
  if ($@) {
	 $server->error_exit("Failed converting XML to otter [$@]");
  }
  $server->log("Done converting.");
  $server->log("Checking region is locked...");
  my $cb=Bio::Vega::ContigLockBroker->new;
  eval {
	 $cb->check_locks_exist_by_slice($slice,$author_obj,$odba);
  };
  if ($@) {
	 $server->error_exit("Failed checking locks [$@]");
  }
  $server->log("Done checking region is locked.");
  $server->log("Unlocking clones...");
  eval{
	 $cb->remove_by_slice($slice,$author_obj,$odba);
  };
  $server->error_exit("Failed to unlock clones\n $@\n***\n") if $@;
  $server->log("Done unlocking clones.");
  $server->send_response("<response>\n</response>\n", 1);

}

1;

