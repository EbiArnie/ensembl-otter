#!/usr/bin/perl -Tw

# Author:        jgrg
# Group:         anacode
# Maintainer:    jgrg

use strict;
use warnings;

BEGIN { use lib ($ENV{OTTER_PERL_INC} || q{}) =~ m{([^:]+)}g }
use SangerPaths qw{ core bioperl123 ensembl65 otter70 };

use Bio::Otter::ServerScriptSupport;

sub show_mapping {
    my ($server) = @_;

my $csver_cmp = $server->require_argument('csver');
my $csver_asm = 'Otter';

my $sth = $server->otter_dba->dbc->prepare(q{
    SELECT asm.name
      , cmp.name
      , a.asm_start
      , a.asm_end
      , a.cmp_start
      , a.cmp_end
    FROM assembly a
      , seq_region asm
      , seq_region cmp
      , coord_system cs_asm
      , coord_system cs_cmp
    WHERE a.asm_seq_region_id = asm.seq_region_id
      AND a.cmp_seq_region_id = cmp.seq_region_id
      AND cs_asm.version = ?
      AND cs_cmp.version = ?
      AND asm.coord_system_id IN (cs_asm.coord_system_id
          , cs_cmp.coord_system_id)
      AND cmp.coord_system_id IN (cs_asm.coord_system_id
          , cs_cmp.coord_system_id)
    ORDER BY asm.name
      , a.asm_start
});
$sth->execute($csver_asm, $csver_cmp);

my $output_string = '';
while (my ($asm_name, $cmp_name, $asm_start, $asm_end, $cmp_start, $cmp_end) = $sth->fetchrow) {
    $output_string .= sprintf "%s:%s [ %11s  %11s ] - %s:%s [ %11s  %11s ]\n",
        $csver_asm, $asm_name, comma_separate_thousands($asm_start), comma_separate_thousands($asm_end),
        $csver_cmp, $cmp_name, comma_separate_thousands($cmp_start), comma_separate_thousands($cmp_end);
}

    return $server->otter_wrap_response($output_string);
}

Bio::Otter::ServerScriptSupport->send_response(\&show_mapping);

sub comma_separate_thousands {
    my ($num) = @_;

    for (my $i = length($num) - 3; $i > 0; $i -= 3) {
        substr($num, $i, 0, ',');
    }
    return $num;
}
