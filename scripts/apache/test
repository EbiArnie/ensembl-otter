#!/usr/bin/perl -Tw

# Author:        jgrg
# Group:         anacode
# Maintainer:    jgrg

use strict;
use warnings;

BEGIN { use lib ($ENV{OTTER_PERL_INC} || q{}) =~ m{([^:]+)}g }
use SangerPaths qw{ core bioperl123 ensembl65 otter67 };
use DBI;
use YAML 'Dump';

use Bio::Otter::ServerScriptSupport;


# keep the align-to-centre layout, it's easier to read than YAML
sub hash2table {
    my ($hashref) = @_;
    my $out;
    foreach my $var (sort keys %$hashref) {
        $out .= sprintf "%35s  %s\n", $var, $hashref->{$var};
    }
    return $out;
}

sub test {
    my ($server) = @_;

    my $web = $server->sangerweb;

    my $user = $web->username;

    my %out = (ENV => hash2table(\%ENV),
               CGI_param => '');

    foreach my $var ($server->param) {
        $out{CGI_param} .= sprintf "%24s  %s\n", $var, $server->param($var);
    }

    # avoiding exposing internals (private or verbose)
    my $cgi = $web->cgi;
    $out{SangerWeb} = { cgi => "$cgi",
                        username =>  $web->username };

    my $dbh = eval {
        DBI->connect("DBI:mysql:database=pipe_human;host=otp1slave;port=3322",
                     "ottro", undef,
                     { RaiseError => 1 });
    };
    $out{DBI} = $dbh ? { connected => "$dbh" } : { error => $@ };

    if ($server->param('more')) {
        $out{Perl} =
          { '$^X' => $^X, '$]' => $], '${^TAINT}' => ${^TAINT},
            '@INC' => \@INC, '%INC' => hash2table(\%INC),
          };
    }

    return $server->local_user ? Dump(\%out) : "You are an external user\n";
}

Bio::Otter::ServerScriptSupport->send_response(\&test);
