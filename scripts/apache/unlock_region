#!/usr/local/bin/perl -Tw

# Author:        jgrg
# Group:         anacode
# Maintainer:    jgrg

use strict;
use warnings;

use SangerPaths qw{ core bioperl123 ensembl57 otter53 };

use Bio::Otter::ServerScriptSupport;
use Bio::Vega::ContigLockBroker;
use Bio::Vega::Transform::Otter;


{
  my $server = Bio::Otter::ServerScriptSupport->new;

  my $odba        = $server->otter_dba();
  my $author_obj  = $server->make_Author_obj();
  my $slice;

  # the original string lives here:
  my    $xml_string = $server->require_argument('data');
  eval{
      my $parser = Bio::Vega::Transform::Otter->new;
      $parser->parse($xml_string);

      my $chr_slice    = $parser->get_ChromosomeSlice;
      my $seq_reg_name = $chr_slice->seq_region_name;
      my $start        = $chr_slice->start;
      my $end          = $chr_slice->end;
      my $strand       = $chr_slice->strand;
      my $cs           = $chr_slice->coord_system->name;
      my $cs_version   = $chr_slice->coord_system->version;

      $slice = $odba->get_SliceAdaptor()->fetch_by_region(
          $cs, $seq_reg_name, $start, $end, $strand, $cs_version);
      $server->log("Processed incoming xml file with slice: [$seq_reg_name] [$start] [$end]");
  };
  if ($@) {
      $server->error_exit("Failed converting XML to otter [$@]");
  }
  $server->log('Checking region is locked...');
  my $cb=Bio::Vega::ContigLockBroker->new;
  eval { $cb->check_locks_exist_by_slice($slice,$author_obj,$odba); };
  if ($@) {
      $server->error_exit("Failed checking locks [$@]");
  }
  $server->log('Done checking region is locked.');
  $server->log('Unlocking clones...');
  eval{ $cb->remove_by_slice($slice,$author_obj,$odba); };
  if ($@) {
      $server->error_exit("Failed to unlock clones\n $@\n***\n");
  }
  $server->log('Done unlocking clones.');
  $server->send_response("<response>\n</response>\n", 1);

}

1;

