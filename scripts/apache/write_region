#!/usr/local/bin/perl -Tw

# Author:        jgrg
# Group:         anacode
# Maintainer:    jgrg

use strict;
use warnings;

use SangerPaths qw{ core bioperl123 ensembl65 otter66 };

use Bio::Otter::ServerScriptSupport;
use Bio::Vega::ContigLockBroker;
use Bio::Vega::Transform::Otter;
use Bio::Vega::Transform::XML;


sub write_region {
    my ($server) = @_;

    my $odba       = $server->otter_dba();
    my $author_obj = $server->make_Author_obj();

    my $xml_string = $server->require_argument('data');

    my $parser = Bio::Vega::Transform::Otter->new;
    eval {
        $parser->parse($xml_string);
    };
    if ($@) {
        die "Failed converting XML to otter [$@]";
    }

    # check that the assembly is already loaded in the database and
    # is consistent with the current xml assembly

    my ($db_slice);
    my %ci_hash = ();
    eval {
        my $xml_slice = $parser->get_ChromosomeSlice;
        $db_slice = $odba->get_SliceAdaptor()->fetch_by_region(
            $xml_slice->coord_system->name,
            $xml_slice->seq_region_name,
            $xml_slice->start,
            $xml_slice->end,
            $xml_slice->strand,
            $xml_slice->coord_system->version,
            );

        my @db_tiles = sort { $a->from_start() <=> $b->from_start() }
                           @{ $db_slice->project('contig') };

        my @xml_tiles = $parser->get_Tiles;

        if (@db_tiles != @xml_tiles) {
            die "The numbers of tiles in XML_slice and DB_slice do not match";
        }

        for (my $i = 0; $i < @db_tiles; $i++) {

            my $db_asm_start = $db_tiles[$i]->from_start() + $db_slice->start() - 1;
            my $db_asm_end   = $db_tiles[$i]->from_end()   + $db_slice->start() - 1;
            my $db_ctg_slice = $db_tiles[$i]->to_Slice();
            my ($xml_asm_start, $xml_asm_end, $xml_ctg_slice, $xml_ci_attribs) = @{ $xml_tiles[$i] };

            if($db_asm_start != $xml_asm_start) {
                die "In tile number $i 'asm_start' is different (xml_value='$xml_asm_start', db_value='$db_asm_start') ";
            }

            if($db_asm_end != $xml_asm_end) {
                die "In tile number $i 'asm_end' is different (xml_value='$xml_asm_end', db_value='$db_asm_end') ";
            }

            foreach my $method (qw{ seq_region_name start end strand }) {
                my $db_value  = $db_ctg_slice->$method();
                my $xml_value = $xml_ctg_slice->$method();
                if ($db_value ne $xml_value) {
                    die "In tile number $i '$method' is different (xml_value='$xml_value', db_value='$db_value') ";
                }
            }

                ## hash the [db_contig, xml_ci_attribs] pairs for saving the attributes after the locks are obtained
            $ci_hash{$xml_ctg_slice->seq_region_name()} = [ $db_ctg_slice, $xml_ci_attribs ];
        }

    };
    if ($@) {
        die "Failed at comparing xml assembly with database assembly [$@]";
    }
    my $output_xml;
    $odba->begin_work;

    eval {
            ##check if clones are locked or not
        my $cb = Bio::Vega::ContigLockBroker->new;
        warn "Checking region is locked...\n";
        eval { $cb->check_locks_exist_by_slice($db_slice, $author_obj, $odba); };
        die "Failed checking locks [$@]" if $@;
        warn "Done checking region is locked.\n";

            ## everything that needs saving should use this timestamp:
        my $time_now = time;

            ##update all contig_info and contig_info_attrib
        while (my ($contig_name, $pair) = each %ci_hash) {
            my ($db_ctg_slice, $xml_ci_attribs) = @$pair;
            insert_ContigInfo_Attributes($odba, $author_obj, $db_ctg_slice, $xml_ci_attribs, $time_now);
            warn "Updating contig info-attrib for '$contig_name'\n";
        }

        ## strip_incomplete_genes for the xml genes
        my $xml_genes = $parser->get_Genes;
        strip_incomplete_genes($odba, $xml_genes);

        ##fetch database genes and compare to find the new/modified/deleted genes
        warn "Fetching database genes for comparison...\n";
        my $db_genes = $db_slice->get_all_Genes || [];
        strip_incomplete_genes($odba, $db_genes);
        warn "Comparing " . scalar(@$db_genes) . " old to " . scalar(@$xml_genes) . " new gene(s)...\n";

        my $gene_adaptor = $odba->get_GeneAdaptor;
        warn "Attaching gene to slice \n";


        my $changed_genes = [];
        foreach my $gene (@$xml_genes) {
            # attach gene and its components to the right slice
            $gene->slice($db_slice);
            # update author in gene and transcript
            $gene->gene_author($author_obj);
            foreach my $tran (@{ $gene->get_all_Transcripts }) {
                $tran->slice($db_slice);
                $tran->transcript_author($author_obj);
            }
            foreach my $exon (@{ $gene->get_all_Exons }) {
                $exon->slice($db_slice);
            }
            # update all gene and its components in db (new/mod)
            $gene->is_current(1);
            if ($gene_adaptor->store($gene, $time_now)) {
                push(@$changed_genes, $gene);
            }
        }
        warn "Updated " . scalar(@$changed_genes) . " genes\n";

        my %stored_genes_hash = map {$_->stable_id, $_} @$xml_genes;

        my $del_count = 0;
        foreach my $dbgene (@$db_genes) {
            next if $stored_genes_hash{$dbgene->stable_id};

            ##attach gene and its components to the right slice
            $dbgene->slice($db_slice);
            ##update author in gene and transcript
            $dbgene->gene_author($author_obj);
            foreach my $tran (@{ $dbgene->get_all_Transcripts }) {
                $tran->slice($db_slice);
                $tran->transcript_author($author_obj);
            }
            foreach my $exon (@{ $dbgene->get_all_Exons }) {
                $exon->slice($db_slice);
            }
            ##update all gene and its components in db (del)

            # Setting is_current to 0 will cause the store method to delete it.
            $dbgene->is_current(0);
            $gene_adaptor->store($dbgene, $time_now);
            $del_count++;
            "Deleted gene " . $dbgene->stable_id . "\n";
        }
        warn "Deleted $del_count Genes\n" if ($del_count);

        my $ab = $odba->get_AnnotationBroker();

        # Because exons are shared between transcripts, genes and gene versions
        # setting which are current is not simple
        #$ab->set_exon_current_flags($db_genes, $xml_genes);

        ##update feature_sets
        ##SimpleFeatures - deletes old features(features not in xml)
        ##and stores the current featues in databse(features in xml)
        my $xml_simple_features = $parser->get_SimpleFeatures;
        my $sfa                 = $odba->get_SimpleFeatureAdaptor;
        my $db_simple_features  = $sfa->fetch_all_by_Slice($db_slice);

        my ($delete_sf, $save_sf) = $ab->compare_feature_sets($db_simple_features, $xml_simple_features);
        foreach my $del_feat (@$delete_sf) {
            $sfa->remove($del_feat);
        }
        warn "Deleted " . scalar(@$delete_sf) . " SimpleFeatures\n" unless $@;
        foreach my $new_feat (@$save_sf) {
            $new_feat->slice($db_slice);
            $sfa->store($new_feat);
        }
        "Saved " . scalar(@$save_sf) . " SimpleFeatures\n" unless $@;

        ##assembly_tags are not taken into account here, as they are not part of annotation nor versioned ,
        ##but may be required in the future
        ##fetch a new slice, and convert this new_slice to xml so that
        ##the response xml has all the above changes done in this session

        ##pass on to the xml generator the current set of genes , simple features
        my $formatter =  Bio::Vega::Transform::XML->new;
        $formatter->genes($changed_genes);
        $formatter->seq_features($xml_simple_features);
        $formatter->slice($db_slice);
        $formatter->otter_dba($odba);
        $formatter->fetch_species;
        $formatter->fetch_CloneSequences;
        $output_xml = $formatter->generate_OtterXML;
    };
    if ($@) {
        my $error = $@; # save $@ because the next line clobbers it
        $odba->rollback;
        die sprintf 'Failed writing annotations [%s]', $error;
    } else {
        $odba->commit;
    }

    return $output_xml;
}

Bio::Otter::ServerScriptSupport->send_response(\&write_region);

#-------------------------------------------
#          S U B R O U T I N E S
#-------------------------------------------


sub insert_ContigInfo_Attributes {
    my ($db, $ctg_author, $ctg_slice, $ctg_attrib_list, $time_uniseconds) = @_;
    my $contig_info =  Bio::Vega::ContigInfo->new(
                        -author     => $ctg_author,
                        -slice      => $ctg_slice,
                        -attributes => $ctg_attrib_list,
    );
    $db->get_ContigInfoAdaptor->store($contig_info, $time_uniseconds);
    return;
}

sub strip_incomplete_genes {
    my ($odba, $gene_list) = @_;

    for (my $i = 0 ; $i < @$gene_list ;) {
        my $gene = $gene_list->[$i];
        if ($gene->truncated_flag) {
            my $gene_name = $gene->get_all_Attributes('name')->[0]->value;
            warn "Splicing out incomplete gene '$gene_name'\n";
            splice(@$gene_list, $i, 1);
            next;
        } else {
            $i++;
        }
    }
    return;
}
