#!/usr/bin/env perl

use strict;
use warnings;

use URI::Escape qw(uri_unescape);

use Bio::DB::Sam;
use Bio::Otter::Lace::Defaults;
use Bio::Otter::Fetch::BAM;
use Bio::Otter::Mapping;
use Bio::Vega::Utils::GFF;

# parse the command line

my $options = {
    gff_version => 3,
};

my @options_specs = qw(
    gff_version=s
    file=s
    csver=s
    dataset=s
    chr=s
    start=i
    end=i
    gff_source=s
    gff_seqname=s
    version
    );

my @options_required = qw(
    file
    csver
    dataset
    chr
    start
    end
    );

sub _key {
    my ($key) = m(^(.*?)(?:=|$));
    return $key;
}
sub _option {
    return ( $_, \$options->{_key()} );
}

sub show_version {
    print "bam_get 0.5\n";
    exit 0;
}

my @keys    = map { _key()    } @options_specs;
my @options = map { _option() } @options_specs;

my @old_ARGV = @ARGV;
Bio::Otter::Lace::Defaults::do_getopt(@options);
show_version() if $options->{version};
print STDERR "$0", ( map { " '$_'" } @old_ARGV ), "\n";

my @options_missing = grep { ! defined $options->{$_} } @options_required;
die sprintf "missing options: %s\n",
    join ', ', sort @options_missing
    if @options_missing;
$options->{$_} = uri_unescape($options->{$_}) for keys %{$options};
my (
    $gff_version,
    $file,
    $csver,
    $dataset,
    $chr,
    $start,
    $end,
    $gff_source,
    $gff_seqname
    ) = @{$options}{@keys};

my $sam = Bio::DB::Sam->new
    (
     -bam   => $file,
     # -fasta => $fasta_path,
    );

my $bam_fetch = Bio::Otter::Fetch::BAM->new( -sam => $sam );
my $gff_format = Bio::Vega::Utils::GFF::gff_format($gff_version);

sub _print_header {
    print
        <<"GFF",
##gff-version $gff_version
GFF
;
    return;
}

sub _print_feature {
    my ($feature, $fstart, $fend) = @_;

    # the -gff_source flag overrides the source from the BAM file
    my $source = $gff_source || $feature->source_tag;
    my ($score) = $feature->get_tag_values('AS');
    my $query = $feature->query;

    my $strand = '+';
    my @target_fields = ( $feature->name, $query->start, $query->end, $strand );

    my $flags = join ' ', $feature->get_tag_values('FLAGS');

    my $attribute_hash = {
        Name       => $feature->name,
        length     => $feature->l_qseq,
        cigar_bam  => $feature->cigar_str,
        bam_flags  => $flags,
        Target     => \ @target_fields,
        sequence   => $query->seq->seq,
    };

    my $phase = $feature->phase;

    print $gff_format->gff_line(
        $chr, $source, 'read',
        $fstart, $fend, $score, $strand, $phase,
        $attribute_hash);

    return;
}

# get the mapping from the Otter server
my $client = Bio::Otter::Lace::Defaults::make_Client();
my $mapping_xml = $client->otter_response_content(
    'GET', 'get_mapping', {
        dataset => $dataset,
        cs      => $csver,
        chr     => $chr,
        start   => $start,
        end     => $end,
    });
my $mapping = Bio::Otter::Mapping->new_from_xml($mapping_xml);

# map and print the features
_print_header;
$mapping->do_features($bam_fetch, $start, $end, \&_print_feature);

exit;

__END__

=head1 AUTHOR

Ana Code B<email> anacode@sanger.ac.uk

