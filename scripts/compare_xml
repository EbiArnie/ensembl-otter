#!/usr/bin/env perl

### compare_xml

use strict;
use warnings;
use Getopt::Long 'GetOptions';
use File::Temp;

{
    my $tag = 'transcript';
    GetOptions(
        'tag=s'     => \$tag,
        ) or die "Error processing command line";
    die "Too many arguments:\n", map "  $_\n", @ARGV
        if @ARGV > 2;
    my( $before_file, $after_file ) = @ARGV;
    
    my $before = get_file($before_file);
    my $after  = get_file( $after_file);
    
    my @before_tran = sort {$$a cmp $$b} $before->get_subtags($tag);
    my  @after_tran = sort {$$a cmp $$b}  $after->get_subtags($tag);

    my ($before_tmp, $after_tmp) = map {
        File::Temp->new
            (TEMPLATE => 'xml.XXXXXX', TMPDIR => 1, SUFFIX => ".$_")
        } qw( before after );

    print_xml($before_tmp, @before_tran);
    print_xml( $after_tmp,  @after_tran);
    
    print `diff -c $before_tmp $after_tmp`;
    my $exit = $? >> 8;
    die "Error running diff: exit($exit)" if $exit > 1;
}

sub print_xml {
    my( $fh, @data ) = @_;
    
    print {$fh} map $$_, @data
      or die "print{$fh} failed: $!";
    close $fh
      or die "close($fh) failed: $!";
}

sub get_file {
    my( $file ) = @_;
    
    local $/ = undef;
    open FILE, $file or die "Can't read '$file' : $!";
    my $str = <FILE>;
    close FILE;
    return OtterParse->new(\$str);
}



package OtterParse;

sub new {
    my( $pkg, $txt_ref ) = @_;
    
    return bless $txt_ref, $pkg;
}

{
    my( %parse_pattern );

    sub get_subtags {
        my( $self, $tag ) = @_;
        
        my $pat = $parse_pattern{$tag} ||= $self->make_pattern($tag);
        my( @values );
        while ($$self =~ /$pat/g) {
            my $v = $1;
            push(@values, ref($self)->new(\$v));
        }
        return @values;
    }

    sub get_value {
        my( $self, $tag ) = @_;
        
        my $pat = $parse_pattern{$tag} ||= $self->make_pattern($tag);
        my ($v) = $$self =~ /$pat/;
        if ($v) {
            return $v;
        } else {
            return;
        }
    }
}

sub make_pattern {
    my( $self, $tag ) = @_;
    
    return qr{<$tag>(.*?)</$tag>}s;
}




__END__

=head1 NAME - compare_xml

=head1 AUTHOR

James Gilbert B<email> jgrg@sanger.ac.uk

