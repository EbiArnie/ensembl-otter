#!/usr/local/bin/perl

=head1 NAME

prepare_loutre - script to configure loutre database prior to dumping

=head1 SYNOPSIS

prepare_loutre [options]

Options:

    --conffile, --conf=FILE             read script parameters from FILE
                                        (default: conf/Conversion.ini)
    --definition_file=FILE              read definitions for vega regions for FILE
    --vega_release=NUM                  Vega release number
    --release_type=STRING               Type of release, ie E
    --loutredbname=NAME                 use database NAME
    --loutrehost=HOST                   use database host HOST
    --loutreport=PORT                   use database port PORT
    --loutreuser=USER                   use database username USER
    --loutrepass=PASS                   use database passwort PASS
    --logfile, --log=FILE               log to FILE (default: *STDOUT)
    --logpath=PATH                      write logfile to PATH (default: .)
    -v, --verbose                       verbose logging (default: false)
    -i, --interactive=0|1               run script interactively (default: true)
    -n, --dry_run, --dry=0|1            don't write results to database
    -h, --help, -?                      print help (this message)


=head1 DESCRIPTION

Using FILE, this script defines the loutre seq_regions that are to be exported to Vega, and adds
/ updates relevant seq_region attributes for these to the loutre database. In addition it adds
toplevel and vega_release attributes to each loutre region that is going to be exported. The
latter is defined in the script parameters and acts as a log of which regions were dumped for
which website release.

Since API support for B::E::Attributes is very rudimentary, modification of attributes is done
using MySQL. Consequently the attribute table in the loutre database must be upto date before
running this script.

Support for setting attrib_type export_mode to a value of 'I' has not been tested and is not guaranteed.

=head1 LICENCE

This code is distributed under an Apache style licence:
Please see http://www.ensembl.org/code_licence.html for details

=head1 AUTHOR

Steve Trevanion <st3@sanger.ac.uk>

=head1 CONTACT

Post questions to the EnsEMBL development list ensembl-dev@ebi.ac.uk

=cut

use strict;
use warnings;
no warnings 'uninitialized';

use FindBin qw($Bin);
use vars qw($SERVERROOT);

BEGIN {
    $SERVERROOT = "$Bin/../../../..";
    unshift(@INC, "$SERVERROOT/ensembl-otter/modules");
    unshift(@INC, "$SERVERROOT/ensembl/modules");
    unshift(@INC, "$SERVERROOT/bioperl-live");
}

use Getopt::Long;
use Pod::Usage;
use Data::Dumper;
use Bio::EnsEMBL::Utils::ConversionSupport;

$| = 1;

my $support = new Bio::EnsEMBL::Utils::ConversionSupport($SERVERROOT);

# parse options
$support->parse_common_options(@_);
$support->parse_extra_options(
	'loutrehost=s',
	'loutreport=s',
	'loutreuser=s',
	'loutrepass=s',
	'loutredbname=s',
	'definition_file=s',
	'vega_release=s',
	'release_type=s',
);
$support->allowed_params(
	$support->get_loutre_params,
	'definition_file',
	'vega_release',
	'release_type',
	$support->get_common_params,
);

$support->check_required_params(
	$support->get_loutre_params,
	'definition_file',
	'vega_release',
	'release_type',
);
if ($support->param('help') or $support->error) {
    warn $support->error if $support->error;
    pod2usage(1);
}

# ask user to confirm parameters to proceed
$support->confirm_params;
# get log filehandle and print heading and parameters to logfile
$support->init_log;

#identify species we're working with
my $species;
if (! (($species) = $support->param('loutredbname') =~ /loutre_(\S+)_/ ) ) {
	$support->log_warning("No species name interpreted from loutredbname ".$support->param('loutredbname')." check configuration\n");
	exit;
}
unless (grep {$_ eq $species} qw(human mouse dog pig zebrafish)) {
	$support->log_warning("Species $species not recognised, please check\n");
	exit;
}

#parse input file and store details
my $rel_type = $support->param('release_type');
my $IN = $support->filehandle('<', $support->param('definition_file'));
my $active_record = 0;
my $regions_wanted_details;
REC:
while (my $rec = <$IN>) {
	next if $rec =~ /^[#;]/;
	next if $rec =~ /^\s*$/;
	chomp $rec;
	if ($rec =~ /^--(\S+)--$/) {
		$active_record = 1 if ($1 eq $species);
		$active_record = 0 if ($1 eq 'end');
		next REC;
	}
	next REC unless $active_record;
	my ($loutre_id,$vega_id,$human_id,$type,$ack) = split '\t', $rec;
	unless ($loutre_id && $vega_id && $human_id && $type && $ack) {
		$support->log_warning("Parsing input file failed, check tab spacing for line $loutre_id\n");
	}
	$regions_wanted_details->{$loutre_id} =  {
		vega_name        => "$vega_id",
		name             => "$human_id",
		vega_export_mod  => "$type",
		ack              => "$ack",
		vega_release     => $support->param('vega_release'),
	};
}

# connect to database and get adaptors
my $dba = $support->get_database('loutre','loutre');
my $sa = $dba->get_SliceAdaptor();
my $aa = $dba->get_AttributeAdaptor();

#get chromosomes without a hidden attribute
my $chroms = $support->fetch_non_hidden_slices($aa,$sa);

#get all chromosomes
my $all_chromosomes = $sa->fetch_all('Chromosome','Otter');

#for each chromosome that we want
SLICE:
foreach my $k (keys %$regions_wanted_details ) {

	#see which of the non hidden chromosomes best match what we want
	my $sr_name_to_use;
	my $saved_extra = '';
	my %possibles = map {$_->seq_region_name => $_} grep { $_->seq_region_name =~ /^$k-/ } @$chroms;
	if (scalar(keys %possibles) > 1) {
		my $max_version = 0;
		foreach my $sr_name ( keys %possibles ) {
			my ($assembly,$version,$extra) = $sr_name =~ /(.*)-(\d*)(\D*)/;
			if ($assembly && $version) {
				if ( (! $extra) && ($version > $max_version) ) {
					$max_version = $version;
					$sr_name_to_use = $sr_name;
				}
				elsif ($extra) {
#					warn "---$version---$max_version---";
					if ($version >= $max_version) {
#						warn "--$extra--$saved_extra--";
						if ($extra gt $saved_extra) {
							$max_version = $version;
							$sr_name_to_use = $sr_name;
							$saved_extra = $extra;
							$support->log_warning("There is a non numerical assembly version you might want to check- $sr_name");
						}
					}
				}
			}
			else {
				$support->log_warning("There is a non standard assembly name in loutre which has been ignored - $sr_name\n");
			}
		}
	}
	else {		
		($sr_name_to_use) = keys %possibles;
	}
	if ($sr_name_to_use) {
		$support->log("\nWill use seq_region $sr_name_to_use for requested region $k ...\n");
	}
	else {
		$support->log_warning("No matching seq_region found for requested region $k, check configuration file\n");
		next SLICE;
	}
	my $attribs_wanted  = $regions_wanted_details->{$k};
	my $slice           = $possibles{$sr_name_to_use};
	my $sr_id           = $slice->get_seq_region_id;
	my $attribs_present = $aa->fetch_all_by_Slice($slice);

	#prompt user to use this seq_region (ie update vega_export_mode attrib_type)
	#only if it has not been used in this export mode before...
	my $attrib = 'vega_export_mod';
	my $export_mode = $attribs_wanted->{$attrib};

	if (! @{$support->get_attrib_values($attribs_present,$attrib,$export_mode)} ) {
		unless ($support->user_proceed("Do you want to use $sr_name_to_use for vega export (ie set attrib code = $attrib to value \'$rel_type\' ?")) {
			next SLICE;
		}
	}
	#... otherwise no prompting is given

	my $r = [];
	if (! $support->param('dry_run')) {
		$r = $support->fix_attrib_value($attribs_present,$sr_id,$sr_name_to_use,$attrib,$export_mode);
	}
	&logit($r,$attrib,$export_mode,$sr_name_to_use);

	delete($attribs_wanted->{$attrib});
	
	# mark any old assemblies export_mode as 'None'
 CHROM:
	foreach my $chrom (@{$all_chromosomes}) {
		my $chr_name = $chrom->seq_region_name;
		my $chr_id   = $chrom->get_seq_region_id;
		if ($chr_name =~ /^$k-/) {
			next CHROM if ($chr_name eq $sr_name_to_use);
			my $attribs = $aa->fetch_all_by_Slice($chrom);
			if (! $support->param('dry_run')) {
				$r = $support->fix_attrib_value($attribs,$chr_id,$chr_name,$attrib,'None');
			}
			&logit($r,$attrib,'None',$chr_name);
		}
	}
		
	#update top level attribute
	if (! $support->param('dry_run')) {
		$r = $support->fix_attrib_value($attribs_present,$sr_id,$sr_name_to_use,'toplevel',1);
	}
	&logit($r,'toplevel',1,$sr_name_to_use);
			
	while (my ($code,$value) = each %$attribs_wanted) {
		#add another 'vega_release' attribute if the value is new (ie don't replace old values)
		if ($code eq 'vega_release') {
			my $existings =  $support->get_attrib_values($attribs_present,$code,$value);
			if (! grep { $value eq $_ } @$existings) {
				if (! $support->param('dry_run')) {
					$r = $support->store_new_attribute($sr_id,$code,$value);
				}
				&logit($r,$code,$value,$sr_name_to_use);
			}
		}
		#update all other attribs if the value is new (ie replace old values)
		else {
			if (! $support->param('dry_run')) {
				$r = $support->fix_attrib_value($attribs_present,$sr_id,$sr_name_to_use,$code,$value);
			}
			&logit($r,$code,$value,$sr_name_to_use);
		}
	}
}

#do a final sanity check and report:
#all of these attributes should only be present once for each chromosome that going to be exported.
#The exception is vega_release which can have multiple values

$support->log("\n\nSUMMARY\nRelevant attributes for chromosomes with a vega_export_mod attribute of value \'$rel_type\' are as follows:\n\n");

#set up printing format
my $template = "%-15s%-10s%-35s%-15s%-10s%-7s%-30s\n";
my $txt = sprintf $template, qw(loutre_id vega_id name ack toplevel hidden releases);
$txt .= "-"x110 . "\n";

#get attributes of chromosomes with a vega_export_mod of E
my %final_attribs = map {$_=> 1} qw(vega_name name ack toplevel hidden vega_release);
foreach my $chrom ( @{$sa->fetch_all('Chromosome','Otter')}) {
	my $attribs = $aa->fetch_all_by_Slice($chrom);
	my $name = $chrom->seq_region_name;
	my $c = $support->get_attrib_values($attribs,'vega_export_mod',$rel_type);
	if (scalar(@$c == 1)) {
		my %val;
		$val{'loutre_id'} = $name;
		my $atts = $aa->fetch_all_by_Slice($chrom);
		foreach my $k (keys %final_attribs) {
			my $c = $support->get_attrib_values($atts,$k);
			if ( ($k ne 'vega_release') && (scalar(@$c > 1)) ) {
				$support->log_warning("Chromosome $name has multiple $k attributes\n");
			}
			$val{$k} = join ',', @$c;
		}
		$txt .= sprintf $template, ($val{'loutre_id'},$val{'vega_name'},$val{'name'},$val{'ack'},$val{'toplevel'},$val{'hidden'},$val{'vega_release'});
#		$txt .=	"\n";
	}
	elsif (scalar(@$c > 1)) {
		$support->log_warning("CRITICAL - chromosome $name has multiple vega_export_mod attributes with a value of \'$rel_type\'\n");
	}
}

$support->log($txt);

# finish log
$support->finish_log;


sub logit {
	my ($r,$code,$value,$name) = @_;
	my $action;
	if ($support->param('dry_run')) {
		$support->log("Would store $code attribute of value $value to $name\n",1);
	}
	elsif (@$r) {
		my $action = $r->[0];
		my $existing = $r->[2];
		if ($existing) {
			$support->log("region $name: $action $code attribute of value \'$value\' from \'$existing\' (result = ".$r->[1].")\n",1);
		}
		else {
			$support->log("region $name: $action $code attribute of value $value (result = ".$r->[1].")\n",1);
		}
	}
}
