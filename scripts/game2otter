#!/usr/local/bin/perl -w

=pod

=head1 NAME - name

game2otter

=head1 DESCRIPTION

Converts game xml files to otter xml file

=head1 EXAMPLES

Example usage:

  game2otter -prefix 'BCM:' 3_* > otter_chr3.xml

  Converts all chromosome 3 game xml files in the current directory to an otter_chr3.xml file. The input file names should be of the format 3_114848570_115188425.annos.xml

=head1 AUTHOR

B<Sindhu Pillai> Email sp1@sanger.ac.uk

=cut

use strict;
use XML::Parser;
use Hum::Sort 'ace_sort';
use Getopt::Long;
use Data::Dumper;
#parameters

my $help = sub{ exec('perldoc',$0)};
my $prefix='';
GetOptions(
	   'h|help'=> $help,
	   'prefix:s'=> \$prefix,
          ) or $help->();

unless (@ARGV ) {
$help->();
}

#global variables for event handlers
my $assembly_start;
my $assembly_end;
my $chr_name;
my $strand;
my $start;
my $infile;
my $value;
my $element;
my $current_type;
my $geneflag;
my $tran_name_flag;
my $generef={};
my $transcript_count=-1;
my $exon_count=-1;
my $remark;
my $ampflag=0;
my $globgenename={};
my $gg;
my %globtransname;

my $parser = XML::Parser->new(
    Style    => 'Stream',
    Handlers => {
        Init  => \&init,
        Start => \&begin,
        Char  => \&char,
        End   => \&finish,
        Final => \&final
    }
);

@ARGV = sort {ace_sort($a, $b)} @ARGV;
#print "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n";
#print "<otter>\n<sequence_set>\n";

foreach $infile (@ARGV) {

    # Example file name: 3_114848570_115188425.annos.xml.mod.final
    my $this_chr;
    ($this_chr, $assembly_start, $assembly_end) = $infile =~ /(^\d+)_(\d+)_(\d+)(.+)/;
    if ($chr_name) {
        die "File '$infile' is chromosome '$this_chr' not chromosome '$chr_name'"
            unless $chr_name eq $this_chr;
    } else {
        $chr_name = $this_chr;
    }
    if ($assembly_start && $assembly_end) {
      if ($assembly_start > $assembly_end) {

	die "filename $infile has assembly start $assembly_start less than assembly end $assembly_end";
      }
    }
    else {
      die "filename $infile does not contain assembly start ,end values. assembly_start:$assembly_start assembly_end:$assembly_end\n";
    }
    if ( !($this_chr || $assembly_start || $assembly_end) ) {
      die "filename $infile not of required format example:3_114848570_115188425.annos.xml.mod.final";
    }
    eval {
      warn "Parsing $infile\n";
      $parser->parsefile($infile);
    };
    if ($@) {
      die "Parsing problem with file $infile\n $@ \n";
    }
}

print "</sequence_set>\n</otter>\n";

sub init {
  my $e = shift;
}

sub begin {
  my ($e, $tag, %attr) = @_;
  if ($tag eq "annotation") {
    $geneflag = 1;
    $generef={};
    $transcript_count=-1;
  }
  elsif ($tag eq "feature_set") {
    $geneflag = 0;
    $tran_name_flag=0;
    if ($transcript_count == -1) {
      $generef->{transcript}=[];
    }
    $transcript_count++;
    $exon_count=-1;
  }
  $element = $tag;
  $value='';
}

sub char {
  my ($e, $string) = @_;
  #$string =~ s/^\s*//;
  #$string =~ s/\s*$//;
  if ($string ne ""){
    $value .= $string;
  }
}

sub finish {
  my ($e, $tag) = @_;
  $value =~ s/^\s*//;
  $value =~ s/\s*$//;
  if ($tag eq "description" && $geneflag==1) {
    $generef->{gene_description} = $value;
  }

  if ($tag eq "description" && $geneflag==0) {
    $generef->{transcript}->[$transcript_count]->{transcript_description} = $value;
  }

  if ($element eq "type") {
    $current_type = $value;
  }

  if ($tag eq "name") {
    if ($geneflag == 1) {
      $gg = $value;
      if (! exists $globgenename->{$gg}) {
	$globgenename->{$gg}=[];
      }
      $generef->{gene_name} = $gg;	
    }
    elsif ($geneflag == 0 && $tran_name_flag == 0) {
      my $transcript_name;
      $tran_name_flag = 1;
      if ($value =~ /^var/i) {
	if ($value =~ /(\d+$)/ || $value =~ /(\d+)(.+$)/  ) {
	  if ($value !~ /^ENS/) {
	    $transcript_name=sprintf "%s-%03d", $generef->{gene_name}, $1;
	  }
	  else {
	    $transcript_name=$value;
	  }
	}
      }
      elsif ($value =~ /no_name/){
	my $variant_no=$transcript_count + 1;
	$transcript_name=sprintf "%s-%03d", $generef->{gene_name}, "$variant_no";
      }
      else {
	$transcript_name=$value;
      }
      if (!$transcript_name) {
	warn "not an expected transcript_name $value\n ";
      }
      if ($transcript_name eq $gg) {
	$transcript_name = $generef->{gene_name};
      }
      if (! exists $globtransname{$transcript_name} ){
	$globtransname{$transcript_name}=$generef->{gene_name};
      }
      else {
	warn "transcript_name $transcript_name which was in $globtransname{$transcript_name} is repeating now here for gene $generef->{gene_name}\n";
	my $newtranscript_name=$generef->{gene_name}.'-'.$transcript_name;
	warn "changing transcript_name to $newtranscript_name";
	$transcript_name=$newtranscript_name;
	$globtransname{$transcript_name}=$generef->{gene_name};
      }
      $generef->{transcript}->[$transcript_count]={transcript_name=>$transcript_name};
    }
  }

  if ($tag eq "start") {
    $start = $value;
  }

  if ($tag eq "end") {
    my $end = $value;
    if ($current_type eq "exon"){
      $exon_count++;
      my $exon = $generef->{transcript}->[$transcript_count]->{exon_set}->[$exon_count] = {};
      if ($start < $end) {
	$exon->{exon_start}   = $assembly_start + $start - 1;
	$exon->{exon_end}     = $assembly_start + $end   - 1;
	$exon->{exon_strand}  = 1;
	$strand=1;
      }
      else {
	$exon->{exon_start}   = $assembly_start + $end - 1;
	$exon->{exon_end}     = $assembly_start + $start - 1;
	$exon->{exon_strand}  = -1;
	$strand=-1;
      }
    }
    if ($current_type eq "start_codon") {
      $generef->{transcript}->[$transcript_count]->{translation_start}=$assembly_start + $start - 1;
    }
    if ($current_type eq "stop_codon") {
      $generef->{transcript}->[$transcript_count]->{translation_end}=$assembly_start + $end - 1;
    }
  }

  if ($tag eq "synonym" && $value ne "no_name") {
    if ($geneflag == 1) {
      push @{$generef->{gene_synonym}},$value;
    }
  }

  if ($tag eq "text") {
    if ($value =~ /(\s*)(LOCUS:)(\s+)(\S+)(\s*)/i) {
      $generef->{gene_type} = $4;
      my $gn=$generef->{gene_name};
      if (exists $globgenename->{$gn} ){
	push @{$globgenename->{$gn}},$4;
	my $ind=@{$globgenename->{$gn}};
	if ($4  =~ /Pseudogene/i){
	  if ($ind > 1) {
	    $generef->{gene_name}=$gn.'P'.$ind;
	  }
	  else {
	    $generef->{gene_name}=$gn.'P';
	  }
	  push @{$generef->{gene_synonym}},$gg;
	}
	else {
	  if ($ind > 1) {
	    $generef->{gene_name}=$gn.'-'.$ind;
	    push @{$generef->{gene_synonym}},$gg;
	  }
	  else {
	    $generef->{gene_name}=$gn;
	  }
	}
      }
      else {
	warn "gene name not formed in global hash";
      }
    }
    elsif ($value =~ /(cDNA)(.+)(\()(\S+)(\)$)/) {
      push @{$generef->{transcript}->[$transcript_count]->{transcript_cdna_evidence}}, $4;
    }
    elsif ($value =~ /(EST)(.+)(\()(\S+)(\)$)/) {
      push @{$generef->{transcript}->[$transcript_count]->{transcript_est_evidence}}, $4;
    }
    elsif ($value =~ /(protein)(.+)(\()(\S+)(\)$)/) {
      push @{$generef->{transcript}->[$transcript_count]->{transcript_protein_evidence}}, $4;
    }
    else {
      if ($geneflag == 0) {
	if (   ($value !~ /PRODUCT:/) && ($value !~ /Poly-Adenalation/) && ($value !~ /not\s+found/)) {
	  #if ($value =~ /&/) {
	   # $remark=pop @{$generef->{transcript}->[$transcript_count]->{transcript_remark}};
	    #$ampflag=1;
	  #}
	  #else {
	   # if ($ampflag == 1){
	    #  $value=$remark." and ".$value;
	      push @{$generef->{transcript}->[$transcript_count]->{transcript_remark}}, $value;
	     # undef $remark;
	      #$ampflag=0;
	    #}
	    #else {
	     # push @{$generef->{transcript}->[$transcript_count]->{transcript_remark}}, $value;
	      #$ampflag=0;
	    #}
	  #}
	}
	if (   $value =~ /Poly-Adenalation/ && $value !~ /not\s+found/) {
	  push @{$generef->{transcript}->[$transcript_count]->{feature_set}}, $value;
	}
      }
      else {
	push @{$generef->{gene_remark}}, $value;
      }
    }
  }


  if ($tag eq "annotation") {
    if ($transcript_count == -1) {
      warn "gene without transcripts\n";
      warn "skipping gene $generef->{gene_name}";
      $generef={};
      return;
    }
    if ($exon_count == -1) {
      warn "transcript without exons\n";
      warn "skipping gene $generef->{gene_name}";
      $generef={};
      return;
    }
    print "  <locus>\n";
    print "    <name>$prefix$generef->{gene_name}</name>\n";
    if (defined $generef->{gene_type}){
      print "    <type>$prefix$generef->{gene_type}</type>\n";
    }
    if (defined $generef->{gene_description}) {
    print "    <description>$generef->{gene_description}</description>\n";
    }
    if (defined @{$generef->{gene_synonym}}) {
    foreach my $gene_synonym (@{$generef->{gene_synonym}}){
    print "    <synonym>$gene_synonym</synonym>\n";
    }
    }
    if (defined @{$generef->{gene_remark}}) {
    foreach my $gene_remark (@{$generef->{gene_remark}}) {
    print "    <remark>$gene_remark";
    print "    </remark>\n";
    }
    }
    if (defined @{$generef->{transcript}}) {
    foreach my $thref (@{$generef->{transcript}}) {
    print "    <transcript>\n";
    print "      <name>$prefix$thref->{transcript_name}</name>\n";
    if (defined @{$thref->{transcript_remark}}) {
    foreach my $transcript_remark (@{$thref->{transcript_remark}}) {
    print "      <remark>$transcript_remark";
    print "      </remark>\n";
    }
    }
    if (defined	$thref->{translation_start}) {
    print "      <translation_start>$thref->{translation_start}</translation_start>\n";
    }
    if (defined	$thref->{translation_end}) {
    print "      <translation_end>$thref->{translation_end}</translation_end>\n";
    }
    if (defined	$thref->{transcript_class}) {
    print "      <transcript_class>$thref->{transcript_class}</transcript_class>\n";
    }
    my $evidence_set_flag=0;
    if (defined @{$thref->{transcript_cdna_evidence}} || defined @{$thref->{transcript_protein_evidence}} || defined @{$thref->{transcript_est_evidence}}){
    print "      <evidence_set>\n";
    $evidence_set_flag=1;
    }
    if (defined @{$thref->{transcript_cdna_evidence}}){
      foreach my $evidence (@{$thref->{transcript_cdna_evidence}}){
    print "        <evidence>\n";
    print "          <name>$evidence</name>\n";
    print "          <type>cDNA</type>\n";
    print "        </evidence>\n";
      }
    }
    if (defined @{$thref->{transcript_protein_evidence}}){
      foreach my $evidence (@{$thref->{transcript_protein_evidence}}){
    print "        <evidence>\n";
    print "          <name>$evidence</name>\n";
    print "          <type>Protein</type>\n";
    print "        </evidence>\n";
      }
    }
    if (defined @{$thref->{transcript_est_evidence}}){
      foreach my $evidence (@{$thref->{transcript_est_evidence}}){
    print "        <evidence>\n";
    print "          <name>$evidence</name>\n";
    print "          <type>EST</type>\n";
    print "        </evidence>\n";
      }
    }
    if ($evidence_set_flag == 1) {
    print "      </evidence_set>\n";
    }
    if (defined @{$thref->{exon_set}}){
    print "      <exon_set>\n";
    foreach my $exon (@{$thref->{exon_set}}){
    print "        <exon>\n";
    print "          <start>$exon->{exon_start}</start>\n";
    print "          <end>$exon->{exon_end}</end>\n";
    print "          <strand>$exon->{exon_strand}</strand>\n";
    print "        </exon>\n";
    }
    print "      </exon_set>\n";
    if (defined @{$thref->{feature_set}}) {
    foreach my $feature (@{$thref->{feature_set}}) {
      my $featuretype;
      my $featurestart;
      my $featureend;
      # Poly-Adenalation signal at basepair 100680520
      if ($feature =~ /Poly-Adenalation signal at basepair (\d+)/) {
        my $pos = $1;
        $featuretype  = "polyA_signal";
        if ($strand == 1) {
	  $featurestart = $pos;
          $featureend   = $pos + 5;
        } else {
	  $featurestart = $pos - 5;
          $featureend   = $pos;
        }
      }
      #Poly-Adenalation site at basepair 115079627
      elsif ($feature =~ /Poly-Adenalation site at basepair (\d+)/) {
        my $pos = $1 - 1;
        $featuretype  = "polyA_site";
        if ($strand == 1) {
	  $featurestart = $pos - 1;
          $featureend   = $pos;
        } else {
        $featurestart = $pos;
        $featureend   = $pos + 1;
        }
      }
      if (   defined($featuretype) && defined($featurestart) && defined($featureend)) {
    print "    <feature_set>\n";
    print "      <feature>\n";
    print "        <type>$featuretype</type>\n";
    print "        <start>$featurestart</start>\n";
    print "        <end>$featureend</end>\n";
    print "        <strand>$strand</strand>\n";
    print "        <score>0.5</score>\n";
    print "        <label>$featuretype</label>\n";
    print"      </feature>\n";
    print "    </feature_set>\n";
      }
      }
      }
    print "    </transcript>\n";
    }
  }
  }
    print "  </locus>\n";
  }
  if ($tag eq "feature_set"){
    my $transcript_class;
    if (defined	$generef->{transcript}->[$transcript_count]->{translation_start}) {
      if ( ! defined	$generef->{transcript}->[$transcript_count]->{translation_end}){
	if ($generef->{transcript}->[$transcript_count]->{exon_set}->[$exon_count]->{exon_strand} == 1) {
	  $generef->{transcript}->[$transcript_count]->{translation_end}=$generef->{transcript}->[$transcript_count]->{exon_set}->[$exon_count]->{exon_end};
	} else {
	  $generef->{transcript}->[$transcript_count]->{translation_end}=$generef->{transcript}->[$transcript_count]->{exon_set}->[$exon_count]->{exon_start};
	}
      }
      if (defined $generef->{gene_type} && $generef->{gene_type} =~ /Pseudogene/){
	$transcript_class='Pseudogene';
      }
      else {
	$transcript_class='Coding';
      }
    }
    else {
      #if ($generef->{transcript}->[$transcript_count]->{exon_set}->[$exon_count]->{exon_strand} == 1) {
	#$generef->{transcript}->[$transcript_count]->{translation_end}=$generef->{transcript}->[$transcript_count]->{exon_set}->[$exon_count]->{exon_end};
	#$generef->{transcript}->[$transcript_count]->{translation_start}=$generef->{transcript}->[$transcript_count]->{exon_set}->[0]->{exon_start};
      #} else {
	#$generef->{transcript}->[$transcript_count]->{translation_end}=$generef->{transcript}->[$transcript_count]->{exon_set}->[$exon_count]->{exon_start};
	#$generef->{transcript}->[$transcript_count]->{translation_start}=$generef->{transcript}->[$transcript_count]->{exon_set}->[0]->{exon_end};
      #}
      $transcript_class = 'Transcript';
    }
    if (defined $transcript_class){
      $generef->{transcript}->[$transcript_count]->{transcript_class}=$transcript_class;
    }
    else {
      die "transcript_class not set for $generef->{gene_name} \n";
    }
    if (!defined $generef->{transcript}->[$transcript_count]->{translation_start} ) {
      warn "There are transcripts with no translation\n";
    }
    ##check for translation_stop is not split between exons
    my @ea = @{$generef->{transcript}->[$transcript_count]->{exon_set}};
    my $tend = $generef->{transcript}->[$transcript_count]->{translation_end};
    my $stop_flag=0;
    my $s;
    if (defined $tend){
      foreach my $exon (@ea){
	if ($exon->{exon_start} < $exon->{exon_end}){
	  $s=1;
	}
	else {
	  $s = -1;
	}
	if ($s == 1) {
	  if ($tend >= $exon->{exon_start} && $tend <= $exon->{exon_end}){
	    $stop_flag=1;
	    #warn "setting stop flag $strand";
	  }
	}
	else {
	  if ( $tend >= $exon->{exon_end} && $tend <= $exon->{exon_start} ){
	    $stop_flag=1;
	    #warn "setting stop flag $strand";
	  }
	}
      }
      if ($stop_flag == 0) {
	warn $generef->{gene_name} . "has strand **$strand** has".$generef->{transcript}->[$transcript_count]->{transcript_name}."\n has split translation_stop at $tend";
	foreach my $exon (@ea){
	  warn $exon->{exon_start}."\n";
	  warn $exon->{exon_end}."\n";
	  warn $exon->{exon_strand}."\n";
	}
      }
    }
  }
}

sub final {
}

