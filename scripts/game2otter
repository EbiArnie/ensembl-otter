#!/usr/local/bin/perl -w

=pod

=head1 NAME - name

game2otter

=head1 DESCRIPTION

Converts game xml files to otter xml file

=head1 EXAMPLES

Example usage:

  game2otter 3_* > otter_chr3.xml

  Converts all chromosome 3 game xml files in the current directory to an otter_chr3.xml file. The input file names should be of the format 3_114848570_115188425.annos.xml

=head1 AUTHOR

B<Sindhu Pillai> Email sp1@sanger.ac.uk

=cut

use strict;
use XML::Parser;
use Hum::Sort 'ace_sort';
use Getopt::Long;

#parameters

my $help = sub{ exec('perldoc',$0)};

GetOptions(
	   'h|help'=> $help,
          ) or $help->();

unless (@ARGV) {
$help->();
}

#global variables for event handlers
my $assembly_start;
my $assembly_end;
my $chr_name;
my $strand;
my $exon_start;
my $infile;
my $value;
my $element;
my $current_type;
my $geneflag;
my $tran_name_flag;
my $generef={};
my $transcript_count=-1;
my $exon_count=-1;
my $remark;
my $ampflag=0;

my $parser = XML::Parser->new(
    Style    => 'Stream',
    Handlers => {
        Init  => \&init,
        Start => \&start,
        Char  => \&char,
        End   => \&end,
        Final => \&final
    }
);

@ARGV = sort {ace_sort($a, $b)} @ARGV;
print "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n";
print "<otter>\n<sequence_set>\n";

foreach $infile (@ARGV) {

    # Example file name: 3_114848570_115188425.annos.xml.mod.final
    my $this_chr;
    ($this_chr, $assembly_start, $assembly_end) = $infile =~ /(^\d+)_(\d+)_(\d+)(.+)/;
    if ($chr_name) {
        die "File '$infile' is chromosome '$this_chr' not chromosome '$chr_name'"
            unless $chr_name eq $this_chr;
    } else {
        $chr_name = $this_chr;
    }
    if ($assembly_start && $assembly_end) {
      if ($assembly_start > $assembly_end) {

	die "filename $infile has assembly start $assembly_start less than assembly end $assembly_end";
      }
    }
    else {
      die "filename $infile does not contain assembly start ,end values. assembly_start:$assembly_start assembly_end:$assembly_end\n";
    }
    if ( !($this_chr || $assembly_start || $assembly_end) ) {
      die "filename $infile not of required format example:3_114848570_115188425.annos.xml.mod.final";
    }
    eval {
      warn "Parsing $infile\n";
      $parser->parsefile($infile);
    };
    if ($@) {
      die "Parsing problem with file $infile\n $@ \n";
    }
}

print "</sequence_set>\n</otter>\n";

sub init {
  my $e = shift;
}

sub start {
  my ($e, $tag, %attr) = @_;
  if ($tag eq "annotation") {
    $geneflag = 1;
    $generef={};
    $transcript_count=-1;
  }
  elsif ($tag eq "feature_set") {
    $geneflag = 0;
    $tran_name_flag=0;
    if ($transcript_count == -1) {
      $generef->{transcript}=[];
    }
    $transcript_count++;
    $exon_count=-1;
  }
  $element = $tag;
}

sub char {
  my ($e, $string) = @_;
  $value = $string;
  $value =~ s/^\s*//;
  $value =~ s/\s*$//;
  if (length($value)) {
    if ($element eq "description" && $geneflag==1) {
      $generef->{gene_description}=$value;
    }
    elsif ($element eq "description" && $geneflag==0) {
      $generef->{transcript}->[$transcript_count]->{transcript_description}=$value;
    }
    elsif ($element eq "type") {
      $current_type = $value;
    }
    elsif ($element eq "name") {
      if ($geneflag == 1) {
	$generef->{gene_name} = $value;
      }
      elsif ($geneflag == 0 && $tran_name_flag == 0) {
	$tran_name_flag = 1;
	my $transcript_name;
	if ($value =~ /var\S*\s*(\d+)\S*\s*/i) {
	  if ($value !~ /^ENS/) {
	    $transcript_name=sprintf "%s-%03d", $generef->{gene_name}, $1;
	  }
	  else {
	    $transcript_name=$value;
	  }
	}
	elsif ($value =~ /no_name/){
	  $transcript_name=sprintf "%s-%03d", $generef->{gene_name}, "1";
	}
	else {
	  $transcript_name=$value;
	}
	if (!$transcript_name) {
	  warn "not an expected transcript_name $value\n ";
	}
	$generef->{transcript}->[$transcript_count]={transcript_name=>$transcript_name};

      }
    }
    elsif ($element eq "start") {
      undef $exon_start;
      $exon_start = $value;
    }
    elsif ($element eq "end") {
      if ($current_type eq "exon" ) {
	#      if ($current_type eq "exon" || $current_type eq "start_codon") {
	$exon_count++;
	my $exon = $generef->{transcript}->[$transcript_count]->{exon_set}->[$exon_count] = {};
	if ($exon_start < $value) {
	  $exon->{exon_start}   = $assembly_start + $exon_start - 1;
	  $exon->{exon_end}     = $assembly_start + $value   - 1;
	  $exon->{exon_strand}  = 1;
	  $strand=1;
	}
	else {
	  $exon->{exon_start}   = $assembly_start + $value - 1;
	  $exon->{exon_end}     = $assembly_start + $exon_start - 1;
	  $exon->{exon_strand}  = -1;
	  $strand=-1;
	}
      }
      if ($current_type eq "start_codon") {
	$generef->{transcript}->[$transcript_count]->{translation_start}=$assembly_start + $exon_start - 1;
      }
      if ($current_type eq "stop_codon") {
	$generef->{transcript}->[$transcript_count]->{translation_end}=$assembly_start + $value - 1;
      }
#      elsif ($current_type ne 'status') {
	#warn "Unknown type '$current_type'";
      #}
    }
    elsif ($element eq "synonym" && $value ne "no_name") {
      if ($geneflag == 1) {
	push @{$generef->{gene_synonym}},$value;
      }
    }
    elsif ($element eq "text") {
      if ($value =~ /(\s*)(LOCUS:)(\s+)(\S+)(\s*)/i) {
	$generef->{gene_type} = $4;
      }
      elsif ($value =~ /(cDNA)(.+)(\()(\S+)(\)$)/) {
	push @{$generef->{transcript}->[$transcript_count]->{transcript_cdna_evidence}}, $4;
      }
      elsif ($value =~ /(EST)(.+)(\()(\S+)(\)$)/) {
	push @{$generef->{transcript}->[$transcript_count]->{transcript_est_evidence}}, $4;
      }
      elsif ($value =~ /(protein)(.+)(\()(\S+)(\)$)/) {
	push @{$generef->{transcript}->[$transcript_count]->{transcript_protein_evidence}}, $4;
      }
      else {
	if ($geneflag == 0) {
	  if (   ($value !~ /PRODUCT:/) && ($value !~ /Poly-Adenalation/) && ($value !~ /not\s+found/)) {
	    if ($value =~ /&/) {
	      $remark=pop @{$generef->{transcript}->[$transcript_count]->{transcript_remark}};
	      $ampflag=1;
	    }
	    else {
	      if ($ampflag == 1){
		$value=$remark." and ".$value;
		push @{$generef->{transcript}->[$transcript_count]->{transcript_remark}}, $value;
		undef $remark;
		$ampflag=0;
	      }
	      else {
		push @{$generef->{transcript}->[$transcript_count]->{transcript_remark}}, $value;
		$ampflag=0;
	      }
	    }
	  }
	  if (   $value =~ /Poly-Adenalation/ && $value !~ /not\s+found/) {
	    push @{$generef->{transcript}->[$transcript_count]->{feature_set}}, $value;
	  }
	}
	else {
	  push @{$generef->{gene_remark}}, $value;
	}
      }
    }
  }
}

sub end {
  my ($e, $tag) = @_;
  if ($tag eq "annotation") {
    if ($transcript_count == -1) {
      warn "gene without transcripts\n";
    }
    if ($exon_count == -1) {
      warn "transcript without exons\n";
    }
    print "  <locus>\n";
    print "    <name>$generef->{gene_name}</name>\n";
    if (defined $generef->{gene_type}){
      print "    <type>$generef->{gene_type}</type>\n";
    }
    if (defined $generef->{gene_description}) {
    print "    <description>$generef->{gene_description}</description>\n";
    }
    if (defined @{$generef->{gene_synonym}}) {
    foreach my $gene_synonym (@{$generef->{gene_synonym}}){
    print "    <synonym>$gene_synonym</synonym>\n";
    }
    }
    if (defined @{$generef->{gene_remark}}) {
    foreach my $gene_remark (@{$generef->{gene_remark}}) {
    print "    <remark>$gene_remark";
    print "    </remark>\n";
    }
    }
    if (defined @{$generef->{transcript}}) {
    foreach my $thref (@{$generef->{transcript}}) {
    print "    <transcript>\n";
    print "      <name>$thref->{transcript_name}</name>\n";
    if (defined @{$thref->{transcript_remark}}) {
    foreach my $transcript_remark (@{$thref->{transcript_remark}}) {
    print "      <remark>$transcript_remark";
    print "      </remark>\n";
    }
    }
    if (defined	$thref->{translation_start}) {
    print "      <translation_start>$thref->{translation_start}</translation_start>\n";
    }
    if (defined	$thref->{translation_end}) {
    print "      <translation_end>$thref->{translation_end}</translation_end>\n";
    }
    my $evidence_set_flag=0;
    if (defined @{$thref->{transcript_cdna_evidence}} || defined @{$thref->{transcript_protein_evidence}} || defined @{$thref->{transcript_est_evidence}}){
    print "      <evidence_set>\n";
    $evidence_set_flag=1;
    }
    if (defined @{$thref->{transcript_cdna_evidence}}){
      foreach my $evidence (@{$thref->{transcript_cdna_evidence}}){
    print "        <evidence>\n";
    print "          <name>$evidence</name>\n";
    print "          <type>cDNA</type>\n";
    print "        </evidence>\n";
      }
    }
    if (defined @{$thref->{transcript_protein_evidence}}){
      foreach my $evidence (@{$thref->{transcript_protein_evidence}}){
    print "        <evidence>\n";
    print "          <name>$evidence</name>\n";
    print "          <type>Protein</type>\n";
    print "        </evidence>\n";
      }
    }
    if (defined @{$thref->{transcript_est_evidence}}){
      foreach my $evidence (@{$thref->{transcript_est_evidence}}){
    print "        <evidence>\n";
    print "          <name>$evidence</name>\n";
    print "          <type>EST</type>\n";
    print "        </evidence>\n";
      }
    }
    if ($evidence_set_flag == 1) {
    print "      </evidence_set>\n";
    }
    if (defined @{$thref->{exon_set}}){
    print "      <exon_set>\n";
    foreach my $exon (@{$thref->{exon_set}}){
    print "        <exon>\n";
    print "          <start>$exon->{exon_start}</start>\n";
    print "          <end>$exon->{exon_end}</end>\n";
    print "          <strand>$exon->{exon_strand}</strand>\n";
    print "        </exon>\n";
    }
    print "      </exon_set>\n";
    if (defined @{$thref->{feature_set}}) {
    foreach my $feature (@{$thref->{feature_set}}) {
      my $featuretype;
      my $featurestart;
      my $featureend;
      # Poly-Adenalation signal at basepair 100680520
      if ($feature =~ /Poly-Adenalation signal at basepair (\d+)/) {
        my $pos = $1;
        $featuretype  = "polyA_signal";
        if ($strand == 1) {
	  $featurestart = $pos;
          $featureend   = $pos + 5;
        } else {
	  $featurestart = $pos - 5;
          $featureend   = $pos;
        }
      }
      #Poly-Adenalation site at basepair 115079627
      elsif ($feature =~ /Poly-Adenalation site at basepair (\d+)/) {
        my $pos = $1 - 1;
        $featuretype  = "polyA_site";
        if ($strand == 1) {
	  $featurestart = $pos - 1;
          $featureend   = $pos;
        } else {
        $featurestart = $pos;
        $featureend   = $pos + 1;
        }
      }
      if (   defined($featuretype) && defined($featurestart) && defined($featureend)) {
    print "    <feature_set>\n";
    print "      <feature>\n";
    print "        <type>$featuretype</type>\n";
    print "        <start>$featurestart</start>\n";
    print "        <end>$featureend</end>\n";
    print "        <strand>$strand</strand>\n";
    print "        <score>0.5</score>\n";
    print "        <label>$featuretype</label>\n";
    print"      </feature>\n";
    print "    </feature_set>\n";
      }
      }
      }
    print "    </transcript>\n";
    }
  }
  }
    print "  </locus>\n";
  }

 # if ($tag eq "feature_set"){
  #  if (defined	$generef->{transcript}->[$transcript_count]->{translation_start}) {
   #   if ($generef->{transcript}->[$transcript_count]->{exon_set}->[$exon_count]->{exon_strand} == 1) {
	#$generef->{transcript}->[$transcript_count]->{translation_end}=$generef->{transcript}->[$transcript_count]->{exon_set}->[$exon_count]->{exon_end};
      #} else {
#	$generef->{transcript}->[$transcript_count]->{translation_end}=$generef->{transcript}->[$transcript_count]->{exon_set}->[$exon_count]->{exon_start};
   #  # }
   # }
  #}
}

sub final {
}

