#!/usr/local/bin/perl -w

use strict;
use Bio::Otter::Lace::Defaults;
use Bio::Otter::TranscriptRemark;

my $debug = 0;

my $remark_prefix = 'Annotation_remark- LoutreTransfer:';

my $otter_dba; # it's much cheaper to have these globally visible
my $gene_adaptor;
my $slice_adaptor;
$|=1;

my $gene_count=0;

my %assembly_nonmatch_version = (
    'zebrafish' => {
        'chr1_20061017' => 0,
        'chr1_20061107' => 1,
        'chr1_20070119' => 2,
        'chr1_20070214' => 3,
        'chr1_20070321' => 4,
        'chr1_20070328' => 5,
        'chr1_20070416' => 6,
        'chr1_20070503' => 7,

        'chr2_20061017' => 0,
        'chr2_20061107' => 1,
        'chr2_20070119' => 2,
        'chr2_20070214' => 3,
        'chr2_20070321' => 4,
        'chr2_20070328' => 5,
        'chr2_20070416' => 6,
        'chr2_20070503' => 7,

        'chr3_20061017' => 0,
        'chr3_20061107' => 1,
        'chr3_20070119' => 2,
        'chr3_20070214' => 3,
        'chr3_20070321' => 4,
        'chr3_20070328' => 5,
        'chr3_20070416' => 6,
        'chr3_20070503' => 7,

        'chr4_20061017' => 0,
        'chr4_20061107' => 1,
        'chr4_20070119' => 2,
        'chr4_20070214' => 3,
        'chr4_20070321' => 4,
        'chr4_20070328' => 5,
        'chr4_20070416' => 6,
        'chr4_20070503' => 7,

        'chr5_20061017' => 0,
        'chr5_20061107' => 1,
        'chr5_20070119' => 2,
        'chr5_20070214' => 3,
        'chr5_20070321' => 4,
        'chr5_20070328' => 5,
        'chr5_20070416' => 6,
        'chr5_20070503' => 7,

        'chr6_20061017' => 0,
        'chr6_20061107' => 1,
        'chr6_20070119' => 2,
        'chr6_20070214' => 3,
        'chr6_20070321' => 4,
        'chr6_20070328' => 5,
        'chr6_20070416' => 6,
        'chr6_20070503' => 7,

        'chr7_20061017' => 0,
        'chr7_20061107' => 1,
        'chr7_20070119' => 2,
        'chr7_20070214' => 3,
        'chr7_20070321' => 4,
        'chr7_20070328' => 5,
        'chr7_20070416' => 6,
        'chr7_20070503' => 7,

        'chr8_20061017' => 0,
        'chr8_20061107' => 1,
        'chr8_20070119' => 2,
        'chr8_20070214' => 3,
        'chr8_20070321' => 4,
        'chr8_20070328' => 5,
        'chr8_20070416' => 6,
        'chr8_20070503' => 7,

        'chr9_20061017' => 0,
        'chr9_20061107' => 1,
        'chr9_20070119' => 2,
        'chr9_20070214' => 3,
        'chr9_20070321' => 4,
        'chr9_20070328' => 5,
        'chr9_20070416' => 6,
        'chr9_20070503' => 7,

        'chr10_20061017' => 0,
        'chr10_20061107' => 1,
        'chr10_20070119' => 2,
        'chr10_20070214' => 3,
        'chr10_20070321' => 4,
        'chr10_20070328' => 5,
        'chr10_20070416' => 6,
        'chr10_20070503' => 7,

        'chr11_20061017' => 0,
        'chr11_20061107' => 1,
        'chr11_20070119' => 2,
        'chr11_20070214' => 3,
        'chr11_20070321' => 4,
        'chr11_20070328' => 5,
        'chr11_20070416' => 6,
        'chr11_20070503' => 7,

        'chr12_20061017' => 0,
        'chr12_20061107' => 1,
        'chr12_20070119' => 2,
        'chr12_20070214' => 3,
        'chr12_20070321' => 4,
        'chr12_20070328' => 5,
        'chr12_20070416' => 6,
        'chr12_20070503' => 7,

        'chr13_20061017' => 0,
        'chr13_20061107' => 1,
        'chr13_20070119' => 2,
        'chr13_20070214' => 3,
        'chr13_20070321' => 4,
        'chr13_20070328' => 5,
        'chr13_20070416' => 6,
        'chr13_20070503' => 7,

        'chr14_20061017' => 0,
        'chr14_20061107' => 1,
        'chr14_20070119' => 2,
        'chr14_20070214' => 3,
        'chr14_20070321' => 4,
        'chr14_20070328' => 5,
        'chr14_20070416' => 6,
        'chr14_20070503' => 7,

        'chr15_20061017' => 0,
        'chr15_20061107' => 1,
        'chr15_20070119' => 2,
        'chr15_20070214' => 3,
        'chr15_20070321' => 4,
        'chr15_20070328' => 5,
        'chr15_20070416' => 6,
        'chr15_20070503' => 7,

        'chr16_20061017' => 0,
        'chr16_20061107' => 1,
        'chr16_20070119' => 2,
        'chr16_20070214' => 3,
        'chr16_20070321' => 4,
        'chr16_20070328' => 5,
        'chr16_20070416' => 6,
        'chr16_20070503' => 7,

        'chr17_20061017' => 0,
        'chr17_20061107' => 1,
        'chr17_20070119' => 2,
        'chr17_20070214' => 3,
        'chr17_20070321' => 4,
        'chr17_20070328' => 5,
        'chr17_20070416' => 6,
        'chr17_20070503' => 7,

        'chr18_20061017' => 0,
        'chr18_20061107' => 1,
        'chr18_20070119' => 2,
        'chr18_20070214' => 3,
        'chr18_20070321' => 4,
        'chr18_20070328' => 5,
        'chr18_20070416' => 6,
        'chr18_20070503' => 7,

        'chr19_20061017' => 0,
        'chr19_20061107' => 1,
        'chr19_20070119' => 2,
        'chr19_20070214' => 3,
        'chr19_20070321' => 4,
        'chr19_20070328' => 5,
        'chr19_20070416' => 6,
        'chr19_20070503' => 7,

        'chr20_20061017' => 0,
        'chr20_20061107' => 1,
        'chr20_20070119' => 2,
        'chr20_20070214' => 3,
        'chr20_20070321' => 4,
        'chr20_20070328' => 5,
        'chr20_20070416' => 6,
        'chr20_20070503' => 7,

        'chr21_20061017' => 0,
        'chr21_20061107' => 1,
        'chr21_20070119' => 2,
        'chr21_20070214' => 3,
        'chr21_20070321' => 4,
        'chr21_20070328' => 5,
        'chr21_20070416' => 6,
        'chr21_20070503' => 7,

        'chr22_20061017' => 0,
        'chr22_20061107' => 1,
        'chr22_20070119' => 2,
        'chr22_20070214' => 3,
        'chr22_20070321' => 4,
        'chr22_20070328' => 5,
        'chr22_20070416' => 6,
        'chr22_20070503' => 7,

        'chr23_20061017' => 0,
        'chr23_20061107' => 1,
        'chr23_20070119' => 2,
        'chr23_20070214' => 3,
        'chr23_20070321' => 4,
        'chr23_20070328' => 5,
        'chr23_20070416' => 6,
        'chr23_20070503' => 7,

        'chr24_20061017' => 0,
        'chr24_20061107' => 1,
        'chr24_20070119' => 2,
        'chr24_20070214' => 3,
        'chr24_20070321' => 4,
        'chr24_20070328' => 5,
        'chr24_20070416' => 6,

        'chr25_20061017' => 0,
        'chr25_20061107' => 1,
        'chr25_20070119' => 2,
        'chr25_20070214' => 3,
        'chr25_20070321' => 4,
        'chr25_20070328' => 5,
        'chr25_20070416' => 6,
        'chr25_20070503' => 7,

        'chrAB_20060711' => 0,

        'chrH_20061017' => 0,
        'chrH_20061107' => 1,
        'chrH_20070119' => 2,
        'chrH_20070214' => 3,
        'chrH_20070321' => 4,
        'chrH_20070328' => 5,
        'chrH_20070416' => 6,

        'chrU_20061017' => 0,
        'chrU_20061107' => 1,
        'chrU_20070119' => 2,
        'chrU_20070214' => 3,
        'chrU_20070321' => 4,
        'chrU_20070328' => 5,
        'chrU_20070416' => 6,
        'chrU_20070503' => 7,

        'gw2_not_on_agp' => 0,
        'gw2_on_agp'     => 1,

        'nitr' => 0,

        'tilling_20060307' => 0,
    },
    'mouse' => {
        # force the NCBIM37 assemblies out of the comparison:
        'chr1-NCBIM37' => -1,
        'chr2-NCBIM37' => -1, 
        'chr3-NCBIM37' => -1, 
        'chr4-NCBIM37' => -1, 
        'chr5-NCBIM37' => -1, 
        'chr6-NCBIM37' => -1, 
        'chr7-NCBIM37' => -1, 
        'chr8-NCBIM37' => -1, 
        'chr9-NCBIM37' => -1, 
        'chr10-NCBIM37' => -1,
        'chr11-NCBIM37' => -1,
        'chr12-NCBIM37' => -1,
        'chr13-NCBIM37' => -1,
        'chr14-NCBIM37' => -1,
        'chr15-NCBIM37' => -1,
        'chr16-NCBIM37' => -1,
        'chr17-NCBIM37' => -1,
        'chr18-NCBIM37' => -1,
        'chr19-NCBIM37' => -1,
        'chrX-NCBIM37' => -1, 
        'chrY-NCBIM37' => -1, 

        'CR293526_B1' => 0,

        'AL928605.11' => 0,

        # chr3 alt
        'NOD_IDD3'    => 0,
        'NOD_IDD3-01' => 1,
        'NOD_IDD3-02' => 2,

        # chr11 alt
        'NOD_IDD4'      => 0,
        'NOD_IDD4-06'   => 0.6,
        'NOD_IDD4-07'   => 0.7,
        'NOD_IDD4-08'   => 0.8,
        'NOD_IDD4.1-02' => 1.02,
        'NOD_IDD4.1-09' => 1.09,
        'NOD_IDD4.1-10' => 1.10,
        'NOD_IDD4.2-01' => 2.01,

        # chr1 alt
        'NOD_IDD5.1'    => 0,
        'NOD_IDD5.1-03' => 1.3,
        'NOD_IDD5.1-05' => 1.5,
        'NOD_IDD5.3-03' => 3.3,
        'NOD_IDD5.4-03' => 4.3,

        # chr4 alt
        'NOD_IDD9.1-06' => 1.06,
        'NOD_IDD9.2-05' => 2.05,
        'NOD_IDD9.3-05' => 3.05,

        # chr3 alt
        'NOD_IDD10'      => 0,
        'NOD_IDD10-02'   => 1,
        'NOD_IDD10-03'   => 2,
        'NOD_IDD10-04'   => 3,

        # chr17 alt
        'NOD_IDD16-02'   => 0,
        'NOD_IDD16-03'   => 1,

        # chr3 alt
        'NOD_IDD18-01'   => 0,
        'NOD_IDD18.2-04' => 1,

        '129_IDD3'    => 0,
        '129_IDD3-02' => 1,

        '129_MUP-01' => 0,
        '129_MUP-02' => 1,
        '129_MUP-03' => 2,

        # chr6 alt        
        'CHO_IDD6.1_2-03' => 1.3,
        'CHO_IDD6.1_2-04' => 1.4,

        'chr17_mhc_129-01' => 0,

        'bM74C21-01' => 0,

        'bM421B5-01' => 0,

        'CHED1' => 0,


        'CHORI29_IDD5.1_test-01' => 0,
        'CHORI29_IDD5.1_test-02' => 1,


        'black6_IDD5.1'    => 0,
        'black6_IDD5.1-02' => 0.1,
        'black6_IDD5.3-01' => 0.2,
        'black6_IDD5.3-02' => 0.3,
        'black6_IDD5.3-03' => 0.4,
        'black6_IDD5.4-01' => 0.5,
        'black6_IDD5.4-02' => 0.6,
        'black6_IDD5.4-03' => 0.7,
        'chr1-01'          => 1,
        'chr1-02'          => 2,

        'chr2-01' => 1,
        'chr2-02' => 2,
        'chr2-03' => 3,

        'black6_IDD3'       => 0,
        'black6_IDD3-02'    => 0.1,
        'black6_IDD10'      => 0.2,
        'black6_IDD10-02'   => 0.3,
        'black6_IDD18'      => 0.4,
        'black6_IDD18-02'   => 0.5,
        'black6_IDD18.2-01' => 0.6,
        'black6_IDD18.2-02' => 0.7,
        'black6_IDD18.2-04' => 0.8,
        'chr3-01'           => 1,
        'chr3-02'           => 2,

        'mrc4'    => 0,
        'mrc4-2'  => 1,
        'mrc4-3'  => 2,
        'mrc4-4'  => 3,
        'mrc4-06' => 4,
        'mrc4-07' => 5,
        'mrc4-08' => 6,

        'lace_chr4_clones' => 0,
        'black6_IDD9.1-01' => 1.1,
        'black6_IDD9.1-06' => 1.6,
        'black6_IDD9.2-01' => 2.1,
        'black6_IDD9.2-05' => 2.5,
        'black6_IDD9.3-01' => 3.1,
        'black6_IDD9.3-05' => 3.5,
        'chr4-04'          => 4,
        'chr4-05'          => 5,
        'chr4-06'          => 6,
        'chr4-07'          => 7,
        'chr4-08'          => 8,
        'chr4-09'          => 9,
        'chr4-10'          => 10,
        'B6_MUP-01'        => 10.5, # this region has a better assembly!
        'chr4-11'          => 11,   # better than NCBIM37

        'chr5_steel-01' => 0.1,
        'chr5_steel-02' => 0.2,
        'chr5_steel-03' => 0.3,
        'chr5_steel-04' => 0.4,
        'chr5-01'       => 1,
        'chr5-02'       => 2,

        'chr6.deafness.AGP'  => 0,
        'chr6_steel-01'      => 0.1,
        'chr6_steel-02'      => 0.2,
        'chr6_steel-04'      => 0.3,
        'chr6_steel-05'      => 0.4,
        'black6_IDD6.1_2-01' => 0.5,
        'black6_IDD6.1_2-02' => 0.6,
        'black6_IDD6.1_2-03' => 0.7,
        'black6_IDD6.3-01'   => 0.8,
        'black6_IDD6.3-02'   => 0.9,
        'chr6-01'            => 1,
        'chr6-02'            => 2,

        'black6_Abpa-01' => 0.1,
        'black6_Abpa-02' => 0.2,
        'chr7-01'        => 1,
        'chr7-02'        => 2,

        'chr8-01' => 1,
        'chr8-02' => 2,

        'chr9-01' => 1,
        'chr9-02' => 2,
        'chr9-03' => 3,

        'chr10-01' => 1,
        'chr10-02' => 2,

        'lace_chr11_clones3' => 0,
        'lace_chr11_clones4' => 0.1,
        'black6_IDD4.1'      => 0.2,
        'black6_IDD4.2-01'   => 0.3,
        'black6_IDD4.2Q-01'  => 0.4,
        'black6_IDD4.2Q-02'  => 0.5,
        'CHO_IDD4.2Q-02'     => 2.2,
        'CHO_IDD4.2Q-03'     => 2.3,
        'chr11'              => 0.8,
        'chr11-04'           => 4,
        'chr11-05'           => 5,
        'chr11-06'           => 6,
        'chr11-07'           => 7,

        #       'chr11-NCBIM36'      => 8,

        'chr12-01' => 1,
        'chr12-02' => 2,
        'chr12-03' => 3,

        'del36H_set' => 0,
        'chr13-01'   => 1,
        'chr13-02'   => 2,

        'chr14-01' => 1,
        'chr14-02' => 2,

        'chr15-01' => 1,
        'chr15-02' => 2,
        'chr15-03' => 3,

        'chr16-01' => 1,
        'chr16-02' => 2,

        'clone_AF050157.1'  => 0,
        'mhc_4_clones-01'   => 0.1,
        'black6_IDD16.1-01' => 0.2,
        'black6_IDD16.1-02' => 0.3,
        'black6_IDD16.1-03' => 0.4,
        'CHO_IDD16.1-02'    => 1.2,
        'chr17-01'          => 1,
        'chr17-02'          => 2,
        'chr17-04'          => 4,
        'chr17-05'          => 5,
        'chr17-06'          => 6,

        'chr18-01' => 1,
        'chr18-02' => 2,

        'chr19-01' => 1,
        'chr19-02' => 2,

        'ChrX-01' => 1,
        'ChrX-02' => 2,
        'chrX-03' => 3,
        #       'chrX-NCBIM36' => 3.5,
        'chrX-04' => 4,

        'chrY-01' => 1,
        'chrY-02' => 2,
    },

    'human' => {
        'chr1-7A'    => 7.5,
        'Chr1_final' => 8,

        'chr2' => 1,

        'chr3-00' => 0.5,

        'chr3-01B' => 1.6,

        'chr4' => 1,

        'chr6-14A' => 14.5,

        'chr7'     => 1,
        'chr7-01A' => 1.5,

        'chr8_jena1' => 0,    # parallel branch?
        'chr8_jena2' => 0,    # parallel branch?

        'chr9p12'      => 6,
        'Chr9_09'      => 9,
        'chr9-14A'     => 14.5,
        'chr9-16-peri' => 0,      # parallel branch?
        'chr9-peri-17' => 0,      # parallel branch?
        'chr9_hetero'  => 0,      # ?

        'chr11-hsa11_20030701' => 0,    # ?
        'chr11-hsa11_20040402' => 0,    # ?

        'chr12-00'  => 0.5,
        'chr12-01A' => -1.3, # FAULTY: (chr_end-chr_start) != (contig_end-contig_start)
        'chr12-01B' => 1.6,

        'chr13-10A' => 10.5,

        'chr14' => 1,

        'chr16-00' => 0.5,

        'chr17_mm11' => 0,              # ?

        'chr18p-01' => 0,    # seems to be only one half of the whole assembly?
        'chr18q-01' => 0,    # seems to be the other half?

        'chr19' => 1,

        'chr20-ncbi33' => 0,      # ? not the freshest, definitely
        'chr20-10A'    => 10.5,

        'chr21-hsa21_20030701' => 0,    # no clues

        'chr22p-03' => 0,               # a half?
        'chr22'     => 1,

        'chrX-07A' => 7.5,

        'chr_Y_01' => 1,

        'MHC_APD-01' => 1,
        'MHC_APD-02' => 2,
        'MHC_COX'    => 1,
        'MHC_COX-02' => 2,
        'MHC_DBB-01' => 1,
        'MHC_DBB-02' => 2,
        'MHC_MANN-01'=> 1,
        'MHC_MANN-02'=> 2,
        'MHC_MCF-01' => 1,
        'MHC_MCF-02' => 2,
        'MHC_PGF'    => 1,
        'MHC_QBL'    => 1,
        'MHC_QBL-03' => 3,
        'MHC_SSTO'   => 1,
        'MHC_SSTO-02'=> 2,
        'MHC_SSTO-03'=> 3,
    },
    'pig' => {
        'chr17-SSC17_MAX1-05' => 5,
        'chr17-SSC17_MAX1-04' => 4,
        'chr17-SSC17_MAX1-03' => 3,
        'chr17-SSC17_MAX1-02' => 2,
        'chr17-01'            => 1,
        'chr17-SSC17_MAX1-01' => 0.8,
        'bE447P16-01'         => 0,
        'CR974431_CpG'        => 0,
        'phrap_test-01'       => 0,
        'chr4_HSD3B-01'       => 1,
        'SSC6_test1-01'       => 3,
        'Chr_6_NKG-02'        => 2,
        'Chr_6_NKG'           => 1,
        'mhc-08'              => 8,
        'mhc-07'              => 7,
        'mhc-06'              => 6,
        'mhc-05'              => 5,
        'mhc-04'              => 4,     # ? didn't find the agp
        'mhc-03'              => 3,
        'mhc-02'              => 2,
        'mhc-01'              => 1,
        'SSC7_test2-02'       => 0.8,
        'SSC7_test2-01'       => 0.7,
        'MHC_class-I'         => 0.6,
        'MHC_class-II'        => 0.3,
    },
    'dog' => {},
);

sub find_last_dbid {
    my $filename = shift @_;

    my $skip_to = 0;

    open(PREV, "<$filename");
    local $/="----------------------------------------\n";
    while (<PREV>) {
        my $gene_xml=$_;
        if ($gene_xml=~/^\S+\s+\S+\s+(\S+)\s+\S+\s+<locus>.*<\/locus>.*/ms){
            $skip_to = $1;
        }
    }
    close PREV;

    return $skip_to;
}


{ # lexical environment for &execute_ctgids_2_asm

    my %cached_sth_by_arity = ();

    sub execute_ctgids_2_asm {
        my ($otter_dba, $set_hash) = @_;
        my $arity    = scalar(keys %$set_hash);

        if(!exists $cached_sth_by_arity{$arity}) {

            my $sql = qq{
                SELECT asm.type, chr.name
                FROM assembly asm, chromosome chr
                WHERE asm.chromosome_id=chr.chromosome_id
                AND asm.contig_id IN (
            }. join(',', ('?')x$arity) .qq{)
                GROUP BY asm.type
                HAVING count(*)=$arity;
            };
            $cached_sth_by_arity{$arity} = $otter_dba->prepare($sql);
        }
        my $sth = $cached_sth_by_arity{$arity};

        $sth->execute(keys %$set_hash);
        return $sth;
    }
} # lexical environment for &execute_ctgids_2_asm

sub is_selenoprotein {
    my $transcript = shift @_;

    for my $line (map $_->remark, $transcript->transcript_info()->remark()) {
        if($line=~/selenocysteine/i) {
            return 1;
        }
    }
    return 0;
}

sub no_premature_stops {
    my $transcript = shift @_;

    return $transcript->translate()->seq()!~/\*/;
}

sub fix_phases {
    my ($transcript, $start_phase) = @_;

    my $translation = $transcript->translation();
            # the following two should have been set by 'transform' method:
    my $start_exon  = $translation->start_Exon;
    my $end_exon    = $translation->end_Exon;

    my $phase       = -1;
    my $end_phase   = -1;
    my $fixing_log  = '';

    foreach my $exon(@{ $transcript->get_all_Exons() }) {

        my $length = $exon->length();
        my $strand = $exon->strand();

        if(($exon == $start_exon) || ($phase!=-1)) { # inside coding:

            if($exon == $start_exon) {

                $phase = $start_phase;
                
                unless((1<=$translation->start) && ($translation->start<=$length)) {
                    return $fixing_log.' ERROR:[translation->start not within translation->start_Exon]';
                }
                $length -= $translation->start()-1;
            }
            $end_phase = ($length + $phase) % 3;
        }
        if(($exon == $end_exon) || ($phase==-1)) { # outside coding:
            $end_phase = -1;
        }

        my $start  = $exon->start();
        my $end    = $exon->end();
        my $esi    = $exon->stable_id();

        if($exon->phase != $phase) {
            $fixing_log .= "[$esi START_PHASE ".$exon->phase."->$phase] ";
            $exon->phase($phase);
        }
        if($exon->end_phase != $end_phase) {
            $fixing_log .= "[$esi END_PHASE ".$exon->end_phase."->$end_phase] ";
            $exon->end_phase($end_phase);
        }

        $phase = $end_phase;
    }

    if($start_phase) {
        unless($transcript->transcript_info->cds_start_not_found()) {
            $fixing_log .= "[cds_start_not_found was not set -> fixed] ";
            $transcript->transcript_info->cds_start_not_found(1);
        }
        unless($transcript->transcript_info->mRNA_start_not_found()) {
            $fixing_log .= "[mRNA_start_not_found was not set -> fixed] ";
            $transcript->transcript_info->mRNA_start_not_found(1);
        }
    }

    return $fixing_log;
}

sub translation_qc {
    my ($transcript) = @_;

    if(my $translation = $transcript->translation()) {

        my $trans_name = '     '.$transcript->stable_id.'.'.$transcript->version().': ';


        eval {
            $transcript->get_all_translateable_Exons();
        };
        my $translation_unrecoverable_reason = $@
        || ( ($transcript->coding_region_end()-$transcript->coding_region_start()<3)
           ? 'transcript shorter than codon'
           : '');
        if($translation_unrecoverable_reason) {
            my $translation_stable_id = $transcript->{'translation'}->stable_id();
            delete $transcript->{'translation'};
            delete $transcript->{'_translation_id'};
            $transcript->transcript_info->remark(Bio::Otter::TranscriptRemark->new(-remark=>"$remark_prefix translation '$translation_stable_id' unrecoverable ($translation_unrecoverable_reason)"));
            return $trans_name.' [Translation unrecoverable ($translation_unrecoverable_reason), deleted] ';
        }

        my $original_phase = $translation->start_Exon()->phase();
        if(is_selenoprotein($transcript) || no_premature_stops($transcript)) {
            my $curr_attempt = fix_phases($transcript, $original_phase);
            return $curr_attempt ? $trans_name.$curr_attempt : '';
        } else { # try other phases:
            foreach my $start_phase (grep { $_!=$original_phase } (0..2)) {
                my $curr_attempt = fix_phases($transcript, $start_phase);
                if(($curr_attempt!~/ERROR/) && no_premature_stops($transcript)) {
                    $transcript->transcript_info->remark(Bio::Otter::TranscriptRemark->new(-remark=>"$remark_prefix start phase $start_phase is translateable whereas $original_phase was not"));
                    return $trans_name."(translatable_phase=$start_phase) ".$curr_attempt;
                }
            }

                # just restore the original one:
            $translation->start_Exon()->phase($original_phase);
            $transcript->transcript_info->remark(Bio::Otter::TranscriptRemark->new(-remark=>"$remark_prefix could not find a translateable phase"));

            return $trans_name.' [Could not fix the phases] ';
        }
    }

    return '';
}

sub gene_transformed_successfully {
    my( $gene, $slice ) = @_;

    my $slice_length = $slice->length;
    foreach my $exon (@{$gene->get_all_Exons}) {
        if ($exon->contig != $slice or $exon->start < 1 or $exon->end > $slice_length) {
            my $esi = $exon->stable_id;
            print STDERR "[$esi out of boundaries] ";
            return 0;
        }
    }

    # Check for overlapping exons in each transcript
    foreach my $transcript (sort {$a->stable_id cmp $b->stable_id} @{$gene->get_all_Transcripts}) {
        my $original_exons = $transcript->get_all_Exons;
        my @exon_list = @$original_exons;
        if ($exon_list[0]->strand == -1) {
            # exons are in opposite order for reverse strand transcripts
            @exon_list = reverse @exon_list;
        }

        my $last = 0;
        foreach my $exon (@exon_list) {
            if ($exon->start <= $last) {
                print STDERR "[exons out of order] ";
                if($debug) {
                    print STDERR "\n";
                    for my $i (0..@exon_list-1) {
                        my $ex = $exon_list[$i];
                        print STDERR "exon_${i}: ".$ex->start()."..".$ex->end()." (".$ex->strand()
                                    .") dbID=".$ex->dbID().", slice=".$ex->contig()->name."\n";
                    }
                    print STDERR "\n";
                }
                return 0;
            }
            $last = $exon->end;

        }

            # fix the phases/end_phases:
        if(my $trl_log = translation_qc($transcript)) {
            print STDERR $trl_log;
            if($trl_log=~/ERROR/) {
                return 0;
            }
        }

    }
    return 1;
}

sub try_and_fix_exon_strands {
    my $gene = shift @_;

    foreach my $transcript (@{$gene->get_all_Transcripts}) {
        my $pos_count = 0;
        my $neg_count = 0;
        foreach my $exon (@{$transcript->get_all_Exons}) {
            my $strand = $exon->strand();
            if($strand == 1) {
                $pos_count++;
            } elsif($strand == -1) {
                $neg_count++;
            }
        }
        if($pos_count && $neg_count) { # "unwanted trans-splicing"
            my $forced_strand = ($pos_count >= $neg_count) ? 1 : -1;
            foreach my $exon (@{$transcript->get_all_Exons}) {
                $exon->strand($forced_strand);
            }
            $transcript->transcript_info->remark(Bio::Otter::TranscriptRemark->new(-remark=>"$remark_prefix forced equal strands by majority rule"));
            print STDERR " [forced all strands to $forced_strand by majority rule] ";

                # fix the phases/end_phases:
            if(my $trl_log = translation_qc($transcript)) {
                print STDERR $trl_log;
                if($trl_log=~/ERROR/) {
                    return 0;
                }
            }
        }
    }
    return 1;
}

{ # lexical environment for add_xml_gene

    my %slices_hash = (); # atype->Slice

    sub add_xml_gene {
        my ($gene, $ver_2_asm_chr) = @_;

        for my $version (sort {$b <=> $a} keys %$ver_2_asm_chr) {
            # print STDERR "VER=$version: ";
            for my $pair (@{$ver_2_asm_chr->{$version}}) {
                my ($atype, $chr_name) = @$pair;

                print STDERR "[trying $atype($chr_name)] ";

                $otter_dba->assembly_type($atype);

                my $slice = $slices_hash{$atype}
                  ||= $slice_adaptor->fetch_by_chr_name($chr_name);
                
                $gene->transform($slice);

                if (gene_transformed_successfully($gene, $slice) && try_and_fix_exon_strands($gene)) {

                    $gene_count++;
                    my $gene_id  = $gene->dbID();
                    my $modified = $gene->modified;
                    print ''.('-'x40)."\n";
                    print "$chr_name\t$atype\t$gene_id\t$modified\n";
                    print $gene->toXMLString . "\n";
                    print STDERR "--> $atype\n";
                    return;
                } else { # re-fetch it to avoid transforming between versions of assembly
                    $gene = $gene_adaptor->fetch_by_dbID($gene->dbID());
                }

            } # for $atype
        } # for $version

        my $latest_version = $gene_adaptor->fetch_by_stable_id($gene->stable_id)->version();

        if($latest_version == $gene->version()) {
            print STDERR "--- FAILED TO MAP (LATEST_VER: ".$gene->type().")\n";
        } else {
            print STDERR "--- FAILED TO MAP (OLDER_VER: ".$gene->type().")\n";
        }
    }

} # lexical environment for add_xml_gene

sub build_redundant_set {
  my $filename = shift @_;

  my $redundant_set = {};

  open (IN,"<$filename") || die ("Could not open redundant file '$filename' for reading:\n $!\n");
  while(<IN>){
	 if ($_ =~ /(\S+)/){
		$redundant_set->{$1}=1;
	 }
  }
  close IN;
  return $redundant_set;
}

sub get_valid_gene_ids {
  my $filename = shift @_;

  my $list_of_gene_ids = '0';

  open (IN,"<$filename") || die ("Could not open load file '$filename' for reading:\n $!\n");
  while(<IN>){
	 if ($_ =~ /(\S+)/){
		$list_of_gene_ids .= ",$1";
	 }
  }
  close IN;
  return $list_of_gene_ids;
}

sub main {

    my $dataset_name    = ''; # 'test_human';      # 'mouse', ...
    my $skip_to    = 0;
    my $reduncount = 0;
    my $loadcount  = 0;
	my ($redunfile,$loadfile,$prevdump);
    my $redundant_set = {};

        # only include the following (comma-separated list of) chromosome names
    my $onlychrs   = '';
    my $chr_ok;

    Bio::Otter::Lace::Defaults::do_getopt(
        'dataset=s'     => \$dataset_name,
        'skipto=s'      => \$skip_to,
        'prevdump=s'    => \$prevdump,
		'redunfile=s'   => \$redunfile,
		'loadfile=s'    => \$loadfile,
        'mydebug!'      => \$debug,
        'onlychrs=s'    => \$onlychrs,
    );

    if(! $dataset_name) {
        die "At least dataset needs to be specified";
    }

    if($prevdump) {
        $skip_to = find_last_dbid($prevdump);
    }

    if($onlychrs) {
        $chr_ok = { map {(uc($_) => 1)} split(',',$onlychrs) };
    }

    my $cl = Bio::Otter::Lace::Defaults::make_Client();
    my $ds = $cl->get_DataSet_by_name($dataset_name);

        # init the global things:
    $otter_dba     = $ds->get_cached_DBAdaptor; # now it is global
    $gene_adaptor  = $otter_dba->get_GeneAdaptor();
    $slice_adaptor = $otter_dba->get_SliceAdaptor();
	 
	 #if redundant file is present create a hash of redundant dbids
	 if ($redunfile) {
		$redundant_set = build_redundant_set($redunfile);
	 }
	 my $sth_gene_ids;
	 if ($loadfile) {
		my $list_of_gene_ids = get_valid_gene_ids($loadfile);
		$sth_gene_ids = $otter_dba->prepare(qq{
        SELECT gene_id, stable_id, version, UNIX_TIMESTAMP(modified)
        FROM gene_stable_id
        WHERE gene_id IN (}.$list_of_gene_ids.qq{)
        ORDER by gene_id ASC
    });
	 }
	 else {
		$sth_gene_ids = $otter_dba->prepare(qq{
        SELECT gene_id, stable_id, version, UNIX_TIMESTAMP(modified)
        FROM gene_stable_id
        WHERE gene_id > $skip_to
        ORDER by gene_id ASC
    });
	 }
	 
    $sth_gene_ids->execute();

    while( my ($gene_id, $stable_id, $version, $modified) = $sth_gene_ids->fetchrow()) {

		### Ignore gene_ids in Chao-Kung's list of redundant gene_dbids

        print STDERR "$gene_id\t$stable_id.$version\t$modified\t";

		if ($redunfile && exists $redundant_set->{$gene_id}){
		  $reduncount++;
		  print STDERR "--- REDUNDANT\n";
		  next;
		  
		}

		$loadcount++;
        my $gene = $gene_adaptor->fetch_by_dbID($gene_id);
        my $contig_id_set = {};
        for my $transcript (@{$gene->get_all_Transcripts()}) {
            for my $exon (@{$transcript->get_all_Exons()}) {
                my $rawcontig   = $exon->contig();
                my $contig_id   = $rawcontig->dbID();
                my $contig_name = $rawcontig->name();

                $contig_id_set->{$contig_id}++;
            }
        }

        my $sth_ctgids_2_asm = execute_ctgids_2_asm($otter_dba, $contig_id_set);

        my $ver_2_asm_chr = {}; # version->[list of [asm_type, chr_name] pairs]

        my $unwanted_chr = 0;

        while( my ($atype, $chr_name) = $sth_ctgids_2_asm->fetchrow()) {

            my $version = ($atype=~/^chr\w+-0*(\d+)$/)
                ? $1
                : exists($assembly_nonmatch_version{$dataset_name}{$atype})
                    ? $assembly_nonmatch_version{$dataset_name}{$atype}
                    : 0;
            if($version>=0) { # negative values mean we want to exclude this sequence set altogether
                if(!$onlychrs || $chr_ok->{uc($chr_name)}) {
                    push @{$ver_2_asm_chr->{$version}}, [$atype, $chr_name];
                } else {
                    $unwanted_chr = 1;
                }
            }

        } # ctgids_2_asm fetching loop

        if(%$ver_2_asm_chr) {
            add_xml_gene($gene, $ver_2_asm_chr);
        } elsif($unwanted_chr) {
            print STDERR "--- EXCLUDED CHR\n";
        } else {
            print STDERR "--- EXONS ON ORPHAN CONTIGS!\n";
        }
    } # gene_id fetching loop

    print STDERR "\nLOG of the dump\n";
    if($prevdump) {
        print STDERR "Using '$prevdump' as the base for incremental update\n";
    }
    if($skip_to) {
        print STDERR "Skipped to gene_id=$skip_to\n";
    }
    print STDERR "Neglected $reduncount redundant gene db ids\n";
    print STDERR "Got $loadcount gene db ids to dump\n";
    print STDERR "Dumped $gene_count gene db ids to output file\n";

    undef $otter_dba; # to avoid the 'Memory leak' message

} # main()

main();

1;

