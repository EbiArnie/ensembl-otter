#!/usr/bin/env perl

use warnings;



use strict;
use Carp;
use cDNA_DB;
use cDNA_DB::Utils qw(initialise_db_connection show_perldoc
    find_db_conf_file cache_Libraries_for_species
    verify_known_taxon_id verify_Library_by_id);
use Getopt::Long;
use Hum::EMBL (
   'AC *' => 'Hum::EMBL::Line::AC_star',
    );
use Hum::EmblUtils qw{ add_Organism };
use Hum::EMBL::Utils qw( EMBLdate );
use Hum::Species qw (binomial);
use Bio::Otter::EMBL::Factory;
use Hum::ProjectDump::EMBL::Finished;
use Bio::Otter::Lace::Defaults;

my(
   $dataset_name,
   @sequence_sets,
   $errFile,		# Attatch STDERR to this file
   $dumpDir,        # Directory to dump files into
   $verbose						
  );


# dataset is xenopus_cdna_new (xenopus_jamboree)
# or         xenopus_cdna     (snr_xtrop_cdna_pipe_050601)


my $usage = sub { exec('perldoc', $0) };
Bio::Otter::Lace::Defaults::do_getopt(
									  'h'          => $usage,
									  'dataset=s'  => \$dataset_name,
									  'chr|set=s@' => \@sequence_sets,
									  "errfile=s"  => \$errFile,
									  "dump=s"     => \$dumpDir,	
									  "verbose"    => \$verbose								
									 ) or $usage->();

$usage->() unless $dataset_name;

# Connect to Ensembl/Otter database and fetch adaptors
my $cl = Bio::Otter::Lace::Defaults::make_Client();

my $acc_annot = {};
my $counter;
my $count_annot;
my $clone_info;

my $ds = $cl->get_DataSet_by_name($dataset_name); #Bio::Otter::Lace::DataSet

if ($dumpDir) {
  # Remove trailing slash if present
  $dumpDir =~ s/\s+$//;
  die "No such directory '$dumpDir'\n" unless -d $dumpDir;
}
if ($errFile) {
  open STDERR, "> $errFile"
	or die "Can't write to '$errFile': $!";
}

foreach my $ss (@{$ds->get_all_visible_SequenceSets}) {
  push(@sequence_sets, $ss->name);
}


foreach my $sset_name ( @sequence_sets ) {
  next if $sset_name eq "EMBL_NEW";

  #next if $sset_name !~ /FAMILIES_6/;  # for testing
  print STDERR "Working on $sset_name\n";
  $clone_info = get_annotated_clones($ds, $sset_name);
}

print STDERR "Fetched ", scalar keys %$clone_info, " clones from jamboree db\n";


my $taxon_id = 8364;


# version: tropicalis_cdna_2005_11_21
# to work with db xenopus_jamboree - new db
my $db_conf = "/nfs/team71/analysis/ck1/SCRIPT_CVS/cdna_db/conf/ck1_cDNA_test.conf";

# version: tropicalis_cdna_2005_04_08
# to work with db snr_xtrop_cdna_pipe_050601 - old db
#my $db_conf = "/nfs/team71/analysis/ck1/SCRIPT_CVS/cdna_db/conf/tropicalis_cdna_2005_04_08.conf";

$db_conf = find_db_conf_file($db_conf);

my ($Conf_Db, $dba) = initialise_db_connection($db_conf, 1);
$dba->hide_warnings;

my $date = date();
my $species_name = ucfirst(verify_known_taxon_id($taxon_id))
  or confess "Invalid taxon_id " . $taxon_id;
cache_Libraries_for_species($dba, $taxon_id);

output_EMBL_for_Clones($dba, $species_name, $taxon_id, $date, 'accepted', $clone_info);

print STDERR "Found $counter annotated clones, $count_annot to submit to EMBL.\n";


END {
  $dba->DESTROY if $dba;
}


sub get_annotated_clones {

  my( $ds, $sset_name ) = @_;

  my $ss = $ds->get_SequenceSet_by_name($sset_name);
  $ds->fetch_all_CloneSequences_for_SequenceSet($ss);
  $ds->get_cached_DBAdaptor->assembly_type($sset_name);

  foreach my $cs (@{$ss->CloneSequence_list}) {

	# some clones do not have EMBL acc and so the sv is set to 0 in otter
	next if $cs->sv == 0;

	my $accession = $cs->accession;

	# submit only Sanger clones
	next if $accession !~ /^C(R|T)/;

	my $version   = $cs->sv;

	$clone_info->{$accession}->{SV} = $version;
	$clone_info->{$accession}->{DS} = $ds;
	$clone_info->{$accession}->{SS} = $sset_name;

	#warn "$sset_name: ", $accession, " ", $cs->sv, "\n";

	#warn $counter++;
	
	# for debugging / testing
	if ( $verbose ) {

	  my $ft_factory = Bio::Otter::EMBL::Factory->new;

	  $ft_factory->DataSet($ds);
	  $ft_factory->accession($accession);
	  $ft_factory->sequence_version($version);

	  #$ft_factory->get_description_from_otter;
	  #$ft_factory->get_keywords_from_otter;

	  # this is to capture, eg, strand of polyA site = 0 (CR760322.1)
	  my $embl;
	  eval {
		$embl = Hum::EMBL->new;
		$ft_factory->make_embl_ft($embl);
	  };

	  unless ( $@ ){
		if ( $embl->compose ){
		  warn $accession, ":\n";
		  warn $embl->compose;
		}
		else {
		  warn "$accession : no annotation";
		}
	  }
      else {
        warn "compose failed";
      }
	}
  }

  return $clone_info;
}


sub output_EMBL_for_Clones {
  my ( $dba, $species_name, $taxon_id, $date, $submission_status, $clone_info ) = @_;

  my $Clone_aptr = $dba->get_CloneAdaptor() or confess "Could not get CloneAdaptor";

  my $clone_ids = $Clone_aptr->get_ids_by_submission_status_taxon_id($submission_status, $taxon_id);

  unless ($clone_ids) {
	die "No Clones with '$submission_status' status\n";
  }

  warn "fetch from cDNA db done";

  foreach my $clone_id (@$clone_ids) {

	my $Clone = $Clone_aptr->fetch_by_id($clone_id)
	  or confess "Failed to get Clone by fetch_by_id: $clone_id";
	my $Library = verify_Library_by_id($Clone->library_id);

	my $accession = $Clone->accession;
	my $sv        = $Clone->sequence_version;

	# make sure we are dealing with same sv of acc
	if ( exists $clone_info->{$accession} and $sv == $clone_info->{$accession}->{SV}) {
	  $count_annot++;
	  warn "FOUND $accession";

	  print_embl_entry($Library, $Clone, $date, $species_name, $clone_info);
	}
  }
}


# this dump is taken from xenopus_cdna database
# dumping annotation from otter is embedded in the subroutine

sub print_embl_entry {
  my( $Library, $Clone, $date, $species_name, $clone_info) = @_;


  my ($primary_acc, @secondary_accs, @authors, $clone_name);

  my $sanger_id = $Clone->sanger_id
	or confess "Invalid sanger_id for Clone id: ", $Clone->id;

  my $lib_authors = $Library->authors;
  $lib_authors =~ s/;$//;
  @authors = ($lib_authors);

  my ($source_material
	  , $lib_name
	  , $host
	  , $constructor
	  , $collection_name
	  , $strain) =

        ($Library->tissue
		 , $Library->name
		 , $Library->host
		 , $Library->constructed_by
		 , $Library->collection_name
		 , $Library->strain);

  my $project_name = $Library->project_name;
  unless ($project_name =~ /\.$/) {
	$project_name .= '.';
  }

  $collection_name =~ s/\.$//;
  my $spec = Hum::Species->fetch_Species_by_name($species_name);
  my $binomial = $spec->binomial;

  #Select most appropriate clone name
  unless ($clone_name = $Clone->ext_clone_name) {
	$clone_name = $Clone->name;
  }

  my $embl_id   = 'ENTRYNAME';
  my $accession = '';
  my $sv = '';

  #Always use 'internal' clone name for sanger_id
  if ($Clone->accession) {
	$embl_id = $accession = $Clone->accession;
	$sv      = $Clone->sequence_version;
  }

  my $seq_string = lc $Clone->dna;
  my $seq_length = length($Clone->dna);

  my $embl = Hum::EMBL->new;
  my $id = $embl->newID;
  $id->entryname($embl_id);
  $id->dataclass('standard');
  $id->molecule('RNA');
  $id->division($Library->embl_division);
  $id->seqlength($seq_length);

  $embl->newXX;

  my $ac = $embl->newAC;
  $ac->primary($accession);
  if (@secondary_accs) {
	$ac->secondaries(@secondary_accs);
  }

  $embl->newXX;

  my $ac_star = $embl->newAC_star;
  $ac_star->identifier($sanger_id);

  $embl->newXX;

  # preparing for dumping annotation from otter
  my $ds        = $clone_info->{$accession}->{DS};
  my $sset_name = $clone_info->{$accession}->{SS};

  my $ss = $ds->get_SequenceSet_by_name($sset_name);
  $ds->fetch_all_CloneSequences_for_SequenceSet($ss);
  $ds->get_cached_DBAdaptor->assembly_type($sset_name);

  my $ft_factory = Bio::Otter::EMBL::Factory->new;
  $ft_factory->DataSet($ds);
  $ft_factory->accession($accession);
  $ft_factory->sequence_version($sv);

#  warn "FTFAC: $ft_factory ";
#  foreach ( keys %$ft_factory){
#	warn "$_ => ", $ft_factory->{$_};
#  }
#  warn "*****";

  my $description = $binomial;
  if ($Clone->confirmed_full_length eq 'yes') {
	$description .= ' full-length';
  }
  if ($Clone->contains_N eq 'no') {
	$description .= ' finished';
  }
  $description .= " cDNA, clone $clone_name";

  $embl->newDE->list($description);

  # add more description from otter
  if ( $ft_factory->get_description_from_otter ) {
	$embl->newDE->list($ft_factory->get_description_from_otter);
  }

  $embl->newXX;

  if ($Library->key_words) {
	my @key_words = split(/\s+/, $Library->key_words);
	$embl->newKW->list(@key_words);
  }

  # add more Keywords from otter
  if ( $ft_factory->get_keywords_from_otter ) {
	$embl->newKW->list($ft_factory->get_keywords_from_otter);
  }

  $embl->newXX;

  add_Organism($embl, $species_name);

  $embl->newXX;

  my @loc = ("Submitted ($date) to the EMBL/Genbank/DDBJ databases.",
			 'Sanger Institute, Hinxton, Cambridgeshire, CB10 1SA, UK.');
  if ($Library->email) {
	push(@loc, "E-mail enquiries: " . $Library->email);
  }

  my $rl = $embl->newReference;
  $rl->number(1);
  $rl->authors(@authors);
  $rl->positions("1-$seq_length");
  $rl->locations(@loc);

  $embl->newXX;

  $embl->newCC->list(
					 $project_name
					);

  $embl->newXX;
  my $prep_text = "This sequence is from a $collection_name, from a library constructed by $constructor. ";
  $prep_text .= "cDNA was prepared from RNA extracted from $source_material";

  if (($Library->normalised eq 'yes') and ($Library->polyA_trimmed eq 'yes')) {
	$prep_text .= ', normalised and poly A-trimmed. ';
  } elsif ($Library->normalised eq 'yes') {
	$prep_text .= ', and normalised. ';
  } elsif ($Library->polyA_trimmed eq 'yes') {
	$prep_text .= ' and poly A-trimmed. ';
  } else {
	$prep_text .= '. ';
  }

  my @fields = split(/\s/, $Library->vector);
  my ($vector, $site1, $site2) = ($fields[0], $fields[2], $fields[4]);
  unless ($vector =~ s/;$//) {
	confess "Error parsing vector";
  }
  unless ($site1 =~ s/;$//) {
	confess "Error parsing vector";
  }
  $prep_text .= $site1 . '-' . $site2 . " cut cDNA was then ligated into $vector with ";
  $prep_text .= $site1 . " at the 5' end and $site2 at the 3' end.";

  $embl->newCC->list(
					 $prep_text
					 , 'Vector: ' . $Library->vector
					 , 'Host: ' . $Library->host
					);

  $embl->newXX;
  $embl->newFH;

  my $source = $embl->newFT;
  $source->key('source');

  my $loc = $source->newLocation;
  $loc->exons([1, $seq_length]);
  $loc->strand('W');
  $source->addQualifierStrings('mol_type',        $Library->embl_mol_type);
  $source->addQualifierStrings('organism',        $binomial) if $binomial;
  $source->addQualifierStrings('strain',          $strain) if $strain;
  if ($Library->dev_stage) {
	$source->addQualifierStrings('dev_stage',   $Library->dev_stage);
  }
  $source->addQualifierStrings('clone_lib',       $lib_name);
  $source->addQualifierStrings('clone',           $clone_name);
  print $embl->compose;	

  # Add feature lines here from otter annotation, eg polyA stuff
  # and also exclude strand of polyA site = 0 (CR760322.1)
  eval {
	$embl = Hum::EMBL->new;
	$ft_factory->make_embl_ft($embl);
  };

  unless ( $@ ){
	print $embl->compose;
  }
  else {
	warn "$@, $ft_factory; $accession: NO FT";
	foreach ( keys %{$ft_factory->{_bio_otter_embl_factory_annotated_clone}} ){
	  warn "$_ -> ", $ft_factory->{_bio_otter_embl_factory_annotated_clone}->{$_};
	}
	foreach ( keys %{$embl}){
	  warn "EMBL : $_ -> ", $embl->{$_};
	}
  }

  print "XX\n";

  # now print the sequence

  $embl = Hum::EMBL->new;
  $embl->newSequence->seq($seq_string);
  $embl->newEnd;
  print $embl->compose;
}

{
  my $date;
  sub date {
	$date = EMBLdate() unless $date;
	return $date;
  }
}


__END__

=head1 AUTHOR

James Gilbert B<email> jgrg@sanger.ac.uk
Mike Croning B<email> mdr@sanger.ac.uk
Chao-Kung Chen B<email> ck1@sanger.ac.uk
