#!/usr/bin/env perl

use warnings;


### erase_genes_by_name

use strict;
use Bio::Otter::Lace::Defaults;
use Bio::Otter::DBUtils 'delete_genes_by_exon_id_list';

{
    my $dataset_name = undef;
    my $usage = sub { exec 'perldoc', $0 };
    
    Bio::Otter::Lace::Defaults::do_getopt(
          'dataset=s'   => \$dataset_name,
          ) or die "Error processing command line";
    $usage->() unless $dataset_name and @ARGV;
    my $cl = Bio::Otter::Lace::Defaults::make_Client();
    my $ds = $cl->get_DataSet_by_name($dataset_name);
    # Make a connection to the otter database
    my $otter_db = $ds->get_cached_DBAdaptor->db_handle;
    
    
    $otter_db->begin_work;
    eval{ delete_genes_by_name($otter_db, @ARGV) };
    if ($@) {
        warn "Error doing delete: $@";
        $otter_db->rollback;
    } else {
        $otter_db->commit;
    }
}

sub delete_genes_by_name {
    my( $dbh, @gene_names ) = @_;
    
    my $name_str = join(',', map { "'$_'" } @gene_names);
    
    my $sql = qq{
        SELECT e.exon_id
        FROM gene g
          , gene_stable_id gsid
          , gene_info i
          , gene_name n
          , transcript t
          , exon_transcript et
          , exon e
        WHERE g.gene_id = gsid.gene_id
          AND gsid.stable_id = i.gene_stable_id
          AND i.gene_info_id = n.gene_info_id
          AND g.gene_id = t.gene_id
          AND t.transcript_id = et.transcript_id
          AND et.exon_id = e.exon_id
          AND n.name in ($name_str)
        GROUP BY e.exon_id
        };
    my $sth = $dbh->prepare($sql);
    $sth->execute;    

    my( $exon_id );
    $sth->bind_columns(\$exon_id);
    
    my $exon_list = [];
    while ($sth->fetch) {
        push(@$exon_list, $exon_id);
    }
    print "Deleting ",scalar(@$exon_list)," distinct exon ids\n"; 
    
    delete_genes_by_exon_id_list($dbh, $exon_list);
}




__END__

=head1 NAME - erase_genes_by_name

    erase_genes_by_name -dataset <NAME> <GENE_NAME_LIST>

=head1 AUTHOR

James Gilbert B<email> jgrg@sanger.ac.uk

