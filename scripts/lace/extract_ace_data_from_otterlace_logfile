#!/usr/bin/env perl

### extract_ace_data_from_otterlace_logfile

use strict;
use warnings;
use Date::Parse 'str2time';

my $multi_file = (@ARGV > 1);
my %found; # key = position, value = recovered
my $pos = '';

while (<>) {
    if (/^(.*? \d{4})  (.*)Sending:$/) {
	my $t = str2time($1)
	  or die "Cannot make utime from $1 at $ARGV:$.";
	my $junk = $2;
	$pos = sprintf('%12d (%s) %s:%d', $t, $1, $ARGV, $.);
	$found{$pos} = "// Junk precedes 'Sending:': $junk\n" if $junk ne '';
        while (<>) {
	    if (/Active Objects/) {
		$found{$pos} .= "// $_";
		last;
	    }
	    die "$ARGV:$.: Irregularity in log format: $_"
	      unless substr($_, 0, 26) =~
		m{^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) \w{3} [ 0-9]{2} [ 0-9:]{8} \d{4}  $};
            $found{$pos} .= substr($_, 26);
	    warn "Truncated(?) ace data: EOF during $pos" if eof;
        }
    } elsif (/Sending:/) {
	warn "Ignore spurious 'Sending:' at $ARGV:$.";
    } # else: ignore other log stuff

    # NB.  eof() is different to eof
    $pos = 'eof after $ARGV' if eof;
    close ARGV if eof;     # ensure $ARGV is meaningful
}

foreach my $pos (sort keys %found) {
    my $detail = $found{$pos};
    if ($multi_file) {
	my ($seq) = ($detail =~ m{^SubSequence "([^"]*)"}m);
	my ($locus) = ($detail =~ m{^Locus "(.*)"}m);
	# There may be three m{^Locus( | : |    : )"?(\S*?)"?$} lines; they seem to be all the same?
	my $len = length($detail);
	my $sexons = () = $detail =~ m{^Source_Exons }mg;

	printf("%s:\tSubSeq %s\tLocus %s\tbytes=%d\t#Source_Exons=%d\n", $pos, $seq, $locus, $len, $sexons);
    } else {
	print "// ------ $pos\n";
	print $detail;
    }
}

__END__

=head1 NAME - extract_ace_data_from_otterlace_logfile

=head1 CAVEATS

Logfiles may contain interleaved writes, because multiple processes
are sending to each file.  Once you have found the chunk of data you
want, examine the context before using it!

=head1 AUTHOR

James Gilbert B<email> jgrg@sanger.ac.uk

