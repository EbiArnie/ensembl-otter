#!/usr/bin/env perl

### extract_ace_data_from_otterlace_logfile

use strict;
use warnings;
use Date::Parse 'str2time';

# Do we have a pre-selected set of rescues to make?  e.g.
#   extract_ace_data_from_otterlace_logfile -v otterlace.*.log --filter `cut -c1-13 /tmp/summary-wanted.txt`
my $filter_re;
if (my ($i) = grep { $ARGV[$_] eq '--filter' } (0 .. $#ARGV)) {
    my @want = splice @ARGV, $i;
    shift @want; # the '--filter'
    foreach (@want) { s/^\s+|\s+$//g } # trim whitespace
    local $" = "|";
    $filter_re = qr{\b(@want)\b};
    warn "filter_re=$filter_re";
}

# Do we want a summary or the details?
my $multi_file = (@ARGV > 1) && !defined $filter_re;
if (@ARGV && $ARGV[0] =~ /^-(s|v)$/) {
    my $opt = shift @ARGV;
    $multi_file = ($opt eq '-s');
}

# Place to stash finds until we sort and report
my %found; # key = position, value = recovered
my $pos = '';

while (<>) {
    if (/^(.*? \d{4})  (.*)Sending:$/) {
	my $t = str2time($1)
	  or die "Cannot make utime from $1 at $ARGV:$.";
	my $junk = $2;
	$pos = sprintf('%12d (%s) %s:%d', $t, $1, $ARGV, $.);
	$found{$pos} = "// Junk precedes 'Sending:': $junk\n" if $junk ne '';
        while (<>) {
	    if (/Active Objects/) {
		$found{$pos} .= "// $_";
		last;
	    }
	    die "$ARGV:$.: Irregularity in log format: $_"
	      unless substr($_, 0, 26) =~
		m{^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) \w{3} [ 0-9]{2} [ 0-9:]{8} \d{4}  $};
            $found{$pos} .= substr($_, 26);
	    warn "Truncated(?) ace data: EOF during $pos" if eof;
        }
    } elsif (/Sending:/) {
	warn "Ignore spurious 'Sending:' at $ARGV:$.";
    } # else: ignore other log stuff

    # NB.  eof() is different to eof
    $pos = 'eof after $ARGV' if eof;
    close ARGV if eof;     # ensure $ARGV is meaningful
}

foreach my $pos (sort keys %found) {
    my $detail = $found{$pos};
    my $filtered_out = (defined $filter_re && $pos !~ $filter_re);

    if ($multi_file || $filtered_out) {
	my ($seq) = ($detail =~ m{^SubSequence "([^"]*)"}m);
	my ($locus) = ($detail =~ m{^Locus "(.*)"}m);
	# There may be three m{^Locus( | : |    : )"?(\S*?)"?$} lines; they seem to be all the same?
	my $len = length($detail);
	my $sexons = () = $detail =~ m{^Source_Exons }mg;

	print "// rejected: " if $filtered_out;
	printf("%s:\tSubSeq %s\tLocus %s\tbytes=%d\t#Source_Exons=%d\n", $pos, $seq, $locus, $len, $sexons);
    } else {
	print "// ------ $pos\n";
	print $detail;
    }
}

__END__

=head1 NAME - extract_ace_data_from_otterlace_logfile

=head1 SYNOPSIS

 cd ~/.otter

 # simple one-save recovery
 extract_ace_data_from_otterlace_logfile otterlace.123-a.log > /tmp/rescued.txt

 # see what's there
 extract_ace_data_from_otterlace_logfile otterlace.*.log
 extract_ace_data_from_otterlace_logfile -s otterlace.123-a.log

 # take only a subset
 extract_ace_data_from_otterlace_logfile otterlace.*.log --filter `cut -c1-13 /tmp/selection.txt`

 # take everything
 extract_ace_data_from_otterlace_logfile -v otterlace.*.log

=head1 RECIPE

 extract_ace_data_from_otterlace_logfile ~/.otter/otterlace.mumble.log > /tmp/rescued.txt

Edit /tmp/rescued.txt because it may well contain multiple saves or
regions.

Exit Otterlace, else sgifaceserver will have the write lock.

 $OTTER_HOME/bin/tace /var/tmp/mumble
  parse /tmp/rescued.txt
  // it understands ~ as a reference to $HOME
  save
  quit

Restart Otterlace and the objects should be present.

You may input several C<Sending:>s-worth of data B<provided> they are
in the same order.  Operations in one set of extracted data may be
repeated in another.

If open and lock the wrong region, and load extracted data into that,
it should have no effect on what is saved back to the Otter data
server because the region name is different.

=head1 CAVEATS

Logfiles may contain interleaved writes, because multiple processes
are sending to each file.  Once you have found the chunk of data you
want, examine the context before using it!

The summary in particular may be tightly tied to the current favourite
Otterlace, and not work correctly on log output from others.

=head1 AUTHOR

James Gilbert B<email> jgrg@sanger.ac.uk

