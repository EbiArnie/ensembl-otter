#!/usr/bin/env perl

use warnings;


### fetch_xml

use strict;
use Bio::Otter::Lace::Defaults;

{
    my( $dsname, $ssname );
    my $usage = sub{ exec('perldoc', $0) };
    my $start = undef;
    my $end   = undef;
    my $stable_id = undef;
    Bio::Otter::Lace::Defaults::do_getopt(
        'dataset=s'     => \$dsname,
        'set|seqset=s'  => \$ssname,
        'start=i'       => \$start,
        'end=i'         => \$end,
        'h|help!'       => $usage,
        'stable=s'       => \$stable_id,
        ) or $usage->();
    $usage->() unless $dsname and $ssname;
    
    my $cl = Bio::Otter::Lace::Defaults::make_Client();
    $cl->debug(0);  # Don't put debug xml in /var/tmp/
    my $ds = $cl->get_DataSet_by_name($dsname);

    my( $cs_list );
    if ($stable_id) {
        my $rs = Bio::Otter::Lace::ResultSet->new ;
        $rs->DataSet($ds) ;
        $rs->search_type('stable_id');
        $rs->context_size(0);
        $rs->execute_search([$stable_id]);
        my $ss = $rs->get_SequenceSet_by_name($ssname)
            or die "Nothing found for stable ID '$stable_id' in '$ssname'\n";
        $cs_list = $ss->CloneSequence_list;
    } else {
        my $ss = $ds->get_SequenceSet_by_name($ssname); 
        $ds->selected_SequenceSet($ss); # pure setter
        $ds->fetch_all_CloneSequences_for_selected_SequenceSet; # does not do anything
        $cs_list = $ss->CloneSequence_list; # pure getter
    }

    my ($chr_name, $chr_start, $chr_end) = $cl->chr_start_end_from_contig($cs_list);
    $start ||= $chr_start;
    $end   ||= $chr_end;
    print $cl->get_xml_region_from_dsname_ssname_chr_start_end(
        $dsname, $ssname, $chr_name, $start, $end,
    );
}

__END__

=head1 NAME - fetch_xml

=head1 SYNOPSIS

  fetch_xml -dataset <DATASET_NAME> -set <SEQUENCE_SET_NAME> \
    [-start <INT> -end <INT> | -stable <STABLE_ID>]

=head1 AUTHOR

James Gilbert B<email> jgrg@sanger.ac.uk

