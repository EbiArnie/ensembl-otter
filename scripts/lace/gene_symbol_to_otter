#!/usr/bin/env perl

use warnings;


### gene_symbol_to_otter

use strict;
use Getopt::Long 'GetOptions';
use Bio::Otter::Lace::Defaults;


my ($dataset, $verbose, $help, $file, $outfile);

Bio::Otter::Lace::Defaults::do_getopt('ds|dataset=s' => \$dataset,
				      'v|verbose'    => \$verbose,
				      'f|file=s'     => \$file);   # plus default options

exec('perldoc', $0) if !($dataset && $file);

my $client        = Bio::Otter::Lace::Defaults::make_Client();     # Bio::Otter::Lace::Client
my $dset_human    = $client->get_DataSet_by_name($dataset);        # Bio::Otter::Lace::DataSet # use this to run common queries

my $otter_db      = $dset_human->get_cached_DBAdaptor;
my $sidadp        = $otter_db->get_StableIdAdaptor;
my $geneAd        = $otter_db->get_GeneAdaptor;

my $transAd       = $otter_db->get_TranscriptAdaptor;              # Bio::Otter::DBSQL::AnnotatedTranscriptAdaptor obj

my $geneNameAd    = $otter_db->get_GeneNameAdaptor;
my $geneSynonymAd = $otter_db->get_GeneSynonymAdaptor;
my $geneRemarkAd  = $otter_db->get_GeneRemarkAdaptor;

my $gname         = new Bio::Otter::GeneName;

$outfile = $file.".diff";
open (F, ">$outfile") || die $!;

open FILE, $file || die $!;

my $start = 0;

eval {

  $otter_db->begin_work;	# get along with AutoCommit turning on, so that rollback is possible later

  while (<FILE>) {
    chomp;

    if ( /^Symbol/ ) {
      $start = 1; next;
    }
    elsif ( $start == 1 ) {

      my ($sym, $desc, $HGNC, $type, $ott_stable_id) = split /\t/, $_;
      foreach ($sym, $desc, $HGNC, $type, $ott_stable_id) {
	s/(^\s+)|(\s+$)//g;	# Trim trailing or leading whitespace
      }

      my $trans = $transAd->fetch_by_stable_id($ott_stable_id); # Bio::EnsEMBL::DBSQL::TranscriptAdaptor obj, inherits Bio::EnsEMBL::Gene;
      my $id_version = $trans->version; warn $id_version if !$id_version;
      my $gene = $geneAd->fetch_by_transcript_id($trans->dbID); # Bio::Otter::AnnotatedGene, which inherits Bio::Otter::GeneInfo obj

      my $ott_type       = $gene->type;
      my $gene_dbID      = $gene->dbID;
      my $ott_desc       = $gene->description;
      $ott_desc          = "NA" if !$ott_desc;

      my $gene_stable_id = $gene->stable_id;
      my $gene_info      = $gene->gene_info;
      my $gene_info_id   = $gene_info->dbID;

      my $ott_sym        = $gene_info->name->name;

      my ($changed, $sth);

      if ($ott_sym ne $sym || $ott_desc ne $desc || $ott_type ne $type ) {
	
	$changed .= "\nHUGO update: $sym\t$desc\t$HGNC\t$type\t$ott_stable_id\n";
	
	if ( $ott_sym ne $sym ) {
	  $changed .= "=Old symbol was \"$ott_sym\" (gene_info_id: $gene_info_id)\n" if $ott_sym ne $sym;
	
	  if ( $verbose ){
	    warn "\nFound <GENE_NAME> update for $ott_stable_id\n($sym, $gene_stable_id, gene_id: $gene_dbID, gene_info_id: $gene_info_id)\n";
	  }

	  # ----- updating gene_name table with new gene name -----
	
	  my $old_geneName = $geneNameAd->fetch_by_name($ott_sym);
	  foreach (@$old_geneName) {
	    $gname->dbID($_->dbID);
	    $gname->name($_->name($sym)); # replaced old name with new one
	    $gname->gene_info_id($_->gene_info_id);

	    # not using $geneNameAd->store() here as this method does only INSERT and no UPDATE
	    $sth = $otter_db->prepare('update gene_name set name = ? where name = ? and gene_info_id = ?');
	    $sth->execute($gname->name, $ott_sym, $gname->dbID);
	    $sth->finish();
	  }

	  # put old name into gene_synonym table

	  my $gsynonym = new Bio::Otter::GeneSynonym;
	  $gsynonym->name($ott_sym);
	  $gsynonym->gene_info_id($gene_info->dbID);

	  $geneSynonymAd->store($gsynonym);
	}
      }

      # ----- update gene_description table with new description of a gene -----

      if ( $ott_desc ne $desc ) {

	$changed .= "=Old description was \"$ott_desc\" (gene_id: $gene_dbID)\n";
	if ( $verbose ){
	  warn "\nFound <DESCRIPTION> update for $ott_stable_id\n($sym, $gene_stable_id, gene_id: $gene_dbID, gene_info_id: $gene_info_id)\n";
	}

	
	$gene->description($desc); # replace old desc with new one

	$sth = $otter_db->prepare('replace into gene_description (gene_id, description) values (?,?)');
	$sth->execute($gene_dbID, $desc);
	$sth->finish();
      }

      # ----- update gene table with new type of a gene -----

      if ( $ott_type ne $type ) {
	$changed .= "=Previous annotated type was \"$ott_type\" (gene_id: $gene_dbID)\n";
	if ( $verbose ){
	  warn "\nFound <TYPE> update for $ott_stable_id\n($sym, $gene_stable_id, gene_id: $gene_dbID, gene_info_id: $gene_info_id)\n";
	}


	$gene->type($type);	# replace old type with new one

	$sth = $otter_db->prepare('update gene set type = ? where gene_id = ?');
	$sth->execute($type, $gene_dbID);
	$sth->finish();
      }

      print F $changed if $changed;
      $changed =();
    }
  }
};

if ( !$@ ){
  print "\nGene symbol update OK\n";
  $otter_db->commit;
}


__END__


=head1 NAME - gene_symbol_to_otter

=head1 SYNOPSIS

gene_symbol_to_otter [-ds <DATASET_NAME>]  [-file <HUGO_REPORT_FILE>]
eg, gene_symbolto_otter -ds human -file Chromosome_6_HGNC_gene_symbol_report

If verbose mode is turned on (-v), HUGO update info will be shown: useful for debugging.

=head1 DESCRIPTION

Takes a gene symbol report file from HUGO, and
updates rows of the following tables:

(1) if new gene name is available:
Replace the old one in the gene_name table and added old name to gene_synonym table.

(2) if new description of gene is available:
Replace the old one in the gene_description table and keep the old one in an external file.
This is a temporary solution and the strategy will be changed in the future.

(3) if the type of a gene is changed
Replace the old one in the gene table and keep the old one in an external file.
This is a temporary solution and the strategy will be changed in the future.

(4) See $outfile in script for the name of the archival external files.

=head1 PROBLEMS WITH HUGO GENE NAME

(1) A symbol is linked to multiple sequence names (eg, ds546.1, ds547.1)
(2) A symbol is linked to multiple transcipt id (eg, OTTHUMT00000058673, OTTHUMT00000058655)


=head1 AUTHOR

Chao-Kung Chen B<email> ck1@sanger.ac.uk

