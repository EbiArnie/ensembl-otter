#!/usr/local/bin/perl -w

# ck1@sanger.ac.uk

use strict;
use Bio::Otter::Lace::Defaults;

my ($dataset_name);

Bio::Otter::Lace::Defaults::do_getopt(
                                      'ds|dataset=s' => \$dataset_name,
                                     );

my $client   = Bio::Otter::Lace::Defaults::make_Client();
my $dset     = $client->get_DataSet_by_name($dataset_name);
my $ssets    = $dset->get_all_visible_SequenceSets;
my $otter_db = $dset->get_cached_DBAdaptor;
my $sliceAd  = $otter_db->get_SliceAdaptor;
my $geneAd   = $otter_db->get_GeneAdaptor;

foreach my $atype ( @$ssets ){
#  next  if $atype->name !~ /^chr1-11/;

  my $gids = get_gene_dbid_list_of_atype($atype->name);
  foreach my $gid ( @$gids ){
    get_redundant_db_ids($gid);
  }
}

my @gsid_to_check = qw(
OTTHUMG00000001088
OTTHUMG00000001089
OTTHUMG00000001253
OTTHUMG00000001404
OTTHUMG00000009508
OTTHUMG00000009569
OTTHUMG00000013369
OTTHUMG00000013370
OTTHUMG00000013418
OTTHUMG00000014674
OTTHUMG00000014675
OTTHUMG00000014677
OTTHUMG00000014679
OTTHUMG00000014680
OTTHUMG00000014681
OTTHUMG00000014683
OTTHUMG00000014684
OTTHUMG00000014685
OTTHUMG00000014686
OTTHUMG00000014688
OTTHUMG00000014693
OTTHUMG00000014696
OTTHUMG00000015608
OTTHUMG00000015609
OTTHUMG00000016408
OTTHUMG00000018466
OTTHUMG00000018469
OTTHUMG00000018471
OTTHUMG00000018481
OTTHUMG00000018482
OTTHUMG00000018490
OTTHUMG00000019280
OTTHUMG00000020495
OTTHUMG00000020496
OTTHUMG00000020511
OTTHUMG00000020513
OTTHUMG00000021703
OTTHUMG00000022652
OTTHUMG00000022654
OTTHUMG00000022655
OTTHUMG00000022658
OTTHUMG00000022659
OTTHUMG00000022660
OTTHUMG00000022665
OTTHUMG00000022666
OTTHUMG00000022667
OTTHUMG00000022668
OTTHUMG00000022707
OTTHUMG00000022712
OTTHUMG00000022713
OTTHUMG00000022880
OTTHUMG00000023076
OTTHUMG00000023092
OTTHUMG00000023185
OTTHUMG00000023299
OTTHUMG00000023413
OTTHUMG00000023414
OTTHUMG00000023428
OTTHUMG00000023518
OTTHUMG00000023888
OTTHUMG00000024224
OTTHUMG00000024230
OTTHUMG00000024231
OTTHUMG00000024234
OTTHUMG00000024242
OTTHUMG00000024244
OTTHUMG00000024245
OTTHUMG00000029854
OTTHUMG00000029858
OTTHUMG00000029873
OTTHUMG00000029875
OTTHUMG00000029879
OTTHUMG00000029883
OTTHUMG00000029886
OTTHUMG00000029892
OTTHUMG00000029895
OTTHUMG00000029903
OTTHUMG00000030603
OTTHUMG00000030789
OTTHUMG00000030838
OTTHUMG00000032128
OTTHUMG00000032136
OTTHUMG00000032137
OTTHUMG00000032139
OTTHUMG00000032144
OTTHUMG00000032145
OTTHUMG00000032229
OTTHUMG00000032328
OTTHUMG00000032332
OTTHUMG00000032335
OTTHUMG00000032341
OTTHUMG00000033188
OTTHUMG00000033189
OTTHUMG00000033190
OTTHUMG00000033290
OTTHUMG00000033291
OTTHUMG00000033292
OTTHUMG00000033293
OTTHUMG00000034295
OTTHUMG00000037480
OTTHUMG00000037545
OTTHUMG00000037652
OTTHUMG00000039913
OTTHUMG00000040719
OTTHUMG00000043274
OTTHUMG00000046611
OTTHUMG00000055985
OTTHUMG00000056812
OTTHUMG00000057424
OTTHUMG00000057425
OTTHUMG00000064097
OTTHUMG00000064565
OTTHUMG00000066048
OTTHUMG00000066049
OTTHUMG00000066051
OTTHUMG00000066052
OTTHUMG00000066442
OTTHUMG00000067927
OTTHUMG00000074531
OTTHUMG00000084874
OTTHUMG00000086910
OTTHUMG00000087477
OTTHUMG00000087478
OTTHUMG00000090235
OTTHUMG00000090236
OTTHUMG00000090237
OTTHUMG00000090263
OTTHUMG00000099799
OTTHUMG00000099801
OTTHUMG00000099803
OTTHUMG00000099923
OTTHUMG00000099924
OTTHUMG00000099925
OTTHUMG00000099926
OTTHUMG00000099927
OTTHUMG00000102743
OTTHUMG00000102745
OTTHUMG00000102747
OTTHUMG00000102895
OTTHUMG00000104080
OTTHUMG00000104081
OTTHUMG00000104082
OTTHUMG00000108145
OTTHUMG00000108148
OTTHUMG00000112455
OTTHUMG00000115115
OTTHUMG00000115116
OTTHUMG00000115117
OTTHUMG00000115128
OTTHUMG00000115129
OTTHUMG00000116738
OTTHUMG00000116739
OTTHUMG00000116740
OTTHUMG00000116773
OTTHUMG00000116943
OTTHUMG00000116944
OTTHUMG00000116945
OTTHUMG00000117775
OTTHUMG00000118974
OTTHUMG00000118975
OTTHUMG00000118976
OTTHUMG00000119369
OTTHUMG00000120569
OTTHUMG00000121127
OTTHUMG00000121129
OTTHUMG00000124057
OTTHUMG00000124060
OTTHUMG00000124061
OTTHUMG00000124787
OTTHUMG00000126681
OTTHUMG00000126682
OTTHUMG00000129174
OTTHUMG00000130547
OTTHUMG00000130549
OTTHUMG00000132390
OTTHUMG00000132725
OTTHUMG00000133619
OTTHUMG00000133690
OTTHUMG00000133701
OTTHUMG00000134594
OTTHUMG00000134599
OTTHUMG00000136348
OTTHUMG00000136349
OTTHUMG00000136352
OTTHUMG00000136353
OTTHUMG00000137505
OTTHUMG00000138315
OTTHUMG00000138423
OTTHUMG00000138424
OTTHUMG00000138553
OTTHUMG00000138590
OTTHUMG00000138713
OTTHUMG00000138714
OTTHUMG00000138715
OTTHUMG00000139672
OTTHUMG00000139712
OTTHUMG00000139713
OTTHUMG00000139845
OTTHUMG00000139897
OTTHUMG00000140061
OTTHUMG00000141375
OTTHUMG00000141376
OTTHUMG00000141395
OTTHUMG00000141396
OTTHUMG00000141632
OTTHUMG00000141633
OTTHUMG00000141634
OTTHUMG00000141725
OTTHUMG00000142467
OTTHUMG00000142749
OTTHUMG00000149977
OTTHUMG00000150103
OTTHUMG00000150119
OTTHUMG00000150121
OTTHUMG00000150125
OTTHUMG00000150139
OTTHUMG00000150140
OTTHUMG00000150141
OTTHUMG00000150142
OTTHUMG00000150143
OTTHUMG00000150144
OTTHUMG00000150145
OTTHUMG00000150146
OTTHUMG00000150147
OTTHUMG00000150148
OTTHUMG00000150149
OTTHUMG00000150150
OTTHUMG00000150151
OTTHUMG00000150152
OTTHUMG00000150153
OTTHUMG00000150154
OTTHUMG00000150155
OTTHUMG00000150156
OTTHUMG00000150157
OTTHUMG00000150158
OTTHUMG00000150159
OTTHUMG00000150160
OTTHUMG00000150161
OTTHUMG00000150162
OTTHUMG00000150163
OTTHUMG00000150164
OTTHUMG00000150165
OTTHUMG00000150166
OTTHUMG00000150167
OTTHUMG00000150168
OTTHUMG00000150169
OTTHUMG00000150170
OTTHUMG00000150171
OTTHUMG00000150172
OTTHUMG00000150173
OTTHUMG00000150174
);



#---------------------
#     subroutines
#---------------------

sub get_gene_dbid_list_of_atype {

  my $atype = shift;
  print STDOUT "Working on $atype\n";

  $otter_db->assembly_type($atype); # replace the default sequence set setting

  my $seqSet = $dset->get_SequenceSet_by_name($atype);
  $dset->fetch_all_CloneSequences_for_SequenceSet($seqSet);
	
  my $chrom = $seqSet->CloneSequence_list()->[0]->chromosome;
  my $slice = $sliceAd->fetch_by_chr_name($chrom);
  my $latest_gene_ids = $geneAd->list_current_dbIDs_for_Slice($slice);

  return $latest_gene_ids;
}

sub get_redundant_db_ids {

  my $gid = shift;
  my $gene = $geneAd->fetch_by_dbID($gid);
  my $gsid = $gene->stable_id;

next unless grep { $gsid eq $_ } @gsid_to_check;

  my $latest_ver = $gene->version;
  my ($ver_dbid, $ver_xml);

  foreach my $ver ( 1..$latest_ver ){
    my $curr_g;
    # some gsid do not have version 1 in db
    # and the versioning may not be contiguous
    eval {
      $curr_g = $geneAd->fetch_by_stable_id_version($gsid, $ver);
    };

    if ( $curr_g ){
      $ver_dbid->{$ver} = $curr_g->dbID;
      $ver_xml->{$ver} = join "\n", grep ! /<(stable_id|author|author_email|translation_stable_id)>/,  split "\n", $curr_g->toXMLString;
    }
  }

  # version comparison via xml string
  my @unwanted_dbIDs;

  # make sure the version order is ascending
  # and that versioning may not be contiguous
  my @vers = sort { $a<=>$b } keys %$ver_xml;

  for ( my $i=0; $i < scalar @vers-1; $i++ ){
    if ( $ver_xml->{$vers[$i]} eq $ver_xml->{$vers[$i+1]} ){
	  push(@unwanted_dbIDs, $ver_dbid->{$vers[$i]});
    }
  }

  print "$gsid ($latest_ver) @unwanted_dbIDs\n" if @unwanted_dbIDs;
}

__END__


