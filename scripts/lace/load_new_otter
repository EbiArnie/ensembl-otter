#!/usr/bin/env perl

use warnings;


=head1 DESCRIPTION

load_new_otter -dataset dsname <filenames>*

=head1 OPTIONS

-dataset dsname

<filenames>* are input files to be parsed in mixed format (text_header+otter_xml)
             Input is taken from STDIN if there are no filenames.

=cut

    # run it as a new schema script:
BEGIN {
    foreach my $path (@INC) {
        unless( $path=~s{ensembl/modules}{ensembl_head/modules}g ) {
            $path=~s{ensembl_head/modules}{ensembl/modules}g;
        };
    }
}

use strict;
use Bio::Otter::Lace::Defaults;
use Bio::Vega::Transform::Otter;
use Bio::Vega::DBSQL::DBAdaptor;
use Bio::EnsEMBL::Utils::Exception qw ( throw warning );

$|=1;

my $dsname    = '';
my $last_dbid = '';

Bio::Otter::Lace::Defaults::do_getopt(
    'dataset=s' => \$dsname,
    'continue!' => \$last_dbid,
);

my $cl = Bio::Otter::Lace::Defaults::make_Client();
my $ds = $cl->get_DataSet_by_name($dsname);
my $loutre_dba = $ds->get_cached_DBAdaptor;
my $mc  = $loutre_dba->get_MetaContainer();
my $sa  = $loutre_dba->get_SliceAdaptor();
my $ga  = $loutre_dba->get_GeneAdaptor();

my %ss_hash = ();
my $loading_started=time();

# $mc->update_key_value('prefix.primary','LDR');

if($last_dbid) {
    ($last_dbid) = @{ $mc->list_value_by_key('last_gene_old_dbid') };
}

$/="----------------------------------------\n";
LOCUS: while (<>){  ## read from STDIN + @ARGV filenames
  my $dbid;
  my $gene_xml=$_;
  eval{
	 if ($gene_xml=~/^\S+\s+(\S+)\s+(\S+)\s+(\S+)\s+(<locus>.*<\/locus>).*/ms){
		
        ($dbid, $gene_xml) = ($2, $4);

        if($last_dbid && ($dbid<=$last_dbid)) {
            print STDERR "Skipping gene_id=$dbid as it has been loaded before $last_dbid\n";
            next LOCUS;
        }

        $loutre_dba->begin_work;

        my ($ss, $modified)   = ($1, $3);

		my $slice = $ss_hash{$ss} ||= $sa->fetch_by_region('chromosome',$ss,undef,undef,undef,'Otter') ;

		unless ($slice) {
		  throw "slice for $ss is not in db";
		}

		my $parser = Bio::Vega::Transform::Otter->new;
		$parser->set_ChromosomeSlice($slice);
		$parser->parse($gene_xml,'latin1');
		my $genes=$parser->get_Genes;
		my $gene_count=@$genes;
		if ($gene_count!=1) {
            throw "parser has returned $gene_count genes (instead of 1) for geneid : $dbid";
		}

		my $gene=$genes->[0];
        my $current = ($gene->biotype !~ /obsolete/) ? 1 : 0;
		$gene->is_current( $current );

		my $any_change = $ga->store($gene, $modified);

        if(!$any_change) {
            print STDOUT "The gene ".$gene->stable_id." was not modified, so no new version was stored\n";
        } elsif($current) {
            print STDOUT "stored old gene dbid:$dbid as new gene dbid:".$gene->dbID
                        ." and the curent version is:".$gene->stable_id.".".$gene->version. "\n";
        } else {
            print STDOUT "The gene ".$gene->dbID." was deleted from the database\n";
        }

		$mc->update_key_value('last_gene_old_dbid',$dbid);

		$loutre_dba->commit;
		$parser->DESTROY;
	 }
  };
  if ($@) {
	 $loutre_dba->rollback;
	 print STDERR ("\ngene $dbid did not get loaded due to \n", $@);
     if($@!~/more than one transcript has the name/) { # temporarily skip those errors to count how many such cases there are
         die "Dying in stript";
     }
  }
}

# $mc->update_key_value('prefix.primary','OTT');

my $loading_finished=time();
my $total_time=$loading_finished-$loading_started;
print STDERR "Total time for storing the above genes is $total_time\n";

##################################################################################
#                                                                                #
# The following snippet has been copied from repair_autoincrement_values:        #
#                                                                                #
##################################################################################

my $loutre_dbc = $loutre_dba->dbc();

my $commandstack = '';

print STDERR "\n\n\nExisting maximum stable_id values:\n";
foreach my $component ('gene', 'transcript', 'translation', 'exon') {

    my $sql = " SELECT MAX(CAST(SUBSTRING(stable_id,8) AS UNSIGNED)) from ${component}_stable_id ";

    my $sth = $loutre_dbc->prepare($sql);
    $sth->execute();
    my ($maxval) = $sth->fetchrow();

    printf STDERR "%-12s %10d\n",$component, $maxval;

    $maxval++;

    $commandstack .= "ALTER TABLE ${component}_stable_id_pool AUTO_INCREMENT = $maxval ;\n";
}

print STDERR "\nDON'T FORGET TO run the following commands as the super-user:\n\n";
print STDERR $commandstack."\n";

1;
