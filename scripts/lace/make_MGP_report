#!/usr/local/bin/perl -w

### make_MGP_report

use strict;
use Bio::Otter::Lace::Defaults;

{
    my $dataset_name = 'mouse';

    my $usage = sub { exec('perldoc', $0) };
    # This do_getopt() call is needed to parse the otter config files
    # even if you aren't giving any arguments on the command line.
    Bio::Otter::Lace::Defaults::do_getopt(
        'h|help!'       => $usage,
        'dataset=s'     => \$dataset_name,
        ) or $usage->();
    $usage->() unless $dataset_name;

    my $xl_table = get_xl_table(\*ARGV);
    
    # Client communicates with otter HTTP server
    my $cl = Bio::Otter::Lace::Defaults::make_Client();
    
    # DataSet interacts directly with an otter database
    my $ds = $cl->get_DataSet_by_name($dataset_name);
    
    my $otter_dba = $ds->get_cached_DBAdaptor;
    my $gene_aptr = $otter_dba->get_GeneAdaptor;
    
    my $remark = 'Annotation_remark- MGP';
    
    my $list_genes = $otter_dba->prepare(q{
        SELECT s.stable_id
          , n.name
          , g.type
          , g.gene_id
        FROM gene_remark k
          , gene_info i
          , gene_name n
          , gene_stable_id s
          , gene g
        WHERE k.gene_info_id = i.gene_info_id
          AND i.gene_info_id = n.gene_info_id
          AND i.gene_stable_id = s.stable_id
          AND s.gene_id = g.gene_id
          AND k.remark = ?
        ORDER BY g.gene_id ASC
        });
    $list_genes->execute($remark);
    
    my %stable_gene_info;
    while (my ($stable, $name, $type, $gene_id) = $list_genes->fetchrow) {
        $stable_gene_info{$stable} = [$name, $type, $gene_id];
    }
    
    foreach my $stable (sort keys %stable_gene_info) {
        my ($name, $type, $gene_id) = @{$stable_gene_info{$stable}};
        
        my $gene = $gene_aptr->fetch_by_dbID($gene_id);
        my $rik = {};
        foreach my $rem ($gene->gene_info->remark) {
            extract_rik($rik, $rem->remark);
        }
        unless ($rik) {
            foreach my $trans (@{$gene->get_all_Transcripts}) {
                foreach my $rem ($trans->transcript_info->remark) {
                    extract_rik($rik, $rem->remark);
                }
            }
        }
        
        my $rik_str = join(' ', sort values %$rik);
        $rik_str ||= '';
        
        my $line = $xl_table->{lc $name};
        unless ($line) {
            foreach my $rik (keys %$rik) {
                last if $line = $xl_table->{$rik};
            }
        }
        
        if ($line) {
            push @$line, join("\t", $name, $rik_str, $type, $stable);
        }
    }
    
    foreach my $line (sort {$a->[0] <=> $b->[0]} values %$xl_table) {
        my ($n, @info) = @$line;
        print join("\t", @info), "\n";
    }
    
}

sub extract_rik {
    my( $rik, $str ) = @_;
    
    while ($str =~ /(\w+rik)/ig) {
        $rik->{lc $1} = $1;
    }
}

sub get_xl_table {
    my ($fh) = @_;

    my $table = {};
    while (<$fh>) {
        chomp;
        next unless /\w/;
        my ($gene_name) = (split /\t/, $_)[1];
        $gene_name ||= "row-$.";
        $table->{lc $gene_name} = [$., $_];
    }
    return $table;
}

__END__

=head1 NAME - make_MGP_report

=head1 AUTHOR

James Gilbert B<email> jgrg@sanger.ac.uk

