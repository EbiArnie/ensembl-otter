#!/usr/local/bin/perl -w

### prefix_external_genes

use strict;
use Bio::Otter::Lace::Defaults;
use Bio::Otter::AnnotationBroker;

{
    my $dataset_name = 'human';
    
    my $usage = sub { exec('perldoc', $0) };
    Bio::Otter::Lace::Defaults::do_getopt(
        'h|help!'       => $usage,
        'dataset=s'     => \$dataset_name,
        ) or $usage->();
    $usage->() unless $dataset_name;
    
    # Client communicates with otter HTTP server
    my $cl = Bio::Otter::Lace::Defaults::make_Client();
    
    # DataSet interacts directly with an otter database
    my $ds = $cl->get_DataSet_by_name($dataset_name);
    
    my $otter_dba   = $ds->get_cached_DBAdaptor;
    my $slice_aptr  = $otter_dba->get_SliceAdaptor;
    my $gene_aptr   = $otter_dba->get_GeneAdaptor;
    
    my @author_set = qw{
        vega        chr22-02    C22:
        ralph       chr14-02    GC:
        lhillier    chr7-02     WU:
        };
    
    my $broker_author = Bio::Otter::Author->new(
        -name   => 'test',
        -email  => 'jgrg@sanger.ac.uk',
        );
    
    my $update_gene_type = $otter_dba->prepare(q{
        UPDATE gene
        SET type = ?
        WHERE gene_id = ?
        });
    my $update_gene_name = $otter_dba->prepare(q{
        UPDATE gene_name
        SET name = ?
        WHERE gene_name_id = ?
        });
    my $update_transcript_name = $otter_dba->prepare(q{
        UPDATE transcript_info
        SET name = ?
        WHERE transcript_info_id = ?
        });
    
    #my %do_not_skip = map {$_, 1} qw{ PRKAR2B HBP1 ADAM22 GNB2 STX1A };
    
    for (my $i = 0; $i < @author_set; $i += 3) {
        my ($author, $set_name, $prefix) = @author_set[$i..$i+2];
        print STDERR "\n$set_name ($author)\n";
    
        my $ss = $ds->get_SequenceSet_by_name($set_name);
        $otter_dba->assembly_type($set_name);
        $ds->fetch_all_CloneSequences_for_SequenceSet($ss);
        # Get slice of whole chr
        my $slice = $slice_aptr->fetch_by_chr_start_end(
          $cl->chr_start_end_from_contig($ss->CloneSequence_list)
          );

        # List gene IDs by slice
        my $gene_id_list = $gene_aptr->list_current_dbIDs_for_Slice($slice);
        #my $gene_id_list = [qw{ 64385 141025 64381 66046 64900 }];
        
        # More recent ones are more interesting
        @$gene_id_list = reverse @$gene_id_list;
        
        # Should be safe to run mulitple times on the same
        # dataset because we check to see if the elements
        # already have the prefix before adding it.
        my $genes_fixed = 0;
      GENE: foreach my $gid (@$gene_id_list) {
            my $did_fix = 0;

        ## Add $prefix to all versions of gene and to transcript name
        #foreach my $gene (external_gene_versions($gene_aptr, $author, $gid)) {
            
            ## Only change prefix if latest author is the external author
            #my @gene_list = $gene_aptr->fetch_by_dbID($gid);
            #foreach my $gene (@gene_list) {
            #    next unless $gene->gene_info->author->name eq $author;


            my @ext = external_gene_versions($gene_aptr, $author, $gid);
            next unless @ext;

            my $first = $ext[0];
            my $last  = $ext[$#ext];
            #
            #my $name = $last->gene_info->name->name;
            ##next unless $do_not_skip{$name};
            #
            unless ($first == $last) {
                my $broker = Bio::Otter::AnnotationBroker->new($otter_dba);
                $broker->current_author($broker_author);
                printf STDERR "Comparing gene '%s' %d to %d\n", $first->stable_id, $first->dbID, $last->dbID;
                my @changes = $broker->compare_genes([$first], [$last]);
                
                
                print STDERR @changes ? "DIFFERENT\n" : "SAME\n";
                next GENE if @changes;
            }
            
            foreach my $gene (@ext) {
                
                #$did_fix++; next;   # Debugging
                
                my $type = $gene->type;
                if (missing_prefix($type, $prefix)) {
                    $did_fix++;
                    $update_gene_type->execute($prefix . $type, $gene->dbID);
                }
            
                my $gn = $gene->gene_info->name;
                my $name = $gn->name;
                if (missing_prefix($name, $prefix)) {
                    $did_fix++;
                    $update_gene_name->execute($prefix . $name, $gn->dbID);
                }
                
                foreach my $tsct (@{$gene->get_all_Transcripts}) {
                    my $info = $tsct->transcript_info;
                    my $name = $info->name;
                    if (missing_prefix($name, $prefix)) {
                        $did_fix++;
                        $update_transcript_name->execute($prefix . $name, $info->dbID);
                    }
                }
            }
            $genes_fixed++ if $did_fix;
        }
        warn "Fixed something in $genes_fixed genes on $set_name\n";
    }
}

sub missing_prefix {
    my ($name, $prefix) = @_;
    
    return substr($name, 0, length($prefix)) ne $prefix;
}

sub external_gene_versions {
    my( $gene_aptr, $external_author, $gid ) = @_;
    
    my $latest_gene = $gene_aptr->fetch_by_dbID($gid);
    my $gene_name     = $latest_gene->gene_info->name->name;
    my $latest_author = $latest_gene->gene_info->author->name;
    # Get all versions of gene
    my @all_versions = get_all_gene_versions($gene_aptr, $latest_gene);
    #warn "got: ", join(', ', map "'$_'", @all_versions), "\n";
    my $first_gene = $all_versions[0];
    # Was version 1 written by $external_author?
    my $first_author = $first_gene->gene_info->author->name;
    
    my $source = $first_author eq $external_author ? 'external' : 'internal';
    
    #printf "%-20s  version = %2d  author = %-10s  %s\n",
    #    $gene_name, $latest_gene->version, $latest_author, $source;
    
    if ($source eq 'external') {
        if ($latest_author ne $external_author) {
            # Gene should not have been edited. Compare versions to see what has changed.
        }
        return @all_versions;
    } else {
        return;
    }
}

sub get_all_gene_versions {
    my( $gene_aptr, $latest_gene ) = @_;
    
    my $stable_id   = $latest_gene->stable_id;

    my @all_versions = ($latest_gene);
    for (my $i = $latest_gene->version - 1; $i > 0; $i--) {
        my $gene;
        eval{
            $gene = $gene_aptr->fetch_by_stable_id_version($stable_id, $i);
        };
        if ($gene) {
            unshift(@all_versions, $gene);
        }
    }
    return @all_versions;
}


__END__

=head1 NAME - prefix_external_genes

=head1 AUTHOR

James Gilbert B<email> jgrg@sanger.ac.uk

