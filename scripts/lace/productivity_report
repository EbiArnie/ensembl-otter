#!/usr/bin/env perl

use warnings;


### productivity_report

use strict;
use Bio::Otter::Lace::Defaults;
use Bio::Otter::Server::Config;

{
    my $from;

    my @dataset_name = qw{
        human
        tas_devil
        cat
        chimp
        cow
        zebrafish
        platypus
        mouse
        pig
        gibbon
        chicken
        opossum
        marmoset
        wallaby
        rat
        gorilla
        mus_spretus
        lemur
        dog
        sheep
    };

    my @annotator_names = qw{
        aeb
        af2
        al1
        cas
        clb
        cs10
        dm4
        dml
        erb
        gdr
        gkl
        gm5
        ib2
        jel
        jh25
        jla1
        jm12
        jr4
        lw2
        mh19
        mms
        mpk
        mt4
        sb7
        th2
        vb1
    };

    my $usage = sub { exec('perldoc', $0) };
    Bio::Otter::Lace::Defaults::do_getopt(
        'h|help!'       => $usage,
        'dataset=s'     => \@dataset_name,
        'from=s'        => \$from,
        'annotators=s'  => \@annotator_names,
        ) or $usage->();
    
    unless ($from) {
        # Default to showing last six months
        my ($month, $year) = (localtime)[4,5];
        $month -= 6;
        if ($month < 0) {
            $year--;
            $month += 12;
        }
        $from = sprintf "%4d-%02d", $year + 1900, $month + 1;
    }
    
    my %annotator = ();
    my $restrict_names = 0;
    if (@annotator_names) {
        $restrict_names = 1;
        foreach my $str (@annotator_names) {
            foreach my $name (split /\W+/, $str) {
                $annotator{$name} = $name;
            }
        }
    }
    
    # Client communicates with otter HTTP server
    my $species_dat = Bio::Otter::Server::Config->SpeciesDat;
    my $cl = Bio::Otter::Lace::Defaults::make_Client();

    my( @dataset );
    if (@dataset_name) {
        foreach my $name (@dataset_name) {
            my $ds = $species_dat->dataset($name);
            push(@dataset, $ds);
        }
    } else {
        @dataset = @{ $species_dat->datasets };
    }

    my $global_counts = {};
    
    my @object_types = qw{ gene transcript };

    foreach my $ds (@dataset) {
        my $otter_dba = $ds->otter_dba;

        foreach my $type (@object_types) {
            my $sth = $otter_dba->dbc->prepare(qq{
                SELECT o.stable_id
                  , UNIX_TIMESTAMP(o.created_date)
                  , UNIX_TIMESTAMP(o.modified_date)
                  , a.author_name
                FROM $type o
                JOIN ${type}_author oa
                  ON o.${type}_id = oa.${type}_id
                JOIN author a
                  ON oa.author_id = a.author_id
                WHERE o.modified_date >= ?
                ORDER BY o.modified_date ASC
            });
            $sth->execute($from);

            my( $stable_id, $created, $modified, $author );
            $sth->bind_columns(\$stable_id, \$created, \$modified, \$author);

            my $counts = {};
            while ($sth->fetch) {
                my $action = $created == $modified ? 'created' : 'modified';
                my ($month, $year) = (localtime($modified))[4,5];
                $year += 1900;
                if ($restrict_names and ! $annotator{$author}) {
                    next;
                    # $author = 'other';
                }
                $counts->{$author}{$year}{$month}{$stable_id} ||= $action;
            }
            foreach my $author (keys %$counts) {
                my $author_conunts = $counts->{$author};
                foreach my $year (keys %$author_conunts) {
                    my $year_counts = $author_conunts->{$year};
                    foreach my $month (keys %$year_counts) {
                        my $type_counts = $year_counts->{$month};
                        foreach my $action (values %$type_counts) {
                            $global_counts->{$year}{$month}{$author}{$type}{$action}++;
                        }
                    }
                }
            }
        }
    }
    
    printf "Gene and transcripts in datasets: %s\n", join(", ", sort map { $_->name } @dataset);
    
    # Author name headers
    my ($author_header, $gene_tsct_header);
    foreach my $name (@annotator_names, 'Total') {
        $author_header .= "\t$name\t";
        $gene_tsct_header .= "\tgene\ttsct";
    }
    print "$author_header\n",
        "$gene_tsct_header\n";

    my @month_names = qw{
        Jan Feb Mar
        Apr May Jun
        Jul Aug Sep
        Oct Nov Dec
    };
    foreach my $year (sort {$a <=> $b} keys %$global_counts) {
        my $year_counts = $global_counts->{$year};
        foreach my $month (sort {$a <=> $b} keys %$year_counts) {
            my $month_counts = $year_counts->{$month};
            my $display_month = $month_names[$month];
            print "$year $display_month";
            my $month_totals = {};
            foreach my $author (@annotator_names) {
                my $author_counts = $month_counts->{$author};
                foreach my $type (@object_types) {
                    my $count = 0;
                    $count += $author_counts->{$type}{'created'}  || 0;
                    $count += $author_counts->{$type}{'modified'} || 0;
                    print "\t$count";
                    $month_totals->{$type} += $count;
                }
            }
            foreach my $type (@object_types) {
                my $count = $month_totals->{$type} || 0;
                print "\t$count";
            }
            print "\n";
        }
        print "\n";
    }
}


__END__

=head1 NAME - productivity_report

=head1 SYNOPSIS

  productivity_report [-dataset <NAME> [-dataset <NAME>]] -annotator <STRING> > report.txt

=head1 EXAMPLE

    productivity_report -dataset zebrafish -annotator jel,gkl,hks,kj2 > report.txt

=head1 DESCRIPTION

Counts who last modified each of the current genes
in which week.

This can be restriced to one or more datasets, or
one or more annotators, using the B<dataset> and
B<annotator> arguments.

The report is tab-separated text suitable for
importing into a spreadsheet application. Weeks
when no genes were last modified do not appear in
the report. The week is given by the date of the
Monday.

=head1 AUTHOR

Ana Code B<email> anacode@sanger.ac.uk

