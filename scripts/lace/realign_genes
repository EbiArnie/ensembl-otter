#!/usr/bin/env perl

use warnings;


### realign_genes

use strict;

use Bio::Otter::Lace::Defaults;
use Hum::Analysis::Factory::ExonLocator;
use Hum::Ace::SubSeq;
use Hum::Ace::GeneMethod;

{
    my $dataset_name = undef;
    my $source_acc   = undef;   # Remap exons from this accession
    my $dest_acc     = undef;   # To this accession.  (Can end with .SV for version.)
    
    my $usage = sub { exec('perldoc', $0) };
    Bio::Otter::Lace::Defaults::do_getopt(
        'h|help!'       => $usage,
        'dataset=s'     => \$dataset_name,
        'chr|set=s'     => \$sequence_set,
        'source=s'      => \$source_acc,
        'destination=s' => \$dest_acc,
        ) or $usage->();
    $usage->() unless $dataset_name and $sequence_set and $source_acc and $dest_acc;

    # Connect to Ensembl/Otter database and fetch adaptors
    my $cl = Bio::Otter::Lace::Defaults::make_Client();
    my $ds = $cl->get_DataSet_by_name($dataset_name);
    my $ss = $ds->get_SequenceSet_by_name($sequence_set);
    
    my $otter_db = $ds->make_Vega_DBAdaptor;
    my $gene_aptr  = $otter_db->get_GeneAdaptor;
    my $clone_aptr = $otter_db->get_CloneAdaptor;
    
    my $source_ctg = fetch_contig_by_acc($clone_aptr, $source_acc);
    my $dest_ctg   = fetch_contig_by_acc($clone_aptr, $dest_acc);
    my $source_seq = hum_seq_from_contig($source_ctg);
    my   $dest_seq = hum_seq_from_contig($dest_ctg);
    
    my $gene_id_list = $gene_aptr->list_current_dbIDs_for_Contig($source_ctg);
    my $finder = Hum::Analysis::Factory::ExonLocator->new;
    $finder->genomic_Sequence($dest_seq);
    #my $gene_number = 0;
    
    #my $method = Hum::Ace::GeneMethod->new;
    #$method->name('hand_built');
    #$method->is_coding(0);
    
    foreach my $gid (@$gene_id_list) {
        #$gene_number++;
        #my $transcript_number = 0;
        #my $gene_name = "$clone_name.$gene_number";
        #my $gene = $gene_aptr->fetch_by_dbID($gid);
        remap_ens_Exons($finder, $gene->get_all_Exons, $dest_ctg);
        
        print $gene->toXMLString;
    }
}

sub remap_ens_Exons {
    my( $finder, $exons, $dest_ctg ) = @_;

    # Make a Hum::Sequence object for each exon
    my $exon_seq = [];
    for (my $i = 0; $i < @$exons; $i++) {
        push(@$exon_seq, hum_seq_from_exon($exons->[$i]));
    }

    # Find the exons (with cross_match)
    my $fs = $finder->find_best_Feature_set($exon_seq);
    
    # Give Exons new coords
    my $sub_strand = undef;
    for (my $i = 0; $i < @$exons; $i++) {
        my $exon  = $exons->[$i];
        my $name  = $exon->stable_id;
        my $e_len = $exon->length;
        if (my $feat = $fs->[$i]) {
            my $start  = $feat->seq_start;
            my $end    = $feat->seq_end;
            my $strand = $feat->seq_strand;
            my $h_len  = $feat->seq_length;

            if ($sub_strand and $strand != $sub_strand) {
                # Should trap this in ExonLocator
                warn "Exons on different strands from same feature set\n";
            } else {
                $sub_strand = $strand;
            }

            if ($h_len != $e_len) {
                printf STDERR "Incomplete ($h_len of $e_len) to %10s %d %d %d\n",
                    $name, $start, $end, $strand;
            }
            #else {
            #    printf STDERR "Found %10s %d %d %d\n",
            #        $name, $start, $end, $strand;
            #}
            $exon->start($start);
            $exon->end($end);
            $exon->strand($strand);
            $exon->contig($dest_ctg);
        } else {
            printf STDERR "Failed to find %d bp exon '%s'\n",
                $exon->length,
                $exon->stable_id;
        }
    }
}
        #$transcript_number++;
        #my $subseq = Hum::Ace::SubSeq->new;
        #my $exon = $subseq->new_Exon;
        #$exon->start($start);
        #$exon->end($end);
        #my $sub_name = sprintf("%s-%03d", $gene_name, $transcript_number);
        #$subseq->name($sub_name);
        #$subseq->clone_Sequence($dest_seq);
        #$subseq->strand($sub_strand);
        #$subseq->GeneMethod($method);
        #print $subseq->ace_string;

sub fetch_contig_by_acc {
    my( $clone_aptr, $acc_str ) = @_;
    
    my( $cln );
    if (my ($acc, $sv) = $acc_str =~ /^([^.]+)\.(\d+)$/) {
        $cln = $clone_aptr->fetch_by_accession_version($acc, $sv);
    } else {
        $cln = $clone_aptr->fetch_by_accession($acc_str);
    }
    my $contigs = $cln->get_all_Contigs;
    if (@$contigs > 1) {
        die "clone has more than 1 contig";
    } else {
        return $contigs->[0];
    }
}

sub hum_seq_from_contig {
    my( $ctg ) = @_;

    my $seq = Hum::Sequence::DNA->new;
    $seq->sequence_string($ctg->seq);
    $seq->name($ctg->name);
    return $seq;
}

sub hum_seq_from_exon {
    my( $exon ) = @_;
    
    my $seq = Hum::Sequence::DNA->new;
    $seq->sequence_string($exon->seq->seq);
    $seq->name($exon->stable_id);
    return $seq;
}

__END__

=head1 NAME - realign_genes
 
  project_name  accession
  ------------  ---------
  bCX98J21      AL662825
  bPG249D20     AL662800
  
  bPG300A18     AL662884
  bQB143M3      AL845464
 
bPG249D20 and bCX98J21 share about 5 genes and a
pseudogene.

bQB143M3 and bPG300A18 share 7-8 genes
                                                                                
Both examples are quite busy with multi exon
genes on both strands and many splice variants.

=head1 PLAN

=head2 realigning genes from old versions or overlaps

Need to distinguish genes that miss exons
internal to the slice (off-track) from those that
miss exons outside the slice (truncated).

Off-track genes have no exons that lie on
accession numbers that are not in the slice, but
some exons lie on other (must be lower?) versions
of those accession numbers, or on the wrong
contig in overlap regions.

Input to realign off-track genes:

  assembly-type
  accession at start and end of region to map to
  name of gene

Fetch otter slice.
Fetch DNA of slice into Hum::Sequence object.
Loop through genes.
If gene is truncated, fetch from database by GID, and attempt remap to slice sequence.
If remaps are successful, save new version of gene.

=head2 realigning genes from other clones

When realigning from other accessions, the stable
IDs must be removed, and the transcripts (and
possibly genes) given new names.

=head1 AUTHOR

James Gilbert B<email> jgrg@sanger.ac.uk

