#!/usr/bin/env perl

use warnings;


### remove_duplicate_genes

use strict;
use Bio::Otter::Lace::Defaults;

$| = 1;

{
    my $dataset_name = undef;
    
    my $usage = sub { exec('perldoc', $0) };
    Bio::Otter::Lace::Defaults::do_getopt(
        'h|help!'   => $usage,
        'dataset=s' => \$dataset_name,
        ) or $usage->();
    $usage->() unless $dataset_name;

    my $cl = Bio::Otter::Lace::Defaults::make_Client();
    my $ds = $cl->get_DataSet_by_name($dataset_name);
    my $dba = $ds->get_cached_DBAdaptor;
    my $gene_aptr = $dba->get_GeneAdaptor;
    
    my $list_gene_names = $dba->prepare(q{
        SELECT DISTINCT g.gene_id
          , n.name
        FROM gene g
          , gene_stable_id gsid
          , gene_info i
          , gene_name n
        WHERE g.gene_id = gsid.gene_id
          AND gsid.stable_id = i.gene_stable_id
          AND i.gene_info_id = n.gene_info_id
       });
    $list_gene_names->execute;
    
    my( %gid_name );
    while (my ($gid, $name) = $list_gene_names->fetchrow) {
        $gid_name{$gid} = $name;
    }
    
    my $current_gene_id = $gene_aptr->list_current_dbIDs;
    
    my( %name_gid );
    foreach my $gid (@$current_gene_id) {
        my $name = $gid_name{$gid} or die "No gene name for gene '$gid'";
        my $list = $name_gid{$name} ||= [];
        push(@$list, $gid);
    }
    
    my $make_obsolete = $dba->prepare(q{
        UPDATE gene
        SET type = 'obsolete'
        WHERE gene_id = ?
        });
    
    my $names_examined = 0;
    my $genes_fixed    = 0;
    $dba->begin_work;
    eval{
        while (my ($name, $gid_list) = each %name_gid) {
            next unless  @$gid_list > 1;
            print "\nNAME: $name\n";
            $names_examined++;
            my( @candidate );
            foreach my $gene_id (@$gid_list) {
                my $gene = $gene_aptr->fetch_by_dbID($gene_id);
                push(@candidate, $gene);
            }

            my $fixed_this_gene = 0;
            my @overlaps = grep @$_ > 1, group_by_contigs(@candidate);
            if (@overlaps) {
                foreach my $group (@overlaps) {
                    print "  GROUP:\n";
                    my( %ctg_count, %gene_stable_id );
                    @$group = sort {
                        $b->modified <=> $a->modified       # Keep the most recently modified
                        || $a->stable_id cmp $b->stable_id  # ... or the oldest otter ID
                        } @$group;
                    foreach my $g (@$group) {
                        # Make a key from all the contig names
                        my $ctg_key = join(' ', sort {$a cmp $b} list_contig_names($g));
                        $ctg_count{$ctg_key}++;
                        $gene_stable_id{$g->stable_id}++;
                        print "    ", gene_str($g);
                        print  "      $ctg_key\n";
                    }
                    if (keys %ctg_count > 1) {
                        print "  Gene in this group is not always on the same contig - Can't resolve\n";
                        next;
                    }
                    if (keys %gene_stable_id != @$group) {
                        print "  Some gene IDs appear more than once in this group - Can't resolve\n";
                        next;
                    }
                    print "  Going to set duplicates to obsolete\n";
                    my $keep = shift @$group;
                    print "  Keeping:\n",
                        "    ", gene_str($keep);
                    foreach my $g (@$group) {
                        $make_obsolete->execute($g->dbID);
                    }
                    $fixed_this_gene++;
                }
            } else {
                print "  No overlapping genes under this name\n";
            }
            $genes_fixed++ if $fixed_this_gene;
        }
    };
    if ($@) {
        $dba->rollback;
        die "\n\nError: $@";
    } else {
        print "\n\nExamined $names_examined candidates and fixed $genes_fixed\n";
        $dba->commit;
    }
}

sub gene_str {
    my( $gene ) = @_;
    
    return sprintf "%s\t%s\t%s\n", $gene->stable_id, $gene->version, scalar localtime($gene->modified);
}


sub group_by_contigs {
    my( @genes ) = @_;
    
    # Key will be contig name and value array of genes on that contig
    my( %ctg_group );
    foreach my $g (@genes) {
        my @ctg_names = list_contig_names($g);
        #warn "names = (@ctg_names)";
        my( %uniq_group );
        foreach my $name (@ctg_names) {
            if (my $group = $ctg_group{$name}) {
                $uniq_group{$group} = $group;
            }
        }
        
        my $group = (values %uniq_group)[0] || [];
        
        while (my ($ctg, $this) = each %ctg_group) {
            # Make sure all the contigs in this group point to $group
            if ($uniq_group{$this}) {
                $ctg_group{$ctg} = $group;
            }
        }

        push(@$group, $g);
        foreach my $name (@ctg_names) {
            $ctg_group{$name} = $group;
        }
    }
    
    my %uniq_group = map {$_, $_} values %ctg_group;
    return values %uniq_group;
}

sub list_contig_names {
    my( $gene ) = @_;
    
    my( %ctg_names );
    foreach my $exon (@{$gene->get_all_Exons}) {
        my $name = $exon->contig->name;
        $ctg_names{$name} = 1;
    }
    return keys %ctg_names;
}


__END__

=head1 NAME - remove_duplicate_genes

=head1 AUTHOR

James Gilbert B<email> jgrg@sanger.ac.uk

