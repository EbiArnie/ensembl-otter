#!/usr/bin/env perl

use warnings;


# Re-initialize the values of stable_id auto_increment pools by skipping all existing stable_ids.

BEGIN {
    foreach my $path (@INC) {
        unless( $path=~s{ensembl/modules}{ensembl_head/modules}g ) {
            $path=~s{ensembl_head/modules}{ensembl/modules}g;
        };
    }
}

use strict;
use Bio::Otter::Lace::Defaults;

{
    my $dsname  = 'ns_human';
    my $change  = 0; # dry run

    Bio::Otter::Lace::Defaults::do_getopt(
        'dataset=s'     => \$dsname,
        'change!'       => \$change,
    );

    # Client communicates with otter HTTP server
    my $cl = Bio::Otter::Lace::Defaults::make_Client();

    # DataSet interacts directly with an otter database
    my $ds = $cl->get_DataSet_by_name($dsname);
    my $loutre_dbc = $ds->get_cached_DBAdaptor->dbc();

    my $commandstack = '';

    print "Existing maximum stable_id values:\n";
    foreach my $component ('gene', 'transcript', 'translation', 'exon') {

        my $sql = " SELECT MAX(CAST(SUBSTRING(stable_id,8) AS UNSIGNED)) from ${component}_stable_id ";

        my $sth = $loutre_dbc->prepare($sql);
        $sth->execute();
        my ($maxval) = $sth->fetchrow();
        
        printf "%-12s %10d\n",$component, $maxval;

        $maxval++;

        $commandstack .= "ALTER TABLE ${component}_stable_id_pool AUTO_INCREMENT = $maxval ;\n";
    }

    print "\nPlease run the following commands as the super-user:\n\n";
    print $commandstack."\n";
}

