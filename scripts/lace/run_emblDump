#!/usr/bin/env perl

use warnings;


### run_emblDump

use strict;
use Hum::Submission 'prepare_statement';
use Bio::Otter::Lace::Defaults;
use Getopt::Long 'GetOptions';

{
  my ($dataset, @sets, $dumpdir, $number, $dump, $submit);

  my $help = sub { exec('perldoc', $0) };

  Bio::Otter::Lace::Defaults::do_getopt('ds|dataset=s'  => \$dataset,
					'set=s@'        => \@sets,
					'dir|dumpdir=s' => \$dumpdir,
					'n|number=i'    => \$number,    # number of files to submit
					'd|dump'        => \$dump,
					'submit'        => \$submit,
					'h|help'        => $help,
				       ) or $help->(); # plus default options

  # options to run script

  if ( $dump && $submit ){
    print STDERR "The script intentionally separates EMBL dumping and EMBL file submission - see POD.\n\n";
    exit(1);
  }
  if ( $dump && !($dataset && $dumpdir) ){
    print STDERR "You need to specify dataset (eg, -dataset human) and dump_dir (eg, ~humpub/EMBL_DUMP/human).\n\n";
    exit(1);
  }
  elsif ( $submit && !($number && $dumpdir) ){
    print STDERR "You need to specify dump_dir and number of files to submit . . .\nbetter start with lower number (eg, 10), than increase.\n\n";
    exit(1);
  }
  elsif ( !($dump || $submit) ) {
    $help->();
  }

  if ( $dump ){

    my $client      = Bio::Otter::Lace::Defaults::make_Client();
    my $dset        = $client->get_DataSet_by_name($dataset);
    my $otter_db    = $dset->get_cached_DBAdaptor;

    if ( $dataset eq "zebrafish" ){

      unless ( @sets ){
	
	# get all assembly types
	my $sql = q{SELECT assembly_type FROM sequence_set};
	my $sth = $otter_db->prepare($sql);
	$sth->execute;
	while ( my ($type) = $sth->fetchrow_array()) {
	  push (@sets, $type);
	}
	$sth->finish;
      }
    }

    if ( $dataset eq "human" || $dataset eq "mouse"){

      unless ( @sets ){
	@sets = get_vega_sets($otter_db);
      }
    }

    my $rundate = `date +%Y%m%d`; chomp $rundate;

    #--------------------------------------------
    #   dumping only wanted clones into ~humpub
    #--------------------------------------------

    my %clones_to_submit = clones_to_submit($otter_db);

    foreach my $set ( @sets ) {

      $otter_db->assembly_type($_); # replace the default sequence set setting
      my $seqSet = $dset->get_SequenceSet_by_name($set);
      my $clones = $dset->fetch_all_CloneSequences_for_SequenceSet($seqSet);
	
      my @seqs;
      foreach my $obj (@$clones) {
	my ($seq_name, $accver) = sanger_name($obj->accession);

	# ZEBRAFISH: dump only clones with remark "Annotation_remark- annotated"
	if ( $dataset eq "zebrafish" ){
	  if ( $seq_name && $clones_to_submit{$accver} ) {
	    push(@seqs, $seq_name);
	  }
	}
	
	# HUMAN: dump all clones of sequence_set with non-zero vega_set_id
	elsif ( ($dataset eq "human" || $dataset eq "mouse") && $seq_name ){
	  push(@seqs, $seq_name);
	}
      }

      my $file = $dumpdir."$set".".$rundate.err";

      if ( @seqs ) {

	# delete previous seq_id to MD5 checksum file
	my $chksum_file = glob("$dumpdir/seq_id_2_md5_sum.*");

	unlink($chksum_file) if $chksum_file;

	system("/nfs/team71/analysis/ck1/SCRIPT_CVS/humscripts/emblDump -dataset $dataset -port 33966 -set $set -dump $dumpdir -errfile $file @seqs");
      }
    }

    my $num = `ls $dumpdir | wc -l`;
    chomp $num;
    `echo "Dumped $num files " > $dumpdir/FILE_DUMP.info`;
  }

  if ( $submit ){

    #----------------------
    #    submit to EMBL
    #----------------------

    my @to_submit = glob("$dumpdir/*");

    # number of EMBL files to submit
    @to_submit = @to_submit[0..$number-1];

    system("/nfs/team71/analysis/ck1/SCRIPT_CVS/submissions/submit_finished -dataset $dataset -submit_type FIN_ANN @to_submit");
  }
}

sub get_vega_sets {

  # get sequence_sets that have non-zero vega_set_id to submit to EMBL
  my $db = shift;

  my $sql = "SELECT assembly_type FROM sequence_set where vega_set_id > 0";
  my $sth = $db->prepare($sql);
  $sth->execute;

  my @sets;
  while ( my $set = $sth->fetchrow_array ){
    push(@sets, $set);
  }
  return @sets;
}

sub clones_to_submit {

  # clones to submit to EMBL
  # query tailored for zebrafish (using Annotation_remark- annotated as a filter) and not human
  my $db = shift;

  my ($sql, $sth);

  $sql = q{
           SELECT concat(cl.embl_acc,'.', cl.embl_version)
           FROM clone_remark cr, clone_info ci, clone cl
           WHERE cr.remark = 'Annotation_remark- annotated'
           AND cr.clone_info_id=ci.clone_info_id
           AND ci.clone_id=cl.clone_id
          };

  $sth = $db->prepare($sql);
  $sth->execute;

  my %cln_to_submit;
  while ( my $accver = $sth->fetchrow_array ){

    $cln_to_submit{$accver} = 1 unless $cln_to_submit{$accver};
  }
  $sth->finish;

  return %cln_to_submit;
}

sub sanger_name {
  my( $acc ) = @_;

  my $sth = prepare_statement(qq{
        SELECT s.sequence_name, s.sequence_version, pa.accession
        FROM project_acc pa
          , project_dump pd
          , sequence s
        WHERE pa.accession = '$acc'
          AND pa.sanger_id = pd.sanger_id
          AND pd.seq_id = s.seq_id
          AND pd.is_current = 'Y'
        });

  $sth->execute;
  my ($sanger_name, $ver, $ac) = $sth->fetchrow;
  $sth->finish;
#  print "$sanger_name, $ac.$ver\n";

  return $sanger_name, $ac.".".$ver if $sanger_name;
}


__END__

=head1 NAME - run_emblDump

=head1 SYNOPSIS

B<Become humpub>.

Script parameters:

Step 1 (dumping): run_emblDump B<-dump> B<-dataset> human B<-dumpdir> DIMP_DIR

Step 2 (submission): run_emblDump B<-submit> B<-n> 10

The script does B<not> support doing B<dumping> and B<submission> in one go, as EBI disk is of limited capacity and so there is no point if huge files end up being "unsuccessful" and needed to be resubmitted.
To submit, start by a number of 10; if successful, increase the number.

=head1 DESCRIPTION

This script calls /humscripts/emblDump to dump out EMBL flatfiles from one or more sequence sets.
(To check out the dir in which emblDump resides: cvs -d /nfs/humace2/CVS_master checkout humscripts)

To submit these dumpfiles to EMBL, it calls submissions/submit_finished.
(To check out the dir in which submit_finished resides: cvs -d /nfs/humace2/CVS_master checkout submissions)


CHECK that script is working

1. Clones to submit to EMBL: only those that have clone remark "Annotation_remark- annotated".

Checking clone with "annotated" remark

Otter DB Query:
select distinct concat(cl.embl_acc,".", cl.embl_version) as acc_ver, atc.transferred, cr.remark from clone_remark cr, clone_info ci, clone cl, assembly_tagged_clone atc where atc.transferred="yes" and cr.remark = "Annotation_remark- annotated" and cr.clone_info_id=ci.clone_info_id and ci.clone_id=cl.clone_id and cl.clone_id=atc.clone_id and cl.embl_acc="BX255932";

Submissions DB Query:
SELECT s.sequence_name, s.sequence_version, pa.accession, pd.is_current FROM project_acc pa, project_dump pd, sequence s WHERE pa.accession = 'BX255932' AND pa.sanger_id = pd.sanger_id AND pd.seq_id = s.seq_id AND pd.is_current = 'y';


2. Test which clones has no assembly_tag data transferred.

select c.name, cl.name , a.type  from contig c, clone cl, assembly_tagged_clone atc, assembly a where c.clone_id = atc.clone_id and c.clone_id = cl.clone_id and c.contig_id = a.contig_id and atc.transferred = 'no';


3. Due to ENV issues of humpub account, a bourn shell wrapper (~ck1/SCRIPT_CVS/ensembl-otter/scripts/lace/do_embl.sh) is used to run the script:

-------------------------------------------------------------------------
#!/bin/sh

PERL5LIB=.....

export PERL5LIB

# do dumping

if test $# -eq 3 && test $1 = "-dump"; then
  /nfs/team71/analysis/ck1/SCRIPT_CVS/ensembl-otter/scripts/lace/run_emblDump -dump -dataset $2 -port 33966 -dir $3

# do submission

elif test $# -eq 3 && test $1 = "-submit"; then
  /nfs/team71/analysis/ck1/SCRIPT_CVS/ensembl-otter/scripts/lace/run_emblDump -submit -n $2 -port 33966 -dir $3

else
  echo "Specify EITHER -dump dataset dumpdir OR -submit number dumpdir"
fi
-------------------------------------------------------------------------

=head1 AUTHOR

Chao-Kung Chen B<email> ck1@sanger.ac.uk


