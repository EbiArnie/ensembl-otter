#!/usr/bin/env perl

### satellite_switch

use strict;
use warnings;
use List::MoreUtils 'uniq'; # CPAN

use Bio::Otter::Lace::Defaults;


# "Which database?" can now be answered by checking the port number.
# The DBA team maintains (essentially) a registry of port numbers used
# for databases and we are included.

my %MASTER = (3322 => 'lutra5', 3323 => 'lutra7'); # lutra8:3324 is otterlive, not relevant in this script
my %SLAVE  = (3322 => 'lutra6', 3323 => 'lutra6'); # lutra6:3324 also exists


# Build regexps
my $HOSTS_RE = join "|", sort( uniq( values %MASTER, values %SLAVE ));
my $PORTS_RE = join "|", keys %MASTER;
$HOSTS_RE = qr{\b($HOSTS_RE)\b};
$PORTS_RE = qr{\b($PORTS_RE)\b};

{
    my $switch;
    my $dryrun = 0;

    my $usage = sub { exec('perldoc', $0) };
    # This do_getopt() call is needed to parse the otter config files
    # even if you aren't giving any arguments on the command line.
    Bio::Otter::Lace::Defaults::do_getopt(
        'h|help!'       => $usage,
        'n|dryrun!'     => sub{ $dryrun = 1 },
        'slave!'        => sub{ $switch = 'slave' },
        'master!'       => sub{ $switch = 'master' },
        ) or $usage->();
    $usage->() unless $switch;
    
    # Client communicates with otter HTTP server
    my $cl = Bio::Otter::Lace::Defaults::make_Client();
    
    my $meta_key = 'pipeline_db_head';
    foreach my $ds ($cl->get_all_DataSets) {
        my $name = $ds->name;
        my $dba = $ds->make_Vega_DBAdaptor;
        my $meta = $dba->get_MetaContainer;
        my ($connect) = @{$meta->list_value_by_key($meta_key)};
        unless ($connect) {
            warn "Missing '$meta_key' for '$name'\n";
            next;
        }
        # warn "$name: Looking at $connect\n";
        my ($sathost) = $connect =~ $HOSTS_RE;
	my ($satport) = $connect =~ $PORTS_RE;

	if ($sathost && $satport) {
	    if ($switch eq 'master' && $sathost eq $SLAVE{$satport}) {
		$sathost = $MASTER{$satport};
	    } elsif ($switch eq 'slave' && $sathost eq $MASTER{$satport}) {
		$sathost = $SLAVE{$satport};
	    } elsif ($sathost eq $SLAVE{$satport} || $sathost eq $MASTER{$satport}) {
		warn "ok:  Dataset $name is already on $switch ($sathost:$satport)\n";
		next;
	    }

	} else {
	    warn "[W] Dataset $name current configuration not recognised,\n      $meta_key => { $connect }\n";
            next;
        }

	print STDERR "\n=>  Switching $name to $switch\n";
        my @command = ('./save_satellite_db',
            -dataset    => $name,
            -key        => $meta_key,
            -sathost    => $sathost,
            -satport    => $satport,
            );
	if ($dryrun) {
	    print "Would run: @command\n";
	} else {
	    warn "Running: @command\n";
	    system(@command);
	}
    }
}




__END__

=head1 NAME

satellite_switch - flip satellite databases to/from MySQL slaves

=head1 USAGE

  satellite_switch <-slave|-master> [-dryrun]

=head1 DESCRIPTION

This updates the C<pipeline_db_head> meta_key for all species in the
server's C<species.dat> .  It maintains the port number and switches
the hostname.  It is intended to switch the read-only queries from
Otterlace via the CGI scripts, between master & slave database
servers.

The CNAME aliases (otterpipe1, otterpipe2) are not used.  In the event
of database server failure, we can update these rows on accessible
databases much faster than we can get the DNS changed.

=head1 CAVEATS

There are also C<pipeline_db_rw_head> and other database pointers.
This script does not touch those.

=head1 AUTHOR

James Gilbert B<email> jgrg@sanger.ac.uk

