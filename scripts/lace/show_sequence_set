#!/usr/local/bin/perl -w

### show_sequence_set

use strict;

use Bio::Otter::Lace::Defaults;
use Hum::Sort 'ace_sort';

{
    my( $dataset_name,
        $sequence_set,
        );
    my $acc_only = 0;
    my $show_agp = 0;
    my $acc_sv   = 0;
    my $all      = 0;

    my $usage = sub { exec('perldoc', $0) };
    Bio::Otter::Lace::Defaults::do_getopt(
        'h|help!'       => $usage,
        'dataset=s'     => \$dataset_name,
        'chr|set=s'     => \$sequence_set,
        'acc_only!'     => \$acc_only,
        'sv!'           => \$acc_sv,
        'agp!'          => \$show_agp,
        'all!'          => \$all,
        ) or $usage->();

    $usage->() if $acc_only and $acc_sv;

    # Connect to Ensembl/Otter database and fetch adaptors
    my $cl = Bio::Otter::Lace::Defaults::make_Client();
    
    if ($dataset_name) {
        my $ds = $cl->get_DataSet_by_name($dataset_name);

        if ($sequence_set) {
            if ($show_agp) {
                print_agp($ds, $sequence_set);
            } else {
                print_sequence_set($ds, $sequence_set, $acc_only, $acc_sv);
            }
        } else {
            print_set_list($ds, $all);
        }
    } else {
        print "Datasets:\n";
        foreach my $ds ($cl->get_all_DataSets) {
            #use Data::Dumper;  print Dumper($ds);
            print "  ", $ds->name, "\n";
        }
    }
}

sub print_agp {
    my( $ds, $sequence_set ) = @_;
    
    my $dba = $ds->get_cached_DBAdaptor;
    my $sth = $dba->prepare(q{
        SELECT chr.name, a.chr_start, a.chr_end
          , a.contig_start, a.contig_end, a.contig_ori
          , c.embl_acc, c.embl_version, a.superctg_name
        FROM chromosome chr
          , assembly a
          , contig g
          , clone c
        WHERE chr.chromosome_id = a.chromosome_id
          AND a.contig_id = g.contig_id
          AND g.clone_id = c.clone_id
          AND a.type = ?
        ORDER BY a.chr_start
        });
    $sth->execute($sequence_set);
    
    my $row = 0;
    my $pos = 0;
    while (my ($chr_name, $chr_start, $chr_end,
               $contig_start, $contig_end, $strand,
               $acc, $sv, $superctg_name) = $sth->fetchrow)
    {
        $row++;
        if (my $gap = ($chr_start - ($pos + 1))) {
            print join("\t", $chr_name, $pos + 1, $pos + $gap, $row, 'N', $gap), "\n";
            $row++;
        }
        print join("\t", $chr_name, $chr_start, $chr_end, $row, 'F',
            "$acc.$sv", $contig_start, $contig_end,
            $strand eq '1' ? '+' : '-',
            "# $superctg_name"), "\n";
        $pos = $chr_end;
    }
}

sub print_sequence_set {
    my( $ds, $sequence_set, $acc_only, $acc_sv ) = @_;
    
    my $ss = $ds->get_SequenceSet_by_name($sequence_set);
    $ds->fetch_all_CloneSequences_for_SequenceSet($ss);
    my $cs_list = $ss->CloneSequence_list;
    
    my $last_pos = 0;
    for (my $i = 0; $i < @$cs_list; $i++) {
        my $cs = $cs_list->[$i];
        
        # Show sizes of gaps between clones
        if (! $acc_only and ! $acc_sv and my $gap = $cs->chr_start - $last_pos - 1) {
            printf "GAP  %s bp\n", comma_format($gap);
        }
        $last_pos = $cs->chr_end;
        
        # Print the clone information
        if ($acc_only) {
            print $cs->accession, "\n";
        }
        elsif ($acc_sv) {
            print $cs->accession . '.' . $cs->sv, "\n";
        }
        else {
            printf "%5d  %-12s  %-8s\n",
                $i + 1,
                $cs->clone_name,
                $cs->accession;
        }
    }
}

sub print_set_list {
    my( $ds, $all ) = @_;
    
    my $method = $all ? 'get_all_SequenceSets' : 'get_all_visible_SequenceSets';
    
    my @ss_list = sort {ace_sort($a->name, $b->name)} @{$ds->$method()};
    
    my $max = 0;
    foreach my $ss (@ss_list) {
        my $len = length($ss->name);
        $max = $len if $len > $max;
    }
    
    my $pattern = "  \%-${max}s  \%s\n";
    foreach my $ss (@ss_list) {
        printf $pattern,
            $ss->name,
            $ss->description;
    }
}

sub comma_format {
    my( $number ) = @_;
    
    my $formatted = reverse $number;
    $formatted =~ s/(\d{3})(?=\d)/$1,/g;
    $formatted = reverse $formatted;
    
    return $formatted;
}

__END__

=head1 NAME - show_sequence_set

=head1 EXAMPLE

  ./show_sequence_set -dataset human
  
will list the sequence sets for the "human" dataset.

  ./show_sequence_set -dataset human -set chr1-07

will print out the "chr1-07" set, much as it
appears in the SequenceNotes window.

=head1 AUTHOR

James Gilbert B<email> jgrg@sanger.ac.uk

