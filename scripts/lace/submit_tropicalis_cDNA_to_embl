#!/usr/bin/env perl

use warnings;


use strict;
use Hum::Sort ('ace_sort');

# Chao-Kung Chen


# submit_est_cdna_to_embl: wrapper to run various scripts of the cdna_db packages
#                          for submitting cDNA to EMBL

# --- other file locations
my $EST        = "/nfs/disk100/humpub/est";
my @load_fldrs =  sort { ace_sort($a, $b) } glob("$EST/tropicalis_cdna/tropicalis_load*");

my $new_load_fldr  = $load_fldrs[-1];

#### modify variables, eg date of release, cons file before running a new submission
# ---------------                 modify this first:               ---------------

my $cdna_db  = "tropicalis_cdna_2006_08_16";

#----------------------------------------------------------------------------------

my $taxon_id = 8364;

$cdna_db =~ /tropicalis_cdna_(.+)/;
my $release_date = $1;
my $last_rel_date = "???";  # check


# ---------- db conf files -------- ---

my ($cdna_db_conf_pipe, $blast_db_conf, $cdna_db_conf);

$cdna_db_conf_pipe = $blast_db_conf = $cdna_db_conf = "/ecs4/work5/finished/production/cdna_est/conf/current_cDNA_DB.conf";

my $cdna_db_cbi1_conf = "/nfs/team71/analysis/ck1/SCRIPT_CVS/cdna_db/conf/current_cDNA_DB.conf";
my $est_db_conf       = "/nfs/team71/analysis/ck1/SCRIPT_CVS/est_db_tigr/conf/TROP_SUB_TEST.conf";

#----------- other files and working directories -------------

my $file_list      = glob("$new_load_fldr/file_list_${release_date}.txt");
my $all_fasta      = "$new_load_fldr/all_x_trop_".$release_date.".fasta";

my $embl_file      = "$EST/embl_temp/Xtrop/X_trop_cDNA_$release_date.embl";
my $accepted_accs  = "$new_load_fldr/accepted_X_tropicalis_cDNAs_$release_date.fasta";
my $all_cDNA_fasta = "$new_load_fldr/all_X_tropicalis_cDNAs_$release_date.fasta";

my $cdna_db_dump_dir  = "$EST/txt_db_dump/$cdna_db";

my $base      = "/nfs/team71/analysis/ck1/SCRIPT_CVS";
my $pipe_base = "/ecs4/work5/finished/production/cdna_est";

my $lib_mapping_file_loc = "$pipe_base/conf";

my ($cwd, $s);

#   p0.    Prepare file list for EXTRACTING FASTA

#   Run this step in the $new_load_fldr directory for cons other than XTrop19 and XTrop20
#   cons files are given by the finishers
#   This also prepare a file_list_yyyy_mm_dd.txt in this directory that reads similar to:
#   Location of TEgg /nfs/repository/p385/Egg/assembly/cons9
#   Location of TEgg /nfs/disk100/humpub/est/tropicalis_cdna/tropicalis_load_9/Xtrop21-24/TEgg/cons3

if ( $ARGV[0] eq "p0" ){

  print STDOUT "p0.    Prepare file list for EXTRACTING FASTA\n\n";

  my $consfile = $ARGV[1];
  my $plate    = $ARGV[2];
  my $s = system("/ecs4/work5/finished/ck1/PIPELINE/scripts/make_xtropicalis_filelist.pl -dir $new_load_fldr -cons $ARGV[1] -plate $plate -list $file_list");

  check_status($s);

  # This should create cons files for each library in eg,
  # /nfs/disk100/humpub/est/tropicalis_cdna/tropicalis_load_10/Xtrop21-24/TEgg/consX
}


#   p1.    Prepare file list for EXTRACTING FASTA

#   Run this step in the $new_load_fldr directory for XTrop19 and XTrop20 cons

#   lib_mapping file is in "/ecs4/work5/finished/production/cdna_est/conf/";
#   This should create p19/TEgg p19/TGas ... subfolders, each of which
#   contains a consX file
#
#   This also prepare a file_list_yyyy_mm_dd.txt in this directory that reads similar to:
#   Location of TEgg /nfs/repository/p385/Egg/assembly/cons9
#   Location of TEgg /nfs/disk100/humpub/est/tropicalis_cdna/tropicalis_load_9/p19Cons/Egg/cons3


if ( $ARGV[0] eq "p1" ){

  print STDOUT "p1.    Prepare file list for EXTRACTING FASTA\n\n";

  my $cons_file        = $ARGV[1];
  $cons_file =~ /p(\d+)/;
  my $lib_mapping_file = "$lib_mapping_file_loc/frog_plate$1"."_lib_mapping";

  my $test             = $ARGV[2];
  my $fh;

  open($fh, "<$lib_mapping_file") or die $!;

  my $cdna_lib = {};

  while (<$fh> ) {
	chomp;
	# TEgg    30      A8      XTropTFL19      I11

	my ( $lib, $pos, $src, $plate, $well ) = split(/\s+/, $_);

	if ( $well =~ /^([A-Z])(\d+)$/ ) {
	  my $alpha = $1;
	  my $num = sprintf("%02d", $2);
	  $well = $alpha.$num;
	}

	if ( $src =~ /^([A-Z])(\d+)$/ ) {
	  my $alpha = $1;
	  my $num = sprintf("%02d", $2);
	  $src = $alpha.$num;
	}

	$pos = sprintf("%03d", $pos);

	my $clonename = $lib.$pos.lc($src);
	#print "$clonename\n";# if length $clonename == 9; 

	push(@{$cdna_lib->{$plate.lc($well)}}, $lib, $clonename );
  }

  if ( $test ) {
	foreach ( sort keys %$cdna_lib ) {
	  print "$_ => @{$cdna_lib->{$_}}\n";
	}
	die;
  }

  open($fh, "$cons_file") or die $!;

  my ($fasta, $cdna, $lib);
  my $cdna_fasta = {};

  while (<$fh> ) {

	# >XTropTFL19c08.p1kaSP6 FIN.0.1
	# >XTropTFL20d02.q2kAh FIN.0.1

	if ( $_ =~ /^>(XTropTFL.+)\..+\s.+/ ) {
	  $cdna = $1;
	  $lib = $cdna_lib->{$cdna}->[0];
	  my $clonename = $cdna_lib->{$cdna}->[1];
	
	  my $header = ">$clonename $lib\n";
	  push(@{$cdna_fasta->{$lib}->{$cdna}}, $header);
	  #print $header;
	} else {
	  push(@{$cdna_fasta->{$lib}->{$cdna}}, $_);
	}
  }

  $cons_file =~ /(.+)\.(.+)/;
  my $plate    = $1;
  my $cons_ver = $2;
  open(my $FL, ">>$file_list") or die $!;

  foreach my $lib ( keys %$cdna_fasta ) {
	system("mkdir -p $plate/$lib");
	open(my $fh, ">>$plate/$lib/$cons_ver");
	
	print $FL "Location of $lib $new_load_fldr/$plate/$lib/$cons_ver\n";

	foreach my $cdna ( keys %{$cdna_fasta->{$lib}} ) {
	  print $fh @{$cdna_fasta->{$lib}->{$cdna}};
	}
	close $fh;
  }
}

#	1.    EXTRACTING FASTA

if ( $ARGV[0] == 1 ){

  print STDOUT "1.    EXTRACTING FASTA\n\n";

  $cwd = "$pipe_base/sanger";
  $s = system("$cwd/extract_fasta_from_finished_directories --dir_file=$file_list --use_library --output_file=$all_fasta");
  check_status($s);
}

#	2.   LOADING CLONES

#        this step did not store sanger_id info: see create_new_Clone()

if ( $ARGV[0] == 2 ){
  print STDOUT "2.   LOADING CLONES\n\n";

  $cwd = "$pipe_base/scripts";
  $s = system("perl $cwd/load_cdna_clones_from_fasta --db_conf=$cdna_db_conf_pipe --fasta_file=$all_fasta --taxon_id=$taxon_id");


 #$s = system("$cwd/test_sanger_id --db_conf=$cdna_db_conf_pipe --fasta_file=$all_fasta --taxon_id=$taxon_id");
  check_status($s);
}

#	3.   SETUP BLASTS

#   Run on ecs4

if ( $ARGV[0] == 3 ){
  print STDOUT "3.   SETUP BLASTS\n\n";
# my $cdna_db_conf_pipe = "/ecs4/work5/finished/production/cdna_est/conf/cdna_test.conf";

  $cwd = "$pipe_base/scripts";
  # blast_db is the value of external_db.dbname
  warn "scriptdir: $cwd\n";
  # do incremental BLAST only
  $s = system("$cwd/setup_cDNA_DB_BLAST --db_conf=$cdna_db_conf_pipe --all_libs --search_conf_name='WuBLASTX_uniprot' --incremental");

  # do full BLAST
  #$s = system("$cwd/setup_cDNA_DB_BLAST --db_conf=$cdna_db_conf_pipe --all_libs --search_conf_name='WuBLASTX_uniprot' --search_description=\"Translated (WuBLASTX) search of Clones against UNIPROT\" --blast_db=uniprot --blast_type=wublastx --search_type=Clone");

  check_status($s);
}

#	4.   SUBMIT BLASTS

#        Run on ecs4

#        known oddity: when the run_cDNA_DB_WuBLAST script is called to calculate percent id
#        it uses the BPLite module. Different versions of this module calculates
#        the percent id differently and so the $percent_scale_factor in this script has
#        to be adjusted if the log file complains that percent id > 100%.

if ( $ARGV[0] == 4 ){

  print STDOUT "4.   SUBMIT BLASTS\n\n";

 # my $blast_db_conf = "/ecs4/work5/finished/production/cdna_est/conf/cdna_test.conf";
  $cwd = "$pipe_base/scripts";
  $s = system("$cwd/submit_cDNA_DB_jobs --db_conf=$blast_db_conf --search_conf_name=WuBLASTX_uniprot --host_type=bc_hosts");
  #$s = system("$cwd/submit_cDNA_DB_jobs --db_conf=$blast_db_conf --search_conf_name=WuBLASTX_uniprot --host_type=bc_hosts --lsf_queue=hugemem");
  check_status($s);
}

#	5.   LOAD_ESTS

if ( $ARGV[0] == 5 ){
  print STDOUT "5.   LOAD_ESTS\n\n";

  $cwd = "$pipe_base/sanger";

  # to run on esc4
  $s = system("$cwd/copy_EST_DB_to_cDNA_DB --clone_fasta=$all_fasta --est_db_conf=$est_db_conf --cdna_db_conf=$cdna_db_conf_pipe");

  # to run on cbi1 (due to a library for GD.pm is out of date on ecs4)
  #$s = system("perl $base/cdna_db/sanger/copy_EST_DB_to_cDNA_DB --clone_fasta=$all_fasta --est_db_conf=$est_db_conf --cdna_db_conf=$cdna_db_cbi1_conf");

  check_status($s);
}

#	6.   CHECK CLONE IDENTITY

#        (not run on ecs4 as it failes to find Bio/SimpleAlign.pm
#        temporarily put bioperl-1.2 before 0.7.2)
#        checks clones marked as 'unchecked' in clone.identity_correct

if ( $ARGV[0] == 6 ){
  print STDOUT "6.   CHECK CLONE IDENTITY\n\n";


  #Checking the newly-loaded clones

  #  $cwd = "$pipe_base/scripts"; # ecs4
  $cwd = "$base/cdna_db/scripts"; # cbi1

 # check_status($s);
  #$s = system("perl $cwd/check_clone_identity --db_conf=$cdna_db_cbi1_conf --all_unconfirmed");

  # test
  # $s = system("perl $cwd/check_clone_identity --db_conf=$cdna_db_cbi1_conf --clone_name=TEgg011j04");
  # $s = system("perl $cwd/check_clone_identity --db_conf=$cdna_db_cbi1_conf --clone_id=4097");
  # $s = system("perl $cwd/check_clone_identity --db_conf=$cdna_db_cbi1_conf --clone_id=5891");
  # $s = system("perl $cwd/check_clone_identity --db_conf=$cdna_db_cbi1_conf --clone_id=7255");

  # for debugging/testing
  #$s = system("perl $cwd/check_clone_identity --db_conf=$cdna_db_cbi1_conf --all_unconfirmed --output_aligns --debug");
  $s = system("perl $cwd/check_clone_identity --db_conf=$cdna_db_cbi1_conf --all_unconfirmed --test");
  
  check_status($s);
}

#	7.   CHECK CLONE FRAMESHIFTS

#        run on ecs4
#        checks clones marked as 'unchecked' in clone.frame_shift

if ( $ARGV[0] == 7 ){
   print STDOUT "7.   CHECK CLONE FRAMESHIFTS\n\n";
   $cwd = "$pipe_base/scripts";
   $s = system("perl $cwd/check_clone_frameshifts --db_conf=$cdna_db_conf_pipe --search_conf_name=WuBLASTX_uniprot");
   check_status($s);
}

#	8.   BACKED UP

if ( $ARGV[0] == 8 ){
  print STDOUT "8.   BACKED UP\n\n";
  print STDOUT "Your need to\n";
  printf STDOUT ("%s\n%s\n%s\n", "(1) Create directory 'mkdir $cdna_db_dump_dir'", "(2) chmod -R 777 $cdna_db_dump_dir",
				 "(3) Run mysqldump -uottroot -pxxx -hotterpipe2 -P3323 --tab=$cdna_db_dump_dir/ --fields-terminated-by='\t' $cdna_db");
}

if ( $ARGV[0] == 81 ){
  print STDOUT "8.   BACKED UP\n\nCommand successful\n\n";
}


#	9.   UPDATE_CLONES_CURRENT_VERSION

#   This does not change submission_status, ie,
#   before submission the status of all new clones is always "created"
#   After running this script the current_version value will be changed from "unchecked" to 
#   "yes" or "no" based on identity_correct and frame_shift columns

if ( $ARGV[0] == 9 ){
  print STDOUT "9.   UPDATE_CLONES_CURRENT_VERSION\n\n";
  $cwd = "$pipe_base/submissions";
  $s = system("perl $cwd/update_clones_current_version --db_conf=$cdna_db_conf_pipe --taxon_id=$taxon_id");
  check_status($s);
}

#	10.   SUBMIT_AND_WITHDRAW_CLONES

#         Note: clones with submission_status='withdrawing' need to be withdrawn
#               by contacting the EMBL staff at EBI.
#               Once withdrawn, their submission_status need to be set
#               to 'withdrawn' in clone table otherwise submit_and_withdraw_clones script will exit

#               If accepted clone needed to be withdrawn, set manual_kill value to "yes"
#               and the script will not submit it:
#                accepted  ->check manual kill = 'no' may need to withdraw EMBL entry



if ( $ARGV[0] == 10 ){
  print STDOUT "10.   SUBMIT_AND_WITHDRAW_CLONES\n\n";
  $cwd = "$pipe_base/submissions";
  $s = system("perl $cwd/submit_and_withdraw_clones --db_conf=$cdna_db_conf_pipe --taxon_id=$taxon_id --do_withdraws");
  #$s = system("perl $cwd/test_submit --db_conf=$cdna_db_conf_pipe --taxon_id=$taxon_id --do_withdraws");
  check_status($s);
}

=head2 SUBMIT_AND_WITHDRAW_CLONES

select submission_status, count(*) from clone group by submission_status;
+-------------------+----------+
| submission_status | count(*) |
+-------------------+----------+
| created           |      303 |
| accepted          |     3404 |
| mothballed        |      711 |
| obsolete          |       58 |
+-------------------+----------+

There should be no submitted clones at this point.

=cut
#------------------------------------
#       PRE submission step
#------------------------------------

#	11.   UPDATE CLONES FROM EMBL

#           This does the sanger_id -> acc mapping
#           run ONLY on humsrv1 as this host is allowed to go through the EBI firewall
#           and connects to ORACLE database for updating clone info.
#           Needs username and password for ORACLE (.netrc mode 600)

if ( $ARGV[0] == 11 ){

  print STDOUT "11.   UPDATE CLONES FROM EMBL\n\n";
  $cwd = "$base/cdna_db/submissions";
  $s = system("$cwd/update_clones_from_EMBL --db_conf=$cdna_db_cbi1_conf");
  print STDOUT "\n";
  check_status($s);
}

#	11.   MAKE EMBL FLATFILE

if ( $ARGV[0] == 111 ){

  print STDOUT "11.1   MAKE EMBL FLATFILE\n\n";
  $cwd = "$pipe_base/submissions";
  $s = system("$cwd/make_embl_flatfile --db_conf=$cdna_db_conf_pipe --taxon_id=$taxon_id > $embl_file");
  print STDOUT "Created EMBL flatfile: $embl_file\n\n";
  my $count = `grep -c '^ID' $embl_file`;
  chomp $count;
  print STDOUT "$count sequences to submit\n\n";

  check_status($s);
}


#	12.   SUBMIT

#         run ONLY on humsrv1

if ( $ARGV[0] == 12 ){
  print STDOUT "12.   SUBMIT TO EMBL\n\n";

  $cwd = "$base/cdna_db/submissions";
  $s = system("$cwd/submit_xenopus_ests $embl_file");
  check_status($s);

  #grep -c 'Finished' datalib_xtrop_cdna_07_12_04.txt
}

#------------------------------------------------------
#  POST submission steps:
#
#       proceed AFTER receiving feedback from EMBL
#------------------------------------------------------

#	13.   UPDATE CLONES FROM EMBL

#         run only on humsrv1 as this host is allowed to go through the EBI firewall
#         and connects to ORACLE database for updating clone info
#         needs username and password for ORACLE (.netrc)

if ( $ARGV[0] == 13 ){
  print STDOUT "13.   UPDATE CLONES FROM EMBL\n\n";
  $cwd = "$base/cdna_db/submissions";
  $s = system("$cwd/update_clones_from_EMBL --db_conf=$cdna_db_cbi1_conf");
  check_status($s);
}

#	14.   DUMPING CLONES

#         Dump all accepted clones to FASTA with acc.ver format.
#         If the current version of a clone is not accepted but a previous version,
#         dump the previous vesion.


if ( $ARGV[0] == 14 ){
  print STDOUT "14.   DUMPING CLONES\n\n";

  $cwd = "$pipe_base/scripts/utils";
  $s = system("perl $cwd/dump_clones --db_conf=$cdna_db_conf --taxon_id=$taxon_id -accepted --output_file=$accepted_accs");
  check_status($s);

  if ( $s == 0 ){
	my $num = `grep -c \"^>\" $accepted_accs`;
	chomp $num;
	print "Accepted clones dumped to $accepted_accs\nFound $num accepted clones\n";
  }

  $s = system("perl $cwd/dump_clones --db_conf=$cdna_db_conf --taxon_id=$taxon_id -all --output_file=$all_cDNA_fasta");
  check_status($s);

  if ( $s == 0 ){
	my $num = `grep -c \"^>\" $all_cDNA_fasta`;
	chomp $num;
	print "All clones dumped to $all_cDNA_fasta\nFound total: $num clones\n";
  }
}


#	15. ARCHIVING AND UPDATING FTP DIR

#   run on ecs4 


if ( $ARGV[0] == 15 ){
	print STDERR "15.   UPDATE FTP DIR AND ARCHIVING\n";

	my $ftp_root = "/nfs/disk69/ftp/pub3/EST_data/Xenopus/";
	my $ftp_live = $ftp_root."FINISHED_cDNAs/";

	# make archive dir

	my $last_release_date = `ls $ftp_live/accepted_X_tropicalis_cDNAs*`;
	$last_release_date =~ /(\d+_\d+_\d+)/;
	$last_release_date = $1;
	my $ftp_archive = $ftp_root."archive/Release_${last_release_date}_Finished_cDNA";

	system("mkdir $ftp_archive");

	# update FTP dir

	chdir $ftp_live;

	my $chksum;
	foreach my $file ( $accepted_accs, $all_cDNA_fasta ){

	  print "Copying $file . . .\n";
	
	  system("cp $file .");
	  my $copied = `basename $file`;
	  chomp $copied;

	  my $chk = system("diff $file $copied");
	  die "File copying error\n" if $chk != 0;

	  # gzip and md5sum for users
	  $chk = system("/bin/gzip $copied");
	  die "Failed to zip $copied\n" if $chk != 0;

	  my $zip = $copied.".gz";

	  my $md5sum_accepted_ftp_zip  = `/usr/local/ensembl/bin/md5sum $zip`;
	  $chksum .= $md5sum_accepted_ftp_zip;
	}

	my $chsumfile = "md5sum_".$release_date;
	open(my $fh, ">$chsumfile" ) or die "Failed to create md5sum file\n";
	printf $fh $chksum;


	# move old data into archive dir
	
	if ( -d $ftp_archive ){
	  system("mv *$last_release_date* $ftp_archive");
	}	
	
}

#	15. WRITE RELEASE LETTER

#   Create the file and store as /nfs/disk69/ftp/pub3/EST_data/Xenopus/FINISHED_cDNAs/Release_letter_yyyy_mm_dd.
#   (See template below)


#	16. ANNOUNCE RELEASE

#   Once the FTP has been refreshed with new data, run the script to announce release:

if ( $ARGV[0] == 16 ){
	print STDOUT "16.   ANNOUNCE RELEASE\n";
	$s = system("/nfs/team71/analysis/ck1/bin/xenopus/announce_tropicalis_cDNA_release -new $release_date -old $last_rel_date -test");
	check_status($s);
}


sub check_status {
  shift == 0 ? print STDOUT "Command successful\n\n" : print STDOUT "command failed\n\n";
}


__END__

                            ----------------------
                            Sample release letter:
                            ----------------------

                            Release date: 2005_11_21

The Sanger Xenopus tropicalis EST/cDNA project are pleased to announce the
public availability of an enlarged set of X. tropicalis cDNA sequences finished
at the Sanger Institute.

In this release cDNAs from 2 additional Libraries were added:
'THdA' (dissected heads from tailbud embryos) and 'TTbA' (tailbud embryos).


Data are downloadable from:
ftp://ftp.sanger.ac.uk/pub/EST_data/Xenopus/FINISHED_cDNAs

File        : accepted_X_tropicalis_cDNAs_2005_11_21.fasta.gz
Contents    : 5191 cDNA sequences
Increase    : 106 added to the 2005-11-21 release

The 5191 cDNA  seqs that passed quality control (QC), and accepted by EMBL
should also be available from EMBL/GenBank.

In the file, '>' header lines have the format: '>clone_name accession.version'

And also:

File        : all_X_tropicalis_cDNAs_2005_10_11.fasta.gz
Contents    : 6121 cDNA sequences
Increase    : 79 seqs added to the 2005-10-11 release

All cDNA sequences finished to date, including the unsubmitted sequences,
that did not pass QC: 6121

In the file reason(s) for failure are indicated after the clone_name on '>'
header lines. Firstly 'unsubmitted' appears in the place of the
accession.version, followed by 'unidentified' and/or 'frameshifted'
For sequences not assigned an EMBL version the ">clone_name accession.version" format
becomes ">clone_name accession".


Best regards

Chao-Kung Chen (Sanger Institute: ck1@sanger.ac.uk)

On behalf of the submitting authors:

Amaya E., Harrow J.L., Bonfield J.K., Chen, C-K., Davies R.M.,
Francis M.D., Garrett N., Gilchrist M.J., Grafham D.V., McLaren, S.,
Papalopulu N., Rogers J., Smith J.C., Taylor R.G., Voigt J., Zorn A.M.



# FINALLY use ~ck1/bin/announce_tropicalis_cDNA_release script to send out release notice email


--------------------------------------------
Mailing list (contains estdb mailing list *)
--------------------------------------------
Blumberg@uci.edu,
EALindquist@lbl.gov,
aaron.zorn@chmcc.org,
christophe.klopp@toulouse.inra.fr,
ck1@sanger.ac.uk,
dg1@sanger.ac.uk,
ea3@mole.bio.cam.ac.uk,
ealindquist@lbl.gov,
gerhardd@mail.nih.gov,
jgrg@sanger.ac.uk,
jim@gurdon.cam.ac.uk,
jkb@sanger.ac.uk,
jla1@sanger.ac.uk,
jrh@sanger.ac.uk,
kj2@sanger.ac.uk,
m.gilchrist@gurdon.cam.ac.uk,
mf1@sanger.ac.uk,
np209@cam.ac.uk,
np209@mole.bio.cam.ac.uk,
pbbrokstein@lbl.gov
rgt@sanger.ac.uk,
rmd@sanger.ac.uk,
simon.hubbard@umist.ac.uk,
th@sanger.ac.uk,
wagner@ncbi.nlm.nih.gov,
jmdw@sanger.ac.uk


---------------------
* estdb mailing list:
---------------------
aaron.zorn@chmcc.org
christophe.klopp@toulouse.inra.fr
ck1@sanger.ac.uk
ea3@mole.bio.cam.ac.uk
ealindquist@lbl.gov
jgrg@sanger.ac.uk
jim@welc.cam.ac.uk
jla1@sanger.ac.uk
jrh@sanger.ac.uk
mdr@sanger.ac.uk
mf1@sanger.ac.uk
mike.gilchrist@welc.cam.ac.uk
np209@mole.bio.cam.ac.uk
paul.e.boardman@umist.ac.uk
pbbrokstein@lbl.gov
simon.hubbard@umist.ac.uk
th@sanger.ac.u
