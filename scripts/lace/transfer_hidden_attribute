#!/usr/local/bin/perl -w

# Transfer the hidden attribute from one dataset to another (from 'old_human' to 'new_human')
# Note they are datasets, not database names. Both have to be available on the same server.

# NB: 'hidden' in the old schema may be transferred as 'hidden' or as 'not write_access' in the new schema.
# If you run it twice (with --code=hidden first and then with --code=write_access), one feature
# transforms into two.

# This is also an example script that accesses both old and new schema databases:
# it does the first via Client-Server calls and the second via the adaptors.
# Hence the change in the path:

BEGIN {
    foreach my $path (@INC) {
        unless( $path=~s{ensembl/modules}{ensembl_head/modules}g ) {
            $path=~s{ensembl_head/modules}{ensembl/modules}g;
        };
    }
}

use strict;
use Bio::Otter::Lace::Defaults;
use Bio::EnsEMBL::Attribute;

{
    my $old_dsname  = 'os_mouse';
    my $new_dsname  = 'ns_mouse';
    my $code_wanted = 'hidden';
    my $change      = 0; # dry run

    Bio::Otter::Lace::Defaults::do_getopt(
        'old_dataset=s' => \$old_dsname,
        'new_dataset=s' => \$new_dsname,
        'code=s'        => \$code_wanted,
        'change!'       => \$change,
    );

    my ($name_wanted, $inverted) = @{ {
        'hidden'       => [ 'Hidden Sequence Set', 0 ],
        'write_access' => [ 'Write access for Sequence Set', 1],
    }->{$code_wanted} };
    
    # Client communicates with otter HTTP server
    my $cl = Bio::Otter::Lace::Defaults::make_Client();

    # DataSet interacts directly with an otter database
    my $old_ds = $cl->get_DataSet_by_name($old_dsname);
    my $new_ds = $cl->get_DataSet_by_name($new_dsname);

    # Sanity check:
    if($old_ds->HEADCODE()) {
        print STDERR "Old dataset must be based on schema-19\n";
        exit(1);
    }
    if(!$new_ds->HEADCODE()) {
        print STDERR "New dataset must be based on schema-20+\n";
        exit(2);
    }
    
    my $sequence_sets = $cl->get_all_SequenceSets_for_DataSet( $old_ds );

    my %hidden = ();
    for my $ss (@$sequence_sets) {
        if($ss->is_hidden) {
            $hidden{$ss->name} = 1;
        }
    }

    my $loutre_dba  = $new_ds->get_cached_DBAdaptor;

    my $slice_adaptor     = $loutre_dba->get_SliceAdaptor();
    my $attribute_adaptor = $loutre_dba->get_AttributeAdaptor();

    foreach my $ss_slice (@{$slice_adaptor->fetch_all('chromosome', 'Otter')}) {
        my $ss_name = $ss_slice->seq_region_name();

        my $new_value = ($hidden{$ss_name} xor $inverted) ? 1 : 0;
        my $found_correct = 0;

        for my $attrib (@{ $attribute_adaptor->fetch_all_by_Slice( $ss_slice ) }) {
            my ($code, $value) = ($attrib->code(), $attrib->value());

            if($code eq $code_wanted) {
                if($new_value eq $value) {
                    print STDERR "Existing $code value '$value' is correct\n";
                    $found_correct = 1;
                } else {
                    if($change) {
                        print STDERR "Removing the old '$code_wanted' attribute from $ss_name\n";
                        $attribute_adaptor->remove_from_Slice($ss_slice, $attribute_adaptor->_store_type($attrib) );
                    } else {
                        print STDERR "[pretending to be] Removing the '$code_wanted' attribute from $ss_name\n";
                    }
                }
            }
        }

        unless($found_correct) {
            if($change) {
                print STDERR "Adding the new '$code_wanted'='$new_value' attribute to $ss_name\n";
                my $attribute = Bio::EnsEMBL::Attribute->new(
                    -CODE  => $code_wanted,
                    -NAME  => $name_wanted,
                    -VALUE => $new_value,
                );
                $attribute_adaptor->store_on_Slice($ss_slice, [ $attribute ]);
            } else {
                print STDERR "[pretending to be] Adding the new '$code_wanted'='$new_value' attribute to $ss_name\n";
            }
        }
    }
}

