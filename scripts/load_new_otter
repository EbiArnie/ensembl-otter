#!/usr/local/bin/perl -w

=head1 DESCRIPTION

load_new_otter -dataset xxx -file filename 

=head1 OPTIONS

-dataset somedatasetname

-file input mixed format file( otter xml+text) file to be parsed

=cut

use strict;
use Bio::Vega::Transform::Otter;
use Bio::Vega::DBSQL::DBAdaptor;
use Bio::EnsEMBL::Utils::Exception qw ( throw warning );
use Getopt::Long;

my $dbhost;
my $dbport;
my $dbname;
my $dbuser;
my $dbpass;
my $help;
my $file;
$|=1;
&GetOptions(
				'dbhost=s'   => \$dbhost,
				'dbport=n'   => \$dbport,
				'dbname=s'   => \$dbname,
				'dbuser=s'   => \$dbuser,
				'dbpass=s'   => \$dbpass,
				'h|help'     => \$help,
				'file=s'  => \$file,
			  ) or ($help = 1);


if ($help || !defined ($dbhost) || !defined($dbport) || !defined($dbname) || !defined($dbuser) || !defined($dbpass) ||!defined($file)) {
  exec('perldoc', $0);
}

##create a db handle
my $db = Bio::Vega::DBSQL::DBAdaptor->new(
														-dbname => $dbname,
														-host   => $dbhost,
														-user   => $dbuser,
														-port   => $dbport,
														-pass   => $dbpass,
													  );



###start working with the actual dump file

my $dbid;
my $ss_hash;

##open mixed format input file
$/="----------------------------------------\n";
open (IN,"<$file") || throw ("Could not open file for reading :$file \n $!\n");
while (<IN>){
  my $gene_xml=$_;
  eval{
	 $db->begin_work;
	 my $sa=$db->get_SliceAdaptor();
	 my $gene_adaptor=$db->get_GeneAdaptor;
	 chomp $gene_xml;
	 if ($gene_xml=~/^\S+\s+(\S+)\s+(\S+)\s+(\S+)\s+(<locus>.*<\/locus>).*/ms){
		
		my $ss=$1;
		$dbid=$2;
		my $modified=$3;
		$gene_xml=$4;
		unless ($ss_hash->{$ss}){
		  $ss_hash->{$ss}=$sa->fetch_by_region('chromosome',$ss,undef,undef,undef,'Otter');
		}
		my $slice=$ss_hash->{$ss};
		unless ($slice) {
		  throw "slice for $ss is not in db";
		}
		##create a parser 
		my $parser = Bio::Vega::Transform::Otter->new;
		$parser->set_ChromosomeSlice($slice);
		$parser->parse($gene_xml,'latin1');
		my $genes=$parser->get_Genes;
		my $gene=$genes->[0];
		my $gene_count=@$genes;
		if ($gene_count > 1 || $gene_count == 0) {
		  throw ("parser has returned more than one gene or no gene , gene count is :$gene_count for geneid : $dbid");
		}
		$gene->is_current(1);
		$gene->created_date($modified);
		$gene->modified_date($modified);
		my $transcripts=$gene->get_all_Transcripts;
		foreach my $tran(@$transcripts){
		  $tran->created_date($modified);
		  $tran->modified_date($modified);
		  if ($tran->translation){
			 $tran->translation->created_date($modified);
			 $tran->translation->modified_date($modified);
		  }
		  foreach my $exon(@{$tran->get_all_Exons}){
			 $exon->created_date($modified);
			 $exon->modified_date($modified);
		  }
		}
		$gene_adaptor->store($gene,'chr_whole_slice');
		print STDOUT ("stored old gene dbid:$dbid as new gene dbid:".$gene->dbID." and the curent version is:".$gene->stable_id.".".$gene->version. "\n");
		if ($gene->biotype =~ /obsolete/){
		  $gene_adaptor->update_deleted_gene_status($gene);
		  print STDOUT ("The above gene ".$gene->dbID." was deleted in new db\n");
		}
		$db->commit;
		$parser->DESTROY;
	 }
  };
  if ($@) {
	 $db->rollback;
	 print STDERR ("\ngene $dbid did not get loaded due to \n" .$@);
  }
}



close IN;




1;

