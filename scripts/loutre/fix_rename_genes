#!/usr/bin/env perl

use strict;
use warnings;

use Sys::Hostname;
use Try::Tiny;
use YAML 'Dump';

use Bio::Otter::Lace::Defaults;
use Bio::Vega::ContigLockBroker;
use Bio::Vega::Author;

sub main {
    $| = 1;
    my ($dataset_name, $author, $limit);
    my ($dry, $tsct_insist) = (0) x 2;

    my $old_re = '^TMP:';
    my $re_subst = 'TMP-';

    my $usage = sub { exec('perldoc', $0) };
    # This do_getopt() call is needed to parse the otter config files
    # even if you aren't giving any arguments on the command line.
    Bio::Otter::Lace::Defaults::do_getopt(
        'h|help!'       => $usage,
        'n|dry_run|dry!'=> \$dry,
        'a|author=s'    => \$author,
        'T|transcript_insist!' => \$tsct_insist,
        'M|match=s'     => \$old_re,
        'S|subst=s'     => \$re_subst,
        'dataset=s'     => \$dataset_name,
        'L|limit=s'     => \$limit,
        ) or $usage->();
    $usage->() unless $dataset_name && (defined $author || $dry);
    
    # Client communicates with otter HTTP server
    my $cl = Bio::Otter::Lace::Defaults::make_Client();
    
    # DataSet interacts directly with an otter database
    my $ds = $cl->get_DataSet_by_name($dataset_name);
    
    my $otter_dba = $ds->get_cached_DBAdaptor;

    my $gene_adaptor  = $otter_dba->get_GeneAdaptor;
    my $contig_broker = Bio::Vega::ContigLockBroker->new(-hostname => hostname);
    my $author_obj    = Bio::Vega::Author->new(-name => $author, -email => $author);

    $limit = digest_limit($limit) if defined $limit;

    my $gene_sth = $otter_dba->dbc->prepare(q{
        SELECT g.gene_id, ga.value, g.source, r.name
        FROM gene g
          join seq_region r using (seq_region_id)
          , gene_attrib ga
        WHERE g.gene_id = ga.gene_id
          AND g.is_current = 1
          AND ga.attrib_type_id = 4
          AND ga.value rlike ?}
    );

    my $update_gene = $otter_dba->dbc->prepare(q{
        UPDATE gene SET source = 'havana' WHERE gene_id = ?
    });
    my $update_gene_name = $otter_dba->dbc->prepare(q{
        UPDATE gene_attrib SET value = ? WHERE attrib_type_id = 4 AND gene_id = ?
    });
    my $update_tsct_name = $otter_dba->dbc->prepare(q{
        UPDATE transcript_attrib SET value = ? WHERE attrib_type_id = 4 AND transcript_id = ?
    });

    my $tsct_sth = $otter_dba->dbc->prepare(q{
        SELECT t.transcript_id, ta.value
        FROM transcript t
          , transcript_attrib ta
        WHERE t.transcript_id = ta.transcript_id
          AND t.is_current = 1
          AND ta.attrib_type_id = 4
          AND t.gene_id = ?
        }
    );
    
    $otter_dba->begin_work;

    my %count;
    $gene_sth->execute($old_re);
  GENE: while (my @g_row = $gene_sth->fetchrow) {
        my ($gene_id, $gene_name, undef, $gene_chr) = @g_row;
        my $new_gene_name = $gene_name;
        $new_gene_name =~ s/$old_re/$re_subst/ or die "Unexpected gene name format: '$gene_name'";
        printf "GENE: %-6s %-20s source=%s sr=%s", @g_row;

        my $gene = $gene_adaptor->fetch_by_dbID($gene_id);
        my $outside = outside_limit($limit, $gene);
        if ($outside) {
            printf "\t!! outside: %s\n", $outside;
            $count{"skip_$outside"}++;
            next GENE;
        }

        my $next_GENE;
        try {
            $contig_broker->lock_by_object($gene, $author_obj) unless $dry;
        } catch {
            warn "Skip - Cannot lock for gene $gene_id: $_\n";
            print "\t!! lock busy\n";
            $count{skip_because_locked} ++;
            $next_GENE = 1;
        };
        next GENE if $next_GENE;

        printf "\t=> %s\n", $new_gene_name;

        if ($dry) {
            $count{dry_gene}++;
        } else {
            $update_gene->execute($gene_id);
            $update_gene_name->execute($new_gene_name, $gene_id);
            $count{renamed_gene} ++;
        }

        $tsct_sth->execute($gene_id);
        while (my ($tsct_id, $tsct_name) = $tsct_sth->fetchrow) {
            print "  TSTC: $tsct_id\t$tsct_name\n";
            my $new_tsct_name = $tsct_name;
            unless ($new_tsct_name =~ s/$old_re/$re_subst/) {
                die "Unexpected name format: '$tsct_name'" if $tsct_insist;
                $count{skipped_transcript} ++;
                next;
            }
            if ($dry) {
                $count{dry_transcript}++;
            } else {
                $update_tsct_name->execute($new_tsct_name, $tsct_id);
                $count{renamed_transcript} ++;
            }
        }

        try {
            $contig_broker->remove_by_object($gene, $author_obj) unless $dry;
        } catch {
            $count{unlock_fail}++;
            warn "Unlock failed!  $_\n".
              "  Switching to dry-run mode, to ease the cleanup";
            $dry = 1;
        }
    }

    $otter_dba->commit;

    print Dump({ counts => \%count });
}


sub outside_limit {
    my ($limit, $G) = @_;
    return 0 unless defined $limit;
    return 'chr'    unless $$limit{chr}   eq $G->seq_region_name;
    return 'before' unless $$limit{start} <= $G->seq_region_start;
    return 'after'  unless $$limit{end}   >= $G->seq_region_end;
    return 0;
}

sub digest_limit {
    my ($txt) = @_;
    my %lim;
    my $parts = @lim{qw{ chr start end }} = split /:/, $txt;
    die "Expected chr1-23:2345:45678 style for limit, got $txt" unless 3 == $parts;
    return \%lim;
}


main();





__END__

=head1 NAME

fix_rename_genes - name =~ s/// genes and transcripts and reset gene.source

=head1 EXAMPLE

 scripts/loutre/fix_rename_genes -dataset pig -n -a mca \
  -M TMP- -S DUROC- -L chr7-04:25275605:29807435 > report.txt

=head1 DESCRIPTION

Do C<s/^TMP:/TMP-/> on gene and transcript names, and fix C<gene.source>.

=head2 Used for

Probably in L<https://rt.sanger.ac.uk/Ticket/Display.html?id=204852>,
by title timing & updater.

The C<TMP:> prefix may have come from
F<ensembl-pipeline/scripts/Finished/assembly/transfer_annotation.pl>
with C<-haplotype> option, but today's version of that doesn't put the
prefix on transcript names...?

=head1 OPTIONS

=over 4

=item -n | --dry

Dry run.  Make no UPDATEs.

=item -a | --author <user>

For non-dry runs, this user does the locking.

=item -T | --transcript_insist

Insist that transcripts also be renamed the same way.

(New) default is to allow transcripts to lack the prefix, and then not
be UPDATEd.

=item -M | --match <pattern>

Default is C<^TMP:>

Must be suitable for use both as a Perl regexp and with database
C<RLIKE>.

=item -S | --subst <txt>

Default C<TMP->

String to substitute for the match, for gene and transcript names.

=back

=head1 AUTHOR

James Gilbert B<email> jgrg@sanger.ac.uk

