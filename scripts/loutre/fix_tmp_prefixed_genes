#!/usr/bin/env perl

### fix_tmp_prefixed_genes

use strict;
use warnings;

use Bio::Otter::Lace::Defaults;

{
    my $dataset_name = 'pig';
    my $dry = 0;

    my $usage = sub { exec('perldoc', $0) };
    # This do_getopt() call is needed to parse the otter config files
    # even if you aren't giving any arguments on the command line.
    Bio::Otter::Lace::Defaults::do_getopt(
        'h|help!'       => $usage,
        'n|dry_run|dry!'=> \$dry,
        'dataset=s'     => \$dataset_name,
        ) or $usage->();
    $usage->() unless $dataset_name;
    
    my $old_re = '^TMP:';
    my $re_subst = 'TMP-';

    # Client communicates with otter HTTP server
    my $cl = Bio::Otter::Lace::Defaults::make_Client();
    
    # DataSet interacts directly with an otter database
    my $ds = $cl->get_DataSet_by_name($dataset_name);
    
    my $otter_dba = $ds->get_cached_DBAdaptor;
    
    my $gene_sth = $otter_dba->dbc->prepare(q{
        SELECT g.gene_id, ga.value
        FROM gene g
          , gene_attrib ga
        WHERE g.gene_id = ga.gene_id
          AND g.is_current = 1
          AND ga.attrib_type_id = 4
          AND ga.value rlike ?}
    );

    my $update_gene = $otter_dba->dbc->prepare(q{
        UPDATE gene SET source = 'havana' WHERE gene_id = ?
    });
    my $update_gene_name = $otter_dba->dbc->prepare(q{
        UPDATE gene_attrib SET value = ? WHERE attrib_type_id = 4 AND gene_id = ?
    });
    my $update_tsct_name = $otter_dba->dbc->prepare(q{
        UPDATE transcript_attrib SET value = ? WHERE attrib_type_id = 4 AND transcript_id = ?
    });

    my $tsct_sth = $otter_dba->dbc->prepare(q{
        SELECT t.transcript_id, ta.value
        FROM transcript t
          , transcript_attrib ta
        WHERE t.transcript_id = ta.transcript_id
          AND ta.attrib_type_id = 4
          AND t.gene_id = ?
        }
    );
    
    $otter_dba->begin_work;

    $gene_sth->execute($old_re);
    while (my ($gene_id, $gene_name) = $gene_sth->fetchrow) {
        print STDERR "GENE: $gene_id\t$gene_name\n";

        my $new_gene_name = $gene_name;
        $new_gene_name =~ s/$old_re/$re_subst/ or die "Unexpected name format: '$gene_name'";

        unless ($dry) {
            $update_gene->execute($gene_id);
            $update_gene_name->execute($new_gene_name, $gene_id);
        }

        $tsct_sth->execute($gene_id);
        while (my ($tsct_id, $tsct_name) = $tsct_sth->fetchrow) {
            print "  TSTC: $tsct_id\t$tsct_name\n";
            my $new_tsct_name = $tsct_name;
            $new_tsct_name =~ s/$old_re/$re_subst/ or die "Unexpected name format: '$tsct_name'";
            unless ($dry) {
                $update_tsct_name->execute($new_tsct_name, $tsct_id);
            }
        }
    }
    
    $otter_dba->commit;
}







__END__

=head1 NAME - fix_tmp_prefixed_genes

=head1 DESCRIPTION

Do C<s/^TMP:/TMP-/> on gene and transcript names, and fix C<gene.source>.

=head2 Used for

Probably in L<https://rt.sanger.ac.uk/Ticket/Display.html?id=204852>,
by title timing & updater.

The C<TMP:> prefix may have come from
F<ensembl-pipeline/scripts/Finished/assembly/transfer_annotation.pl>
with C<-haplotype> option, but today's version of that doesn't put the
prefix on transcript names...?

=head1 AUTHOR

James Gilbert B<email> jgrg@sanger.ac.uk

