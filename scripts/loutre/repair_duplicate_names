#!/usr/bin/env perl

# Eliminate repetitions in new schema gene names (attributes)

use strict;
use warnings;
use Sys::Hostname;
use Bio::Vega::Author;
use Bio::Vega::ContigLockBroker;
use Bio::Otter::Lace::Defaults;
use Bio::EnsEMBL::Utils::Exception qw(warning);

{
    my $dsname   = '';
    my $notsets  = '';
    my $onlysets = '';
    my $change   = 0;    # dry run

    Bio::Otter::Lace::Defaults::do_getopt(
        'dataset=s'  => \$dsname,
        'notsets=s'  => \$notsets,
        'onlysets=s' => \$onlysets,
        'change!'    => \$change,
    );

    my @not_sets  = $notsets  ? (split(/,/, $notsets))  : ();
    my @only_sets = $onlysets ? (split(/,/, $onlysets)) : ();

    # Client communicates with otter HTTP server
    my $cl = Bio::Otter::Lace::Defaults::make_Client();

    # DataSet interacts directly with an otter database
    my $ds = $cl->get_DataSet_by_name($dsname);

    my $loutre_dbc = $ds->get_cached_DBAdaptor->dbc();

    foreach my $component ('gene', 'transcript') {

        print "------- $component ---------\n";

        my $sql = qq{
            SELECT oa.value
              , COUNT(DISTINCT stable_id) cnt
              , GROUP_CONCAT(CONCAT(osi.${component}_id,':',stable_id,':',sr.name,':',o.seq_region_start,':',o.seq_region_end)
                ORDER BY osi.${component}_id ASC )
            FROM ${component}_attrib oa
              , $component o
              , ${component}_stable_id osi
              , attrib_type at
              , seq_region sr
            WHERE at.code = 'name'
              AND oa.attrib_type_id = at.attrib_type_id
              AND oa.${component}_id = o.${component}_id
              AND o.${component}_id = osi.${component}_id
              AND o.seq_region_id = sr.seq_region_id
        }
          . ($notsets  ? '  AND sr.name NOT IN (' . join(',', map { "'$_'" } @not_sets) . ")\n"  : '')
          . ($onlysets ? '  AND sr.name     IN (' . join(',', map { "'$_'" } @only_sets) . ")\n" : '')
          . qq{
              AND o.is_current
            GROUP BY oa.value
              , sr.seq_region_id
            HAVING cnt > 1
        };
           # --   AND oa.value rlike '^[A-Z]{1,4}[0-9]{5,9}\.[0-9]{1,2}'

        # print "$sql;\n";  next;

        my $sth = $loutre_dbc->prepare($sql);
        $sth->execute();

        my %name2stid = ();
        my %disambig  = ();

        while (my ($name, $cnt, $group) = $sth->fetchrow()) {

            # print "$name    $cnt    $group\n";

            print "\n--------------------- $name -------------------------\n";
            my %stid2name = ();
          VECTOR: foreach my $vector (split(/,/, $group)) {
                my ($dbid, $stable_id, $ssname, $start, $end) = split(':', $vector);

                print "\n\nGOT:   $vector\n";
                if (!scalar(keys %stid2name)) {    # first occurence keeps the name
                    $stid2name{$stable_id} = $name;

                    print "LEAVING the name '$name' to $component '$stable_id'\n";
                }
                else {
                    my $change_to_this;
                    if ($change_to_this = $stid2name{$stable_id}) {
                        print "name '$change_to_this' already created \n";
                    }
                    else {
                        $change_to_this = $name . '_' . (1 + scalar(keys %stid2name));

                        $stid2name{$stable_id} = $change_to_this;
                    }

                    my $change_sql = qq{
                        UPDATE ${component}_attrib
                        SET value='$change_to_this'
                        WHERE ${component}_id = $dbid
                        AND   attrib_type_id = (SELECT attrib_type_id FROM attrib_type where code='name')
                    };

                    if ($change) {

                        my $cb = Bio::Vega::ContigLockBroker->new(-hostname => hostname);
                        my $author_obj = Bio::Vega::Author->new(-name => $cl->author, -email => $cl->email);
                        my $object_ad =
                            $component eq 'gene'
                          ? $ds->get_cached_DBAdaptor->get_GeneAdaptor()
                          : $ds->get_cached_DBAdaptor->get_TranscriptAdaptor();
                        my $object = $object_ad->fetch_by_stable_id($stable_id);

                        eval {
                            print "Locking $component $stable_id\n";
                            $cb->lock_by_object($object, $author_obj);

                            print "EXECUTING: $change_sql\n";
                            my $change_sth = $loutre_dbc->prepare($change_sql);
                            $change_sth->execute();
                        };
                        if ($@) {
                            warning(
"Cannot rename $component $stable_id to $change_to_this because the object is locked\n$@\n"
                            );

                            # remove the stored locks on the reference slice in case alt slice locking fails

                            next VECTOR;
                        }
                        print "Unlocking $component $stable_id\n";
                        $cb->remove_by_object($object, $author_obj);
                    }
                    else {
                        print "PRETENDING TO EXECUTE: $change_sql\n";
                    }

                }    # if
            }    # foreach vector

        }    # while (each group by name)

        print "\n";

    }    # for genes & transcripts
}

