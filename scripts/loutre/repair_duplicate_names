#!/usr/local/bin/perl -w

# Eliminate repetitions in new schema gene names (attributes)

# NB: currently you need all the users out (no locks on the database)
#     to safely run the script

BEGIN {
    foreach my $path (@INC) {
        unless( $path=~s{ensembl/modules}{ensembl_head/modules}g ) {
            $path=~s{ensembl_head/modules}{ensembl/modules}g;
        };
    }
}

use strict;
use Bio::Otter::Lace::Defaults;

{
    my $dsname  = 'mouse';
    my $notsets = '';
    my $onlysets = '';
    my $change  = 0; # dry run

    Bio::Otter::Lace::Defaults::do_getopt(
        'dataset=s'     => \$dsname,
        'notsets=s'     => \$notsets,
        'onlysets=s'    => \$onlysets,
        'change!'       => \$change,
    );

    my @not_sets  = $notsets  ? (split(/,/, $notsets)) : ();
    my @only_sets = $onlysets ? (split(/,/, $onlysets)) : ();

    # Client communicates with otter HTTP server
    my $cl = Bio::Otter::Lace::Defaults::make_Client();

    # DataSet interacts directly with an otter database
    my $ds = $cl->get_DataSet_by_name($dsname);

    # Sanity check:
    if(!$ds->HEADCODE()) {
        print STDERR "New dataset must be based on schema-20+\n";
        exit(1);
    }

    my $loutre_dbc = $ds->get_cached_DBAdaptor->dbc();

    foreach my $component ('gene', 'transcript') {

        print "------- $component ---------\n";

        my $sql = qq{
            SELECT
                    oa.value,
                    count(distinct stable_id) cnt,
                    group_concat(concat(osi.${component}_id,':',stable_id,':',sr.name,':',o.seq_region_start,':',o.seq_region_end) ORDER BY osi.${component}_id ASC )
            FROM
                    ${component}_attrib oa,
                    $component o,
                    ${component}_stable_id osi,
                    attrib_type at,
                    seq_region sr
            WHERE
                    at.code='name'
                AND oa.attrib_type_id=at.attrib_type_id
                AND oa.${component}_id=o.${component}_id
                AND o.${component}_id=osi.${component}_id
                AND o.seq_region_id=sr.seq_region_id
        }.($notsets  ? '        AND sr.name NOT IN ('.join(',', map {"'$_'"} @not_sets).")\n" : '' )
         .($onlysets ? '        AND sr.name     IN ('.join(',', map {"'$_'"} @only_sets).")\n" : '' )
    .qq{        AND o.is_current
           --   AND oa.value rlike '^[A-Z]{1,4}[0-9]{5,9}\.[0-9]{1,2}'
           GROUP BY oa.value
                  , sr.name
             HAVING cnt>1
        };

#        print "$sql;\n";
        
        my $sth = $loutre_dbc->prepare($sql);
        $sth->execute();

        my %name2stid = ();
        my %disambig = ();
        
        while( my($name, $cnt, $group) = $sth->fetchrow() ) {
            # print "$name    $cnt    $group\n";
            
            print "\n--------------------- $name -------------------------\n";
            my %stid2name = ();
            foreach my $vector (split(/,/,$group)) {
                my ($dbid, $stable_id, $ssname, $start, $end) = split(':', $vector);

                print "\n\nGOT:   $vector\n";
                if(! scalar(keys %stid2name)) { # first occurence keeps the name
                    $stid2name{$stable_id} = $name;

                    print "LEAVING the name '$name' to $component '$stable_id'\n";
                } else {
                    my $change_to_this;
                    if($change_to_this = $stid2name{$stable_id}) {
                        print "name '$change_to_this' already created \n";
                    } else {
                        $change_to_this = $name.'_'.(1+scalar(keys %stid2name));

                        $stid2name{$stable_id} = $change_to_this;
                    }


                    my $change_sql = qq{
                        UPDATE ${component}_attrib
                        SET value='$change_to_this'
                        WHERE ${component}_id = $dbid
                        AND   attrib_type_id = (SELECT attrib_type_id FROM attrib_type where code='name')
                    };

                    if($change) {
                        print "EXECUTING: $change_sql\n";
                        my $change_sth = $loutre_dbc->prepare($change_sql);
                        $change_sth->execute();
                    } else {
                        print "PRETENDING TO EXECUTE: $change_sql\n";
                    }

                } # if
            } # foreach vector

        } # while (each group by name)

        print "\n";
        
    } # for genes & transcripts
}

