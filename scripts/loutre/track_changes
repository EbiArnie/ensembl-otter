#!/usr/bin/env perl

use warnings;


# 1. Find instances of genes that were saved without any change other than change of author.
# 2. Also find genes whose only change was loss of gene/transcript remarks (while the code was broken)

BEGIN {
    #
    # This bit is only needed to ensure we are running EnsEMBL head code,
    # not from the pre-release20 codebase.
    #
    foreach (@INC) {
        s{ensembl/modules}{ensembl_head/modules}g;
    }
    unshift @INC, '/nfs/team71/analysis/lg4/work/CPAN';
}

$|=1;

use Bio::Otter::Lace::Defaults;
use Bio::Vega::DBSQL::DBAdaptor;
use Bio::Vega::Transform::XML;
use Algorithm::Diff qw(sdiff);

    # these are needed for locking:
use Bio::Vega::ContigLockBroker;
use Bio::Vega::Author;


my %patterns = (
    'Author changes'   => [ 'c', 'author',    'author'    ],
    'StableId changes' => [ 'c', 'stable_id', 'stable_id' ],
    'Name changes'     => [ 'c', 'name',      'name'      ],
    'Remark removals'  => [ '-', 'remark',    '^'         ], # empty pattern should never be used!
);

my $dsname = 'test_cow';
my $first_id;
my $remove = 0;

Bio::Otter::Lace::Defaults::do_getopt(
    'dataset=s'   => \$dsname,
    'first_id=s'  => \$first_id,
    'remove!'     => \$remove,
);

if(!defined($first_id)) {
    $first_id =  ($dsname eq 'human') ? 132333
               : ($dsname eq 'mouse') ? 40773
               : 0;
}

# Client communicates with otter HTTP server
my $cl = Bio::Otter::Lace::Defaults::make_Client();

# DataSet interacts directly with an otter database
my $ds = $cl->get_DataSet_by_name($dsname);

my $dba = $ds->get_cached_DBAdaptor();

my $sql_stid = qq{
   SELECT stable_id, count(*) cnt
     FROM gene_stable_id
    WHERE stable_id in (SELECT stable_id FROM gene_stable_id where gene_id>= ?) -- SIC!
--    AND stable_id='OTTMUSG00000013488' -- for debugging only
--    AND stable_id='OTTHUMG00000123727' -- for debugging only
--    AND stable_id='OTTCOWG00000000010' -- for debugging only
 GROUP BY stable_id
   HAVING cnt > 1
};

my $sql_group = qq{
    SELECT chr.name, g.gene_id, g.seq_region_start, g.seq_region_end, gsi.version
      FROM gene_stable_id gsi, gene g, seq_region chr
     WHERE gsi.stable_id = ?
       AND gsi.gene_id=g.gene_id
       AND chr.seq_region_id=g.seq_region_id
};

my $sa = $dba->get_SliceAdaptor();
my $ga = $dba->get_GeneAdaptor();
my $xml_gen = Bio::Vega::Transform::XML->new();

my $cb = Bio::Vega::ContigLockBroker->new;
$cb->client_hostname($cl->client_hostname());
my $author_obj = Bio::Vega::Author->new(-name => $cl->author(), -email => $cl->author());

my $sth_stid = $dba->dbc()->prepare($sql_stid);
$sth_stid->execute($first_id);

my $cnt = 0;

while( my ($stable_id) = $sth_stid->fetchrow() ) {
    my $sth_group = $dba->dbc()->prepare($sql_group);
    $sth_group->execute($stable_id);

    my $prev_gene;
    my $prev_gene_id;
    my $prev_gene_lines;
    while( my ($chr_name, $gene_id, $start, $end, $version) = $sth_group->fetchrow() ) {

        #print join("\t", $chr_name, $gene_id, $stable_id, $version)."\n";

        my $gene = $ga->fetch_by_dbID($gene_id);

        my $atype = $gene->slice->seq_region_name(); # to differentiate between transferred genes
        my $xml   = "$atype\n".$xml_gen->get_geneXML($gene);

        my $curr_gene_lines = [ split('\n', $xml) ];

        if($prev_gene_lines) {
            print "$stable_id:    $prev_gene_id -- $gene_id (current=".$gene->is_current.")\n";
            my @hunks = sdiff($prev_gene_lines, $curr_gene_lines);

            my %count       = map { ($_ => 0) } (keys %patterns);
            my $other_count = 0;
            my $any_count   = 0;

            foreach my $hunk (@hunks) {
                my ($op,$from,$to) = @$hunk;

                if($op ne 'u') { # if there is a change in this line at all,

                    my $unmatched_cnt = 0;
                    foreach my $patt_name (keys %patterns) {
                        my ($oppat, $frompat, $topat) = @{$patterns{$patt_name}};

                        if(($op eq $oppat) && ($from=~/$frompat/) && ($to=~/$topat/)) {
                            $count{$patt_name}++;
                        } else {
                            $unmatched_cnt++;
                        }
                    }
                    if($unmatched_cnt eq scalar(keys %patterns)) {
#                       print "\t".join(', ',@$hunk)."\n";
                        $other_count++;
                    }
                    $any_count++;
                }
            }

            if(!$any_count) {
                print "\tNO CHANGES\n";
            } else {
                foreach my $patt_name (keys %patterns) {
                    if($count{$patt_name}) {
                        print "\t$patt_name: $count{$patt_name}\n";
                    }
                }
                if($other_count) {
                    print "\tOTHER CHANGES: $other_count\n";
                }
            }
            if($any_count == $count{'Author changes'}+$count{'Remark removals'}) {

                my $gene_slice = $sa->fetch_by_region(
                    'chromosome',
                    $chr_name,
                    $start,
                    $end,
                    1,
                    'Otter'
                );
                if($remove) {

                    eval {
                        $cb->lock_clones_by_slice($gene_slice,$author_obj,$dba);
                    };
                    if($@) {
                        print "\n\tSLICE ALREADY LOCKED, could not remove the gene\n";
                    } else {
                        print "\n\tREMOVING gene (dbID=$gene_id) from the database\n";
                        my $was_current = $gene->is_current();
                        $ga->remove($gene);
                        if($was_current) {
                            $ga->resurrect($prev_gene);
                        }

                        eval {
                            $cb->remove_by_slice($gene_slice,$author_obj,$dba);
                        };
                        if($@) {
                            die "Failed to unlock slice\n $@\n***\n";
                        }
                    }

                } else {
                    print "\n\tPRETENDING TO REMOVE gene (dbID=$gene_id) from the database\n";
                }

                  # flag it as removed:
                $gene_id=0;
            }
        }

        if($gene_id) { # if not flagged as removed
            $prev_gene       = $gene;
            $prev_gene_id    = $gene_id;
            $prev_gene_lines = $curr_gene_lines;
        }
    }
    print "\n\n\n";
}

