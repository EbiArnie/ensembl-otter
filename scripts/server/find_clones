#!/usr/local/bin/perl -w

my $pipehead = $ENV{PIPEHEAD}; # is set by the server for any GET request

use strict;
use OtterDefs;
use Bio::Otter::ServerQuery;
use Bio::Otter::ServerSide (':all');
use Bio::EnsEMBL::DBSQL::DBAdaptor;
use Bio::Otter::DBSQL::DBAdaptor;

$| = 1;

my $DEBUG=0;

my $sq = Bio::Otter::ServerQuery->new('dataset','qnames','unhide');
set_nph($sq);

# This is a 3-level hash:
# {query_name}{type_of_query}{clones_found}
#
my $unhide = $sq->getarg('unhide');
my %qnames_types_clones = map {($_ => {})} split(',', $sq->getarg('qnames'));

my $odb = get_DBAdaptor_from_CGI_species($sq, $OTTER_SPECIES, $pipehead);

my $clone_id_list = find_clones_by_qnames($sq, $odb, \%qnames_types_clones);
my ($cloneid2clonename, $cloneid2assemblies) = find_assemblies_by_clone_ids($sq, $odb, $clone_id_list, $unhide);

my $output_string = '';

for my $qname (keys %qnames_types_clones) {
    my $types_clones = $qnames_types_clones{$qname};
    if(keys %$types_clones) {
        for my $type (keys %$types_clones) {
            my $clones = $types_clones->{$type};
            for my $clone_id (keys %$clones) {
                my $clone_name = $cloneid2clonename->{$clone_id};
                $output_string .= join("\t", $qname, $type, $clone_name,
                                            join(',', keys %{$cloneid2assemblies->{$clone_id}} ))."\n";
            }
        }
    } else {
        $output_string .= "$qname\n"; # an equivalent of asymmetric join
    }
}

send_response($sq, $output_string, 1);

1;

############## actual search subroutines: ################################
sub exons2clones {
    my ($qname, $type, $exons, $qnames_types_clones, $clone_id_list) = @_;

    server_log("'$qname' was found and contains ".scalar(@$exons)." exons.");
    foreach my $exon (@$exons) {
        my $contigid = $exon->contig->dbID();
        my $clone_id = $exon->contig()->clone()->dbID();

        $qnames_types_clones->{$qname}{$type}{$clone_id}++;
        push @$clone_id_list, $clone_id;
    }
}

sub find_clones_by_qnames {
    my ($sq, $dba, $qnames_types_clones) = @_;

    my $meta_con = $dba->get_MetaContainer();
    my $prefix_primary = $meta_con->get_primary_prefix() || error_exit($sq, "Missing prefix.primary in meta table");
    my $prefix_species = $meta_con->get_species_prefix() || error_exit($sq, "Missing prefix.species in meta table");

    my $gene_adaptor           = $dba->get_GeneAdaptor();
    my $genename_adaptor       = $dba->get_GeneNameAdaptor();
    my $genesyn_adaptor        = $dba->get_GeneSynonymAdaptor();
    my $geneinfo_adaptor       = $dba->get_GeneInfoAdaptor();
    my $transcript_adaptor     = $dba->get_TranscriptAdaptor();
    my $exon_adaptor           = $dba->get_ExonAdaptor();

    my $clone_id_list = [];

    foreach my $qname (keys %$qnames_types_clones) {
        if(uc($qname) =~ /^$prefix_primary$prefix_species([TPGE])\d+/i){ # try stable_ids
            my $typeletter = $1;
            my $type;
            my $exons;

            eval {
                if($typeletter eq 'G') {
                    $type = 'gene_stable_id';
                    $exons = $gene_adaptor->fetch_by_stable_id($qname)->get_all_Exons();
                } elsif($typeletter eq 'T') {
                    $type = 'transcript_stable_id';
                    $exons = $transcript_adaptor->fetch_by_stable_id($qname)->get_all_Exons();
                } elsif($typeletter eq 'P') {
                    $type = 'translation_stable_id';
                    $exons = $transcript_adaptor->fetch_by_translation_stable_id($qname)->get_all_Exons();
                } elsif($typeletter eq 'E') {
                    $type = 'exon_stable_id';
                    $exons = [ $exon_adaptor->fetch_by_stable_id($qname) ];
                }
            };
                # Just imagine: they raise an EXCEPTION to indicate nothing was found. Terrific!
            if($@) {
                server_log("'$qname' looks like a stable id, but wasn't found.");
                server_log($@)if $DEBUG;
            } else {
                exons2clones($qname, $type, $exons, $qnames_types_clones, $clone_id_list);
            }
        }
        if($qname =~ /^(\w+)(?:\.(\d+))?$/) { # try clone accessions with & without version number
            my $wanted_acc = $1;
            my $wanted_version = $2;

            my $sql = qq{
                SELECT clone_id
                FROM clone
                WHERE embl_acc = '$wanted_acc'
            }. (defined($wanted_version) ? qq{ AND embl_version = '$wanted_version' } : '');
            warn $sql if $DEBUG;
            my $sth = $dba->prepare($sql);
            $sth->execute;
            
            server_log("trying clone accession[.version] '$qname' ");
            while (my ($clone_id) = $sth->fetchrow) {
                $qnames_types_clones->{$qname}{clone_accession}{$clone_id}++;
                push @$clone_id_list, $clone_id;
            }
        }

        { # try intl. clone names:
            my $sql = qq{
                SELECT clone_id
                FROM clone
                WHERE name = '$qname'
            };
            warn $sql if $DEBUG;
            my $sth = $dba->prepare($sql);
            $sth->execute;
            
            server_log("trying intl. clone name '$qname' ");
            while (my ($clone_id) = $sth->fetchrow) {
                $qnames_types_clones->{$qname}{intl_clone_name}{$clone_id}++;
                push @$clone_id_list, $clone_id;
            }
        }


        { # try gene name or synonym:
            my $exons;
            eval{
                server_log("trying gene name or synonym '$qname' ");
                my $geneNameObjList = $genename_adaptor->fetch_by_name($qname);
                my $geneSynObjList  = $genesyn_adaptor->fetch_by_name($qname);
                foreach my $geneNameObj (@$geneNameObjList, @$geneSynObjList){
                    my $geneInfoObj = $geneinfo_adaptor->fetch_by_dbID($geneNameObj->gene_info_id());    
                    $exons = $gene_adaptor->fetch_by_stable_id($geneInfoObj->gene_stable_id())->get_all_Exons();
                    exons2clones($qname, 'gene_name_or_synonym', $exons, $qnames_types_clones, $clone_id_list);
                }
            };
            if ($@){
                ## assume error was caused by not being able to create a $geneNameObjList -
                ## - as name didnt exist
                #
                server_log("no gene was found with name or synonym '$qname'"); 
                server_log($@)if $DEBUG;
            }
        }

    } # foreach $qname

    return $clone_id_list;
}

sub find_assemblies_by_clone_ids {
    my ($sq, $dba, $clone_id_list, $unhide) = @_;

    my $clone_ids = join(', ', map { "'$_'" } @$clone_id_list);
    my $cloneid2clonename = {};
    my $cloneid2assemblies = {};

    my $sql = qq{
        SELECT a.type, cl.clone_id, concat(cl.embl_acc,'.',cl.embl_version), ss.hide
        FROM assembly a, contig co, clone cl, sequence_set ss
        WHERE a.contig_id=co.contig_id AND co.clone_id=cl.clone_id AND a.type=ss.assembly_type
        AND cl.clone_id IN ($clone_ids)
    };
    warn $sql if $DEBUG;
    my $sth = $dba->prepare($sql);
    $sth->execute;
    
    server_log("finding assemblies for clone names");
    while (my ($atype, $clone_id, $clone_name, $hide) = $sth->fetchrow) {
        my $hide = ($hide eq 'N') ? 0 : 1;
        $cloneid2assemblies->{clone_id} ||= {};
        if($unhide || !$hide) {
            $cloneid2clonename->{$clone_id} = $clone_name;
            $cloneid2assemblies->{$clone_id}{$atype}++;
        }
    }
    return ($cloneid2clonename, $cloneid2assemblies);
}
