#!/usr/local/bin/perl -w

my $pipehead = $ENV{PIPEHEAD}; # is set by the server for any GET request

use strict;
use warnings;
use OtterDefs;
use Bio::Otter::ServerQuery;
use Bio::Otter::ServerSide (':all');

$| = 1;
my $sq = Bio::Otter::ServerQuery->new('dataset','author', 'sequenceset');;
set_nph($sq);

my $query_fail = "must be present to get a set of Clone Sequences";
my $dataset =  $sq->getarg('dataset') || error_exit($sq,"'dataset' $query_fail");
my $author  =   $sq->getarg('author') || error_exit($sq,"'author' $query_fail");
my $sequenceset =  $sq->getarg('sequenceset') || error_exit($sq,"'sequenceset' $query_fail");

my $odba = get_DBAdaptor_from_CGI_species($sq, $OTTER_SPECIES, $pipehead);

my $auth_adapt = $odba->get_AuthorAdaptor();
my ($author_obj, $saved_err);
eval{
    $author_obj = $auth_adapt->fetch_by_name($author);
};
if($@){
    $saved_err  = $@;
    eval{
        $author_obj = $auth_adapt->fetch_by_name($author);
    };
    if($@){
        error_exit($sq,"Failed to get an author.\n$@") unless $author_obj;
    }
}

my $xml = '';
$xml   .= qq`  <dataset name="$dataset">\n`;
$xml   .= qq`    <sequenceset name="$sequenceset">\n`;
$xml   .= qq`      <clonesequences>\n`;

if($pipehead) {

  my $sa=$odba->get_SliceAdaptor;
  my $la=$odba->get_ContigLockAdaptor;
  my $dbc=$odba->dbc;
  my $sth = $dbc->prepare(q{SELECT length from seq_region where name = ?});
  $sth->execute($sequenceset);
  my $end=$sth->fetchrow;
  # my $slice =  $odba->get_SliceAdaptor()->fetch_by_region('chromosome',$sequenceset,1,$end,1,'Otter');
  my $slice =  $odba->get_SliceAdaptor()->fetch_by_region('chromosome',$sequenceset,undef,undef,undef,'Otter');
  my $chrs  = $slice->get_all_Attributes('chr')->[0];
  my $chr_name=$chrs ? $chrs->value() : die "unknown chromosome name";
  my $chr_length=$slice->length;
  my $contig_projection = $slice->project('contig');

  foreach my $seg (@$contig_projection) {
	 my $contig_slice = $seg->to_Slice();
	 my $contig_name=$contig_slice->seq_region_name;
	 my $contig_strand=$contig_slice->strand;
	 my $contig_length=$contig_slice->seq_region_length;
	 my $contig_id=$sa->get_seq_region_id($contig_slice);
	 my $contig_lock=$la->fetch_by_contig_id($contig_id);
	 my $hostname;
	 my $author_name;
	 my $author_email;
	 my $lock_id;
	 if ($contig_lock){
		$hostname=$contig_lock->hostname;
		$author_name=$contig_lock->author->name;
		$author_email=$contig_lock->author->email;
		$lock_id=$contig_lock->dbID;
	 }
	 my $clone_projection = $contig_slice->project('clone');
	 my $newseg=$clone_projection->[0];
	 my $clone_slice = $newseg->to_Slice;

     my $accs = $clone_slice->get_all_Attributes('embl_acc')->[0];
	 my $accession  = $accs ? $accs->value() : die "unknown clone accession";
	 my $vers = $clone_slice->get_all_Attributes('embl_version')->[0];
     my $version    = $vers ? $vers->value() : die "unknown clone version";
     my $icns = $clone_slice->get_all_Attributes('intl_clone_name')->[0];
	 my $clone_name = $icns ? $icns->value() : $clone_slice->seq_region_name;

	 my $contig_asm_start=$seg->from_start;
	 my $contig_asm_end=$seg->from_end;
	 my $contig_cmp_start=$contig_slice->start;
	 my $contig_cmp_end=$contig_slice->end;
	 $xml .= qq`        <clonesequence>\n`;
	 $xml .= qq`          <clone_name>$clone_name</clone_name>\n`;
	 $xml .= qq`          <accession>$accession</accession>\n`;
	 $xml .= qq`          <sv>$version</sv>\n`;
	 $xml .= qq`          <contig_name>$contig_name</contig_name>\n`;
	 $xml .= qq`          <length>$contig_length</length>\n`;
	 $xml .= qq`          <chr name="$chr_name" length="$chr_length"></chr>\n`;
	 $xml .= qq`          <chr_start>$contig_asm_start</chr_start>\n`;
	 $xml .= qq`          <chr_end>$contig_asm_end</chr_end>\n`;
	 $xml .= qq`          <contig_start>$contig_cmp_start</contig_start>\n`;
	 $xml .= qq`          <contig_end>$contig_cmp_end</contig_end>\n`;
	 $xml .= qq`          <contig_strand>$contig_strand</contig_strand>\n`;
	 if (defined $lock_id){
		$xml .= qq`          <lock lock_id="$lock_id" author_name="$author_name" email="$author_email" host_name="$hostname"> </lock>\n`;
	 }
	 $xml .= qq`        </clonesequence>\n`;
  }

} else {

    my $sth = $odba->prepare(q{
            SELECT c.name, c.embl_acc, c.embl_version
              , ctg.name, ctg.length
              , ch.name, ch.length, a.chr_start, a.chr_end
              , a.contig_start, a.contig_end, a.contig_ori
              , l.clone_lock_id, l.hostname
              , aut.author_name, aut.author_email
           FROM assembly a
              , contig ctg 
              , clone c
              , chromosome ch
            LEFT JOIN clone_lock l ON l.clone_id = c.clone_id
            LEFT JOIN author aut ON aut.author_id = l.author_id
            WHERE a.contig_id = ctg.contig_id
              AND ctg.clone_id = c.clone_id
              AND ch.chromosome_id = a.chromosome_id
              AND a.type = ?
            ORDER BY a.chr_start 
                });
    $sth->execute($sequenceset);
    while (my ($name, $acc,  $sv,
           $ctg_name,  $ctg_length,
           $chr_name, $chr_length, $chr_start,  $chr_end,
           $ctg_start, $ctg_end, $ctg_strand,
           $clone_lock_id, $hostname,
           $author_name, $author_email ) = $sth->fetchrow) {

      $xml .= qq`        <clonesequence>\n`;
      $xml .= qq`          <clone_name>$name</clone_name>\n`;
      $xml .= qq`          <accession>$acc</accession>\n`;
      $xml .= qq`          <sv>$sv</sv>\n`;
      $xml .= qq`          <contig_name>$ctg_name</contig_name>\n`;
      $xml .= qq`          <length>$ctg_length</length>\n`;
      $xml .= qq`          <chr name="$chr_name" length="$chr_length"></chr>\n`;
      $xml .= qq`          <chr_start>$chr_start</chr_start>\n`;
      $xml .= qq`          <chr_end>$chr_end</chr_end>\n`;
      $xml .= qq`          <contig_start>$ctg_start</contig_start>\n`;
      $xml .= qq`          <contig_end>$ctg_end</contig_end>\n`;
      $xml .= qq`          <contig_strand>$ctg_strand</contig_strand>\n`;
      if (defined $clone_lock_id){
        $xml .= qq`          <lock lock_id="$clone_lock_id" author_name="$author_name" email="$author_email" host_name="$hostname"> </lock>\n`;
      }
      $xml .= qq`        </clonesequence>\n`;
    }

} # if old API

$xml .= qq`      </clonesequences>\n`;
$xml .= qq`    </sequenceset>\n`;
$xml .= qq`  </dataset>\n`;

send_response($sq, $xml, 1);

__END__

=head1 NAME - get_clonesequences


=head1 DESCRIPTION

return xml for Clone Sequences of a sequence set.

=head1 AUTHOR

Sindhu K.Pillai B<email> sp1@sanger.ac.uk
Leo Gordon B<email> lg4@sanger.ac.uk
