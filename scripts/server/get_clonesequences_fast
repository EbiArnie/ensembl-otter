#!/usr/local/bin/perl -w

my $pipehead = $ENV{PIPEHEAD}; # is set by the server for any GET request

use strict;
use warnings;
use OtterDefs;
use Bio::Otter::ServerQuery;
use Bio::Otter::ServerSide (':all');

$| = 1;
my $sq = Bio::Otter::ServerQuery->new('dataset','author', 'sequenceset');;
set_nph($sq);

my $query_fail = "must be present to get a set of Clone Sequences";
my $dataset =  $sq->getarg('dataset') || error_exit($sq,"'dataset' $query_fail");
my $author  =   $sq->getarg('author') || error_exit($sq,"'author' $query_fail");
my $sequenceset =  $sq->getarg('sequenceset') || error_exit($sq,"'sequenceset' $query_fail");

my $odba = get_DBAdaptor_from_CGI_species($sq, $OTTER_SPECIES, $pipehead);

my $auth_adapt = $odba->get_AuthorAdaptor();
my ($author_obj, $saved_err);
eval{
    $author_obj = $auth_adapt->fetch_by_name($author);
};
if($@){
    $saved_err  = $@;
    eval{
        $author_obj = $auth_adapt->fetch_by_name($author);
    };
    if($@){
        error_exit($sq,"Failed to get an author.\n$@") unless $author_obj;
    }
}

my $xml = '';
$xml   .= qq`  <dataset name="$dataset">\n`;
$xml   .= qq`    <sequenceset name="$sequenceset">\n`;
$xml   .= qq`      <clonesequences>\n`;

#############################################################################################
##   should we actually care to use the API, or it will be much easier with a direct query?
#
#    my $asm_slice =  $odba->get_SliceAdaptor()->fetch_by_region('chromosome', $sequenceset)
#    my $clone_projection = $asm_slice->project('clone');
#
#    foreach my $segment (@{ $asm_slice->project('contig') }) {
#      my $clone = $segment->to_Slice();
#      print $slice->seq_region_name(), ':', $seg->from_start(), '-',
#            $seg->from_end(), ' -> ',
#            $clone->seq_region_name(), ':', $clone->start(), '-',$clone->end(),
#            $clone->strand(), "\n";
#    }
#
# ...  ?
#############################################################################################

my $sql = $pipehead
? q{
    SELECT cl.name, intl_clone_name.value, embl_acc.value, embl_version.value,
           ctg.name, ctg.length,
           chr_name.value, chr.length, chr2ctg.asm_start, chr2ctg.asm_end,
           chr2ctg.cmp_start, chr2ctg.cmp_end, chr2ctg.ori,
           l.contig_lock_id, l.hostname,
           aut.author_name, aut.author_email
    FROM assembly chr2ctg,
         assembly cl2ctg,
         seq_region chr, seq_region ctg, seq_region cl,
         seq_region_attrib embl_acc, seq_region_attrib embl_version,
         seq_region_attrib chr_name
LEFT JOIN contig_lock l ON l.seq_region_id=ctg.seq_region_id
LEFT JOIN author aut ON aut.author_id = l.author_id
LEFT JOIN seq_region_attrib intl_clone_name ON intl_clone_name.seq_region_id = cl.seq_region_id
      AND intl_clone_name.attrib_type_id=(select attrib_type_id from attrib_type where code='intl_clone_name')
    WHERE chr.name = ?
      AND chr2ctg.asm_seq_region_id=chr.seq_region_id
      AND chr2ctg.cmp_seq_region_id=ctg.seq_region_id
      AND ctg.coord_system_id=(select coord_system_id from coord_system where name='contig')
      AND cl2ctg.asm_seq_region_id=cl.seq_region_id
      AND cl2ctg.cmp_seq_region_id=ctg.seq_region_id
      AND cl.coord_system_id=(select coord_system_id from coord_system where name='clone')
      AND embl_acc.seq_region_id=cl.seq_region_id
      AND embl_acc.attrib_type_id=(select attrib_type_id from attrib_type where code='embl_acc')
      AND embl_version.seq_region_id=cl.seq_region_id
      AND embl_version.attrib_type_id=(select attrib_type_id from attrib_type where code='embl_version')
      AND chr_name.seq_region_id=chr.seq_region_id
      AND chr_name.attrib_type_id=(select attrib_type_id from attrib_type where code='chr')
 ORDER BY chr2ctg.asm_start
}
: q{
    SELECT c.name, c.name, c.embl_acc, c.embl_version
      , ctg.name, ctg.length
      , ch.name, ch.length, a.chr_start, a.chr_end
      , a.contig_start, a.contig_end, a.contig_ori
      , l.clone_lock_id, l.hostname
      , aut.author_name, aut.author_email
   FROM assembly a
      , contig ctg 
      , clone c
      , chromosome ch
    LEFT JOIN clone_lock l ON l.clone_id = c.clone_id
    LEFT JOIN author aut ON aut.author_id = l.author_id
    WHERE a.contig_id = ctg.contig_id
      AND ctg.clone_id = c.clone_id
      AND ch.chromosome_id = a.chromosome_id
      AND a.type = ?
    ORDER BY a.chr_start 
};

my $odbc = $pipehead ? $odba->dbc() : $odba;
my $sth = $odbc->prepare($sql);
$sth->execute($sequenceset);
while (my ($cl_name, $intl_name, $acc,  $sv,
       $ctg_name,  $ctg_length,
       $chr_name, $chr_length, $chr_start,  $chr_end,
       $ctg_start, $ctg_end, $ctg_strand,
       $clone_lock_id, $hostname,
       $author_name, $author_email ) = $sth->fetchrow) {

  my $clone_name = $intl_name || $cl_name;

  $xml .= qq`        <clonesequence>\n`;
  $xml .= qq`          <clone_name>$cl_name</clone_name>\n`;
  $xml .= qq`          <accession>$acc</accession>\n`;
  $xml .= qq`          <sv>$sv</sv>\n`;
  $xml .= qq`          <contig_name>$ctg_name</contig_name>\n`;
  $xml .= qq`          <length>$ctg_length</length>\n`;
  $xml .= qq`          <chr name="$chr_name" length="$chr_length"></chr>\n`;
  $xml .= qq`          <chr_start>$chr_start</chr_start>\n`;
  $xml .= qq`          <chr_end>$chr_end</chr_end>\n`;
  $xml .= qq`          <contig_start>$ctg_start</contig_start>\n`;
  $xml .= qq`          <contig_end>$ctg_end</contig_end>\n`;
  $xml .= qq`          <contig_strand>$ctg_strand</contig_strand>\n`;
  if (defined $clone_lock_id){
    $xml .= qq`          <lock lock_id="$clone_lock_id" author_name="$author_name" email="$author_email" host_name="$hostname"> </lock>\n`;
  } # endif
  $xml .= qq`        </clonesequence>\n`;
} # endwhile

$xml .= qq`      </clonesequences>\n`;
$xml .= qq`    </sequenceset>\n`;
$xml .= qq`  </dataset>\n`;
send_response($sq, $xml, 1);

__END__

=head1 NAME - get_clonesequences


=head1 DESCRIPTION

return xml for Clone Sequences of a sequence set.

=head1 AUTHOR

Sindhu K.Pillai B<email> sp1@sanger.ac.uk
Leo Gordon B<email> lg4@sanger.ac.uk

