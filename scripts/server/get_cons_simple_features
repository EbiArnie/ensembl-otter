#!/usr/local/bin/perl -w

use strict;
use Bio::EnsEMBL::Registry;
use Bio::EnsEMBL::SimpleFeature;
use Bio::Otter::ServerScriptSupport;
use Bio::Otter::Lace::ViaText ('%OrderOfOptions');

sub Bio::EnsEMBL::Slice::get_all_ConsFeatures {
    my ($slice, $server) = @_;

    my $reg = "Bio::EnsEMBL::Registry";
    $reg->load_registry_from_db(
        -host => "ensembldb.ensembl.org",
        -user => "anonymous"
    );

    # Get all the MethodLinkSpeciesSet for teh 9 way GERP_CONSERVATION_SCORE
    my $method_link_species_set_adaptor = $reg->get_adaptor(
        "Multi", "compara", "MethodLinkSpeciesSet");

    unless($method_link_species_set_adaptor) {
        $server->error_exit("Could not fetch method_link_species_set_adaptor from the Registry");
    }

    my $cons_score_mlss = $method_link_species_set_adaptor->
        fetch_by_method_link_type_registry_aliases(
            "GERP_CONSERVATION_SCORE", ["Homo sapiens", "Pan troglodytes",
            "Macaca mulatta", "Mus musculus", "Rattus norvegicus", 
            "Canis familiaris", "Bos taurus", "Gallus gallus", 
            "Monodelphis domestica"]);

    my $conservation_score_adaptor = $reg->get_adaptor(
        "Multi", "compara", "ConservationScore");

    my $conservation_scores = $conservation_score_adaptor->
        fetch_all_by_MethodLinkSpeciesSet_Slice($cons_score_mlss, $slice,
            $slice->length-1, 'AVERAGE', 1, 'NCBI36');

    my @csfs   = ();
    my $strand = $slice->strand();
    my $offset = ($strand>0) ? $slice->start() : $slice->end();
    foreach my $cons_score (@$conservation_scores) {
        my $simple_feature = Bio::EnsEMBL::SimpleFeature->new();
        my $position = $offset + $strand*($cons_score->position() - 1);
        $simple_feature->slice(  $slice );
        $simple_feature->start(  $position );
        $simple_feature->end(    $position );
        $simple_feature->strand( $strand );
        $simple_feature->display_label( sprintf("%.6f", $cons_score->observed_score) );

        push @csfs, $simple_feature;
    }

    return \@csfs;
}

my $server = Bio::Otter::ServerScriptSupport->new('dataset',
    'cs','csver','name','type','start','end','strand','metakey',
);

if(!$server->running_headcode()) {
    $server->error_exit("This kind of data can only be fetched in pipehead==1 mode");
}

my $csfs = $server->fetch_mapped_features('cons_feature',
            ['get_all_ConsFeatures', $server] );

my @sf_optnames = @{ $OrderOfOptions{SimpleFeature} };
my $output_string = '';

foreach my $sf (@$csfs) {
        # output a SimpleFeature line
    my @sf_optvalues = ('SimpleFeature');
    for my $opt (@sf_optnames) {
        push @sf_optvalues, $sf->$opt();
    }

    $output_string .= join("\t", @sf_optvalues)."\n";
}

$server->send_response($output_string, 1);

1;

