#!/usr/local/bin/perl -w

my $pipehead = $ENV{PIPEHEAD}; # is set by the server for any GET request

use strict;
use Bio::Das;
use Bio::Otter::ServerSide (':all');
use Bio::Otter::Lace::ViaText ('%OrderOfOptions');

sub Bio::EnsEMBL::Slice::get_all_DasFeatures {
    my ($slice, $das, $analysis) = @_;

    my $chr_name  = $slice->seq_region_name();
    my $chr_start = $slice->start();
    my $chr_end   = $slice->end();
    my $segment_name  = "$chr_name:$chr_start,$chr_end";

    server_log( sprintf ("GET  %s/%s/features?segment=%s%s\n",
                            $das->source, $das->dsn, $segment_name,
                            $analysis ? ";type=$analysis" : '') );

    my $segment = $das->segment($segment_name);
    unless($segment) { return []; }

    my @feature_type  = $analysis ? ('-type' => $analysis) : ();
    my $iterator = $segment->features(-iterator => 1, @feature_type);

    my @sfs = ();
    while (my $das_feature = $iterator->next_seq) {
        my $simple_feature = Bio::Ensembl::SimpleFeature->new();
        $simple_feature->slice(   $slice );
        $simple_feature->start(   $das_feature->start() - $chr_start + 1 );
        $simple_feature->end(     $das_feature->stop()  - $chr_start + 1 );
        $simple_feature->strand( ($das_feature->orientation() eq '-') ? -1 : 1 );
        $simple_feature->score(  ($das_feature->score() eq '-') ? 100 : $das_feature->score() );
        $simple_feature->display_label( $das_feature->feature_id() );

        push @sfs, $simple_feature;
    }

    return \@sfs;
}



$| = 1;

my $sq = Bio::Otter::ServerQuery->new('dataset',
    'cs','csver','name','type','start','end','strand','metakey',
    'source', 'dsn','analysis');
set_nph($sq);

if(!$pipehead) {
    error_exit($sq, "This kind of data can only be fetched in pipehead==1 mode");
}

my $source   = $sq->getarg('source') || error_exit($sq, "Please supply DAS 'source'");
my $dsn      = $sq->getarg('dsn')    || error_exit($sq, "Please supply DAS 'dsn'");
my $analysis = $sq->getarg('analysis'); # defaults to *everything*

my $das = Bio::Das->new(
    -source => $source,
    -dsn    => $dsn,
);

my $sfs = fetch_mapped_features($sq, $pipehead, 'ditag_feature', 
            ['get_all_DasFeatures', $das, $analysis] );

server_log("Total of ".scalar(@$sfs)
          .($analysis ? " {$analysis}":'')
          ." DAS features fetched+mapped from $source/$dsn");

my @sf_optnames = @{ $OrderOfOptions{SimpleFeature} };
my $output_string = '';

foreach my $sf (@$sfs) {
        # output a SimpleFeature line
    my @sf_optvalues = ('SimpleFeature');
    for my $opt (@sf_optnames) {
        push @sf_optvalues, $sf->$opt();
    }

    $output_string .= join("\t", @sf_optvalues)."\n";
}

send_response($sq, $output_string, 1);

