#!/usr/local/bin/perl -w

use strict;

use Bio::Otter::ServerScriptSupport;
use HTTPD::Authen;

my $DEBUG      = 0;
my $ALLOW_ALL  = 0;
my $ERROR_AUTH = 'unknown user or incorrect password';

my $server = Bio::Otter::ServerScriptSupport->new('author');

my $user   = $server->getarg('author') || '**NOT Using Authorization**';

my $groupAd;

if($ENV{AUTHUSERFILE} && $ENV{AUTHGROUPFILE}){
    ($groupAd,$user) = check_authorisation();
}else{
    $ALLOW_ALL = 1;
}

# This is a check so that $groupAd->exists won't die if
# ALLOW_ALL is false when no authentication was passed
$server->error_exit($ERROR_AUTH) unless $groupAd || $ALLOW_ALL;

my $species_hash = $server->species_hash();

my $xml   .= qq{  <datasets>\n};
foreach my $dataset (keys %$species_hash) {
    next if ($dataset =~ /defaults/);
    $server->log("Testing user '$user' in dataset '$dataset'") if $DEBUG;
      # This "next unless" uses perl's clever "or" checking where it 
      # won't bother checking the second for truth if the first is true.
    next unless $ALLOW_ALL || $groupAd->exists($dataset, $user);

    $server->log("Allowing user '$user' access to dataset '$dataset'") if $DEBUG;

    my $species_subhash = $species_hash->{$dataset};

    $xml .= qq{    <dataset name="$dataset">\n};
    foreach my $key (keys %$species_subhash) {
        my $lckey = lc($key);
        $xml .= '      <'.$lckey.'>'.$species_subhash->{$key}.'</'.$lckey.">\n";
    }
    $xml .= qq{    </dataset>\n};
}
$xml .= qq{  </datasets>\n};

$server->send_response( $xml, 1);

1;

######################################################################
#End main
######################################################################

sub check_authorisation{
    my ($groupAdminObj, $authinfo, $authen);

    $authinfo = $ENV{'HTTP_AUTHORIZATION'} || 'Basic xxxxxxx';
    $authen = HTTPD::Authen->new(DB     => $ENV{AUTHUSERFILE},
                                 DBType => 'Text',
                                 Server => 'Apache');
    $server->log("AUTH was '$authinfo'") if $DEBUG;

    my $authtype      = $authen->type($authinfo);
    my ($user, $pass) = ('ERROR') x 2;
    ($user, $pass)    = $authtype->parse($authinfo);

    $server->log("Got info ['$user', '$pass']") if $DEBUG;

    if( my $ok = $authen->check($user, $pass) ){
        $server->log("user '$user', was AUTHENTICATED") if $DEBUG;
        $groupAdminObj = $authen->{USER}->group($user);
        $groupAdminObj->db($ENV{'AUTHGROUPFILE'});
        if($DEBUG){
            # this gets all the groups in the .htgroups file
            foreach my $groupname($groupAdminObj->list()){
                if($groupAdminObj->exists($groupname, $user)){
                    $server->log("User: '$user' is part of group: '$groupname'");
                }else{
                    $server->log("User: '$user' is *NOT* part of group: '$groupname'");
                }
            }
        }
    }else{
        $server->log("user was NOT AUTHENTICATED") if $DEBUG;
        $server->error_exit($ERROR_AUTH);
    }
    return $groupAdminObj, $user;

}

=pod

=head1 get_datasets

=head1 DESCRIPTION

Returns a list of datasets to the Client.
Will only return the list the user has access to see
if the server has been setup (see ../../conf/README.user.pod).

=cut
