#!/usr/local/bin/perl -w

use strict;
use Bio::Otter::ServerScriptSupport;
use Bio::Otter::Lace::ViaText ('%OrderOfOptions');

my $server = Bio::Otter::ServerScriptSupport->new('dataset',
    'cs','csver','name','type','start','end','strand',
    'metakey','analysis','ditype');

if(!$server->running_headcode()) {
    $server->error_exit("This kind of data is only available from new API databases. Set pipehead to 1");
}

my $analysis = $server->getarg('analysis');
my $ditype   = $server->getarg('ditype');

my $dfs = $server->fetch_mapped_features('ditag_feature', 
            ['get_all_DitagFeatures', $ditype, $analysis] );

my @df_optnames = @{ $OrderOfOptions{DitagFeature} };
my @do_optnames = @{ $OrderOfOptions{DitagObject} };
my $output_string = '';

    # Stringify only the simple fields:
my %do_seen = (); # collect the seen ditag object ids here

foreach my $df (@$dfs) {

    my $do = $df->ditag(); # object
    my $do_id = $do->dbID();

    if(!exists($do_seen{$do_id})) { # a new one

            # output a ditag object line:
        my @do_optvalues = ('DitagObject');
        for my $opt (@do_optnames) {
            push @do_optvalues, $do->$opt() || 0;
        }
        $output_string .= join("\t", @do_optvalues)."\n";

        $do_seen{$do_id}++;
    }

        # output a ditag feature line:
    my @df_optvalues = ('DitagFeature');
    for my $opt (@df_optnames) {
        push @df_optvalues, $df->$opt();
    }
    push @df_optvalues, $do_id;

    $output_string .= join("\t", @df_optvalues)."\n";
}

$server->send_response($output_string, 1);

1;

