#!/usr/local/bin/perl -w

my $pipehead = $ENV{PIPEHEAD}; # is set by the server for any GET request

use strict;
use OtterDefs;
use Bio::Otter::ServerQuery;
use Bio::Otter::ServerSide (':all');
use Bio::Otter::Lace::PipelineDB;
use Bio::EnsEMBL::DBSQL::DBAdaptor;
use Bio::Otter::DBSQL::DBAdaptor;
use Bio::Otter::ToXML;

$| = 1;

my $sq = Bio::Otter::ServerQuery->new('dataset',
    'cs','csver','name','type','start','end','strand',
    'metakey','analysis','transcript_analyses');
set_nph($sq);

my $analysis = $sq->getarg('analysis');
my $metakey  = $sq->getarg('metakey') || ''; # defaults to pipeline
my $transcript_analyses = $sq->getarg('transcript_analyses') || '';

my $odba = get_DBAdaptor_from_CGI_species($sq, $OTTER_SPECIES, $pipehead);
my $sdba = odba_to_sdba($sq, $odba, $pipehead, $metakey);
my $remapping_needed = pre_remapping($sq, $odba, $sdba, $pipehead);

my $output_string = '';

if($remapping_needed) {

    server_log("No remapping can be done at the moment, sorry. Returning empty list");

} else {

    my $satellite_slice = get_slice($sq, $sdba, $pipehead);

    my $genes = $satellite_slice->get_all_Genes($analysis);

    server_log("Total of ".scalar(@$genes)." '$analysis' genes found");

    my $allowed_transcript_analyses_hash = $transcript_analyses
        ? { map { $_ => 1 } split(/,/, $transcript_analyses) }
        : '';

    foreach my $gene (@$genes) {
        $output_string .= $gene->toXMLstring($allowed_transcript_analyses_hash);
    }
}

send_response($sq, $output_string, 1);

