#!/usr/local/bin/perl -w

use strict;
use Bio::Otter::ServerScriptSupport;
use Bio::Otter::ToXML;

sub Bio::EnsEMBL::Gene::propagate_slice {
    my ($gene, $slice) = @_;

    foreach my $transcript (@{ $gene->get_all_Transcripts() }) {
        foreach my $exon (@{ $transcript->get_all_Exons() }) {
            $exon->slice($slice);
        }
        $transcript->slice($slice);
    }
    $gene->slice($slice);
}

my $server = Bio::Otter::ServerScriptSupport->new('dataset',
        'cs','csver','name','type','start','end','strand',
    'metakey','analysis','transcript_analyses','translation_xref_dbs');

my $analysis             = $server->getarg('analysis');
my $transcript_analyses  = $server->getarg('transcript_analyses')  || '';
my $translation_xref_dbs = $server->getarg('translation_xref_dbs') || '';

my $allowed_transcript_analyses_hash = $transcript_analyses
    ? { map { $_ => 1 } split(/,/, $transcript_analyses) }
    : '';
my $allowed_translation_xref_db_hash = $translation_xref_dbs
    ? { map { $_ => 1 } split(/,/, $translation_xref_dbs) }
    : '';

    # third parameter of $slice->get_all_Genes() helps preventing lazy-loading of transcripts
my $genes = $server->fetch_mapped_features('gene',
            ['get_all_Genes', $analysis, undef, 1]);

    ## FIXME:
    #
    ## old EnsEMBL API used to send you all the genes if $analysis was not fetchable.
    ## This is NOT what we want!
    #
    # my $ana_object = $sdba->get_AnalysisAdaptor()->fetch_by_logic_name($analysis);
    # if($ana_object) {
    #     $genes = $original_slice->get_all_Genes($analysis);
    # }

my $output_string = '';

foreach my $gene (@$genes) {
    $output_string .= $gene->toXMLstring(
                                    $allowed_transcript_analyses_hash,
                                    $allowed_translation_xref_db_hash
                                );
}

$server->send_response($output_string, 1);

1;

