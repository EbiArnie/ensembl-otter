#!/usr/local/bin/perl -w

my $pipehead = $ENV{PIPEHEAD}; # is set by the server for any GET request

use strict;
use OtterDefs;
use Bio::Otter::ServerQuery;
use Bio::Otter::ServerSide (':all');
use Bio::Otter::Lace::PipelineDB;
use Bio::EnsEMBL::DBSQL::DBAdaptor;
use Bio::Otter::DBSQL::DBAdaptor;
use Bio::Otter::ToXML;

$| = 1;

my $sq = Bio::Otter::ServerQuery->new('dataset',
    'cs','csver','name','type','start','end','strand',
    'metakey','analysis');
set_nph($sq);

my $odba = get_DBAdaptor_from_CGI_species($sq, $OTTER_SPECIES, $pipehead);
my $metakey = $sq->getarg('metakey') || ''; # defaults to pipeline

if($pipehead && $metakey) { # a head version of ensembl_db (non-pipeline genes)

    my $pdba = odba_to_sdba($sq, $odba, $pipehead);
    my $pipe_slice = get_slice($sq, $pdba, $pipehead);

    my ($equiv_asm) = @{ $pipe_slice->get_all_Attributes('equiv_asm') };
    $equiv_asm &&= $equiv_asm->value();

    my ($chr_name)  = @{ $pipe_slice->get_all_Attributes('chr') };
    $chr_name &&= $chr_name->value();

    server_log("This chromosome is equivalent to '$chr_name' in '$equiv_asm' assembly");

    $sq->setarg('csver', $equiv_asm);
    $sq->setarg('name', $chr_name);

} else {
    server_log("No remapping is being done");
}

    # the common part for (1) pure pipeline genes,
    #                     (2) ensembl_db head (with pre-mapping)
    #                     (3) ensembl_db tail (assuming everything is 1:1)
my $sdba = odba_to_sdba($sq, $odba, $pipehead, $metakey);
my $satellite_slice = get_slice($sq, $sdba, $pipehead);

my $analysis = $sq->getarg('analysis');
my $genes = $satellite_slice->get_all_Genes($analysis);

server_log("Total of ".scalar(@$genes)." $analysis genes found");

my $output_string = '';

foreach my $gene (@$genes) {
    $output_string .= $gene->toXMLstring();
}

send_response($sq, $output_string, 1);

