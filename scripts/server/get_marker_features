#!/usr/local/bin/perl -w

my $pipehead = $ENV{PIPEHEAD}; # is set by the server for any GET request

use strict;
use OtterDefs;
use Bio::Otter::ServerQuery;
use Bio::Otter::ServerSide (':all');
use Bio::Otter::Lace::PipelineDB;
use Bio::EnsEMBL::DBSQL::DBAdaptor;
use Bio::Otter::DBSQL::DBAdaptor;
use Bio::Otter::Lace::ViaText ('%OrderOfOptions');

$| = 1;

my $sq = Bio::Otter::ServerQuery->new('dataset',
    'cs','csver','name','type','start','end','strand',
    'metakey','analysis');
set_nph($sq);

my $analysis = $sq->getarg('analysis');
my $metakey  = $sq->getarg('metakey') || ''; # defaults to pipeline

my $odba = get_DBAdaptor_from_CGI_species($sq, $OTTER_SPECIES, $pipehead);
my $sdba = odba_to_sdba($sq, $odba, $pipehead, $metakey);
pre_remapping($sq, $odba, $sdba, $pipehead);
my $satellite_slice = get_slice($sq, $sdba, $pipehead);

my $mfs = $satellite_slice->get_all_MarkerFeatures($analysis);

server_log("Total of ".scalar(@$mfs)." $analysis marker features found");

my @mf_optnames = @{ $OrderOfOptions{MarkerFeature} };
my @mo_optnames = @{ $OrderOfOptions{MarkerObject} };
my @ms_optnames = @{ $OrderOfOptions{MarkerSynonym} };
my $output_string = '';

    # Stringify only the simple fields:
my %mo_seen = (); # collect the seen marker object ids here
foreach my $mf (@$mfs) {
    my $mo = $mf->marker(); # object
    my $mo_id = $mo->dbID();

    if(!exists($mo_seen{$mo_id})) { # a new one

            # output a marker object line:
        my @mo_optvalues = ('MarkerObject');
        for my $opt (@mo_optnames) {
            push @mo_optvalues, $mo->$opt() || 0;
        }
        $output_string .= join("\t", @mo_optvalues)."\n";

            # output all marker synonym lines:
        my $mss = $mo->get_all_MarkerSynonyms();
        for my $ms (@$mss) {
            my @ms_optvalues = ('MarkerSynonym');
            for my $opt (@ms_optnames) {
                push @ms_optvalues, $ms->$opt() || 0;
            }
            push @ms_optvalues, $mo_id;
            $output_string .= join("\t", @ms_optvalues)."\n";
        }

        $mo_seen{$mo_id} = 1;
    }
    
        # output a marker feature line:
    my @mf_optvalues = ('MarkerFeature');
    for my $opt (@mf_optnames) {
        push @mf_optvalues, $mf->$opt();
    }
    push @mf_optvalues, $mo_id;

    $output_string .= join("\t", @mf_optvalues)."\n";
}

send_response($sq, $output_string, 1);

