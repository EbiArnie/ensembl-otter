#!/usr/local/bin/perl -w

my $pipehead = $ENV{PIPEHEAD}; # is set by the server for any GET request

use strict;
use OtterDefs;
use Bio::Otter::ServerQuery;
use Bio::Otter::ServerSide (':all');
use Bio::Otter::Lace::PipelineDB;
use Bio::EnsEMBL::DBSQL::DBAdaptor;
use Bio::Otter::DBSQL::DBAdaptor;
use Bio::Otter::Lace::ViaText ('%OrderOfOptions');

$| = 1;

my $sq = Bio::Otter::ServerQuery->new('dataset',
    'cs','csver','name','type','start','end','strand',
    'analysis');
set_nph($sq);

my $odba = get_DBAdaptor_from_CGI_species($sq, $OTTER_SPECIES, $pipehead);
my $pdba = odba_to_pdba($sq, $odba, $pipehead);
my $pipeline_slice = get_slice($sq, $pdba, $pipehead);

my @rf_optnames = @{ $OrderOfOptions{RepeatFeature} };
my @rc_optnames = @{ $OrderOfOptions{RepeatConsensus} };

my $analysis = $sq->getarg('analysis');
my $rfs = $pipeline_slice->get_all_RepeatFeatures($analysis);

server_log("Total of ".scalar(@$rfs)." $analysis repeat features found");

my $output_string = '';

    # Stringify only the simple fields:
my %rc_seen = (); # collect the seen repeat consensus ids here
foreach my $rf (@$rfs) {
    my $rc = $rf->repeat_consensus(); # object
    my $rc_id = $rc->dbID();

    if(!exists($rc_seen{$rc_id})) { # a new one

            # output a repeat consensus line
        my @rc_optvalues = ('RepeatConsensus');
        for my $opt (@rc_optnames) {
            push @rc_optvalues, $rc->$opt() || 0;
        }
        $output_string .= join("\t", @rc_optvalues)."\n";

        $rc_seen{$rc_id} = 1;
    }
    
        # output a repeat feature line
    my @rf_optvalues = ('RepeatFeature');
    for my $opt (@rf_optnames) {
        push @rf_optvalues, $rf->$opt();
    }
    push @rf_optvalues, $rc_id;

    $output_string .= join("\t", @rf_optvalues)."\n";
}

send_response($sq, $output_string, 1);

