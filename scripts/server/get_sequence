#!/usr/local/bin/perl -w

use strict;

use CGI;
use OtterDefs;

use Bio::Otter::DBSQL::DBAdaptor;
use Bio::Otter::Converter;
use Bio::Otter::Author;

$| = 1;

my $q = new CGI;
 
if ($ENV{SERVER_SOFTWARE} =~ /libwww-perl-daemon/) {
  print STDERR "NOTE NOTE NOTE Setting nph to 1\n";
  $q->nph(1);
}


my %params = $q->Vars;
if (!defined($OTTER_SPECIES->{$params{'dataset'}})) {
  error_exit($q, "Unknown data set " . $params{'dataset'} . " in get_sequence\n");
}

my %defaults = %{$OTTER_SPECIES->{'defaults'}};
my %dbinfo   = %{$OTTER_SPECIES->{$params{'dataset'}}};

my $chr      = $params{chr}       || error_exit($q, "No chromosome entered");
my $chrstart = $params{chrstart}  || error_exit($q, "No chromosome start coordinate entered");
my $chrend   = $params{chrend}    || error_exit($q, "No chromosome end coordinate entered");
my $type     = $params{type}      || $dbinfo{TYPE} || $defaults{TYPE};



my $db;
if (!defined($dbinfo{DNA_DBNAME})) {
  eval {
    $db = new Bio::Otter::DBSQL::DBAdaptor(-host =>   $dbinfo{HOST},
                                           -user =>   $dbinfo{USER},
                                           -pass =>   $dbinfo{PASS},
                                           -port =>   $dbinfo{PORT},
                                           -dbname => $dbinfo{DBNAME});
  };
  if ($@) {
    error_exit($q, "Failed opening database [$@]");
  }
} else {
  eval {
    $db = new Bio::EnsEMBL::DBSQL::DBAdaptor(-host => $dbinfo{DNA_HOST},
                                             -user => $dbinfo{DNA_USER},
                                             -pass => $dbinfo{DNA_PASS},
                                             -port => $dbinfo{DNA_PORT},
                                             -dbname => $dbinfo{DNA_DBNAME});
  };
  if ($@) {
    error_exit($q, "Failed opening database [$@]");
  }
}


my $sa  = $db->get_SliceAdaptor;

if (defined($params{type})) {
  $db->assembly_type($params{type});  
}


my $slice = $sa->fetch_by_chr_start_end($params{chr},
                                        $params{chrstart},
                                        $params{chrend});

print $q->header('text/plain');
my $seqstr = $slice->seq;
$seqstr =~ s/(.{72})/$1\n/g;
print $seqstr . "\n";

#End main

sub error_exit {
  my ($q,$reason) = @_;

  print $q->header;

  print "<otter>\n";
  print "  <response>\n";
  print "    ERROR: $reason\n";
  print "  </response>\n";
  print "</otter>\n";

  print STDERR "ERROR: $reason\n";
  
  exit;
}
