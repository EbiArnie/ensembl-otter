#!/usr/local/bin/perl -w

use strict;
use warnings;
use OtterDefs;
use Bio::Otter::DBSQL::DBAdaptor;
use Bio::Otter::Version;
use Bio::Otter::ServerQuery;
use Bio::Otter::ServerSide (':all');

$| = 1;
my $sq = Bio::Otter::ServerQuery->new('dataset','author');
set_nph($sq);

my $query_fail = "must be present to get a Sequence Set";
my $dataset = $sq->getarg('dataset')  || error_exit($sq, "'dataset' $query_fail");
my $author  = $sq->getarg('author')   || error_exit($sq, "'author' $query_fail");
my $odb = get_DBAdaptor_from_CGI_species($sq, $OTTER_SPECIES, 0);

my $auth_adapt = $odb->get_AuthorAdaptor();
my ($author_obj, $saved_err);
eval{
    $author_obj = $auth_adapt->fetch_by_name($author);
};
if($@){
    $saved_err  = $@;
    eval{
        $author_obj = $auth_adapt->fetch_by_name($OTTER_GLOBAL_ACCESS_USER);
    };
    if($@){
        error_exit($sq,"Failed to get an author.\n$@") unless $author_obj;
    }
}

my $sth = $odb->prepare(q{
            SELECT assembly_type
              , description
	          , analysis_priority
              , hide
              , vega_set_id
            FROM sequence_set
            ORDER BY assembly_type
            });
$sth->execute;
my $xml = '';
$xml   .= qq`  <dataset name="$dataset">\n`;
$xml   .= qq`    <sequencesets>\n`;
while (my ($name, $desc, $priority, $hide, $vega_id) = $sth->fetchrow) {
  $hide = ($hide eq 'Y') ? 1 : 0;
  $xml .= qq`      <sequenceset name="$name" hide="$hide" >\n`;
  $xml .= qq`        <description>$desc</description>\n`;
  $xml .= qq`        <priority>$priority</priority>\n`;
  $xml .= qq`        <vega_set_id>$vega_id</vega_set_id>\n`;
  $xml .= qq`      </sequenceset>\n`;
}
$xml .= qq`    </sequencesets>\n`;
$xml .= qq`  </dataset>\n`;

send_response($sq, $xml, 1);

__END__

=head1 NAME - get_sequencesets


=head1 DESCRIPTION

return xml for sequence sets

=head1 AUTHOR

Roy Storey,,,, B<email> rds@sanger.ac.uk
refactored by Sindhu K.Pillai B<email> sp1@sanger.ac.uk
