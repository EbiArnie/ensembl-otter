#!/usr/local/bin/perl -w

use strict;
use Bio::Otter::ServerScriptSupport;

my $server = Bio::Otter::ServerScriptSupport->new('dataset','author');

my $dataset      = $server->require_argument('dataset');
my $author_name  = $server->require_argument('author');

my $odba = $server->otter_dba();

$server->fetch_Author_obj();  # will break if author cannot be fetched

my $xml = '';
$xml   .= qq`  <dataset name="$dataset">\n`;
$xml   .= qq`    <sequencesets>\n`;

if($server->running_headcode()) {

    my $slice_adaptor     = $odba->get_SliceAdaptor();
    my $attribute_adaptor = $odba->get_AttributeAdaptor();

    foreach my $ss_slice (@{$slice_adaptor->fetch_all('chromosome', 'Otter')}) {

        my $name = $ss_slice->seq_region_name();
        my $description = ''; # default
        my $write_access= 1;  # default
        my $is_hidden   = 0;  # default

        for my $attrib (@{ $attribute_adaptor->fetch_all_by_Slice( $ss_slice ) }) {
            my ($code, $value) = ($attrib->code(), $attrib->value());
            if($code eq 'description') {
                $description  = $value;
            }elsif($code eq 'write_access') {
                $write_access = $value;
            }elsif($code eq 'is_hidden') {
                $is_hidden    = $value;
            }
        }

        $xml .= qq`      <sequenceset name="$name">\n`;
        $xml .= qq`        <description>$description</description>\n`;
        $xml .= qq`        <is_hidden>$is_hidden</is_hidden>\n`;
        $xml .= qq`        <write_access>$write_access</write_access>\n`;
        $xml .= qq`      </sequenceset>\n`;
    }

} else {
    my $sth = $odba->prepare(q{
                SELECT
                    ss.assembly_type
                  , ss.description
                  , ss.analysis_priority
                  , ss.hide
                  , ss.vega_set_id
                  , ssa.access_type
                FROM sequence_set ss
                LEFT JOIN sequence_set_access ssa
                  ON ss.assembly_type = ssa.assembly_type
                 AND ssa.author_id = (select author_id from author where author_name = ?)
                ORDER BY assembly_type
                });
    $sth->execute($author_name);

    while (my ($name, $desc, $priority, $hide, $vega_set_id, $access) = $sth->fetchrow) {
          $access ||= 'none';

          my $is_hidden    = (($access eq 'none') ? ($hide eq 'Y') : ($access eq 'I'))
                           ? 1 : 0;
          my $write_access = (($access eq 'RW') || (($hide eq 'N') && ($access eq 'none')))
                           ? 1 : 0;

          $priority ||= 0;
          $desc =~ s/\</\&lt;/g;
          $desc =~ s/\>/\&gt;/g;

          $xml .= qq`      <sequenceset name="$name">\n`;
          $xml .= qq`        <description>$desc</description>\n`;
          $xml .= qq`        <priority>$priority</priority>\n`;             # should go?
          $xml .= qq`        <vega_set_id>$vega_set_id</vega_set_id>\n`;    # should go as well?
          $xml .= qq`        <is_hidden>$is_hidden</is_hidden>\n`;
          $xml .= qq`        <write_access>$write_access</write_access>\n`;
          $xml .= qq`      </sequenceset>\n`;
    }

}

$xml .= qq`    </sequencesets>\n`;
$xml .= qq`  </dataset>\n`;

$server->send_response($xml, 1);

1;

__END__

=head1 NAME - get_sequencesets


=head1 DESCRIPTION

return xml for sequence sets

=head1 AUTHOR

Roy Storey,,,, B<email> rds@sanger.ac.uk
refactored by Sindhu K.Pillai B<email> sp1@sanger.ac.uk
Leo Gordon B<email> lg4@sanger.ac.uk - support for the new schema

