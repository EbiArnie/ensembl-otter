#!/usr/local/bin/perl -w

use strict;
use warnings;
use CGI;
use OtterDefs;
use Bio::Otter::DBSQL::DBAdaptor;
use Bio::Otter::Version;
use Bio::Otter::ServerSide qw(error_exit
                              send_response
                              set_nph);


$| = 1;
my $q = new CGI;
set_nph($q);
my %params = $q->Vars;
my $query_fail = "must be present to get a Sequence Set";
my $email   = $params{'email'}    || error_exit($q,"'email' $query_fail");
my $dataset = $params{'dataset'}  || error_exit($q,"'dataset' $query_fail");
my $author  = $params{'author'}   || error_exit($q,"'author' $query_fail");
unless ($OTTER_SPECIES->{$dataset}) {
    error_exit($q, "Unknown data set '$dataset'\n");
}
my $dbinfo   = $OTTER_SPECIES->{$dataset};
my $defaults = $OTTER_SPECIES->{'defaults'};
## and set
my $host     = $dbinfo->{HOST} || $defaults->{HOST};
my $user     = $dbinfo->{USER} || $defaults->{USER};
my $pass     = $dbinfo->{PASS} || $defaults->{PASS};
my $port     = $dbinfo->{PORT} || $defaults->{PORT};
my $dbname   = $dbinfo->{DBNAME};
print STDERR "Database [$dbname][$host][$user][$pass][$port]";
print STDERR "Author [$author] email [$email] dataset [$dataset]";
my( $odb );
eval {
    $odb = new Bio::Otter::DBSQL::DBAdaptor(-host   => $host,
                                            -user   => $user,
                                            -pass   => $pass,
                                            -port   => $port,
                                            -dbname => $dbname);
};
if ($@) {
    error_exit($q, "Failed opening otter database [$@]");
}
my $auth_adapt = $odb->get_AuthorAdaptor();
my ($author_obj, $saved_err);
eval{
    $author_obj = $auth_adapt->fetch_by_name($author);
};
if($@){
    $saved_err  = $@;
    eval{
        $author_obj = $auth_adapt->fetch_by_name($OTTER_GLOBAL_ACCESS_USER);
    };
    if($@){
        error_exit($q,"Failed to get an author.\n$@") unless $author_obj;
    }
}
my $sth = $odb->prepare(q{
            SELECT assembly_type
              , description
	          , analysis_priority
              , hide
              , vega_set_id
            FROM sequence_set
            ORDER BY assembly_type
            });
$sth->execute;
my $xml = '';
$xml   .= qq`  <dataset name="$dataset">\n`;
$xml   .= qq`    <sequencesets>\n`;
while (my ($name, $desc, $priority, $hide, $vega_id) = $sth->fetchrow) {
  $hide=$hide eq 'Y' ? 1 : 0;
  $xml .= qq`      <sequenceset name="$name" hide="$hide" >\n`;
  $xml .= qq`        <description>$desc</description>\n`;
  $xml .= qq`        <analysis_priority>$priority</analysis_priority>\n`;
  $xml .= qq`        <vega_set_id>`;
  $xml .=$vega_id;
  $xml .= qq`</vega_set_id>\n`;
  $xml .= qq`      </sequenceset>\n`;
}
$xml .= qq`    </sequencesets>\n`;
$xml .= qq`  </dataset>\n`;
send_response($q, $xml, 1);

__END__

=head1 NAME - get_sequencesets


=head1 DESCRIPTION

return xml for sequence sets

=head1 AUTHOR

Roy Storey,,,, B<email> rds@sanger.ac.uk
refactored by Sindhu K.Pillai B<email> sp1@sanger.ac.uk
