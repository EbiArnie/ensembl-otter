#!/usr/local/bin/perl -w

use OtterDefs;
use strict;

use CGI;

use Bio::Otter::DBSQL::DBAdaptor;
use Bio::Otter::CloneLockBroker;
use Bio::Otter::Converter;

use Bio::Otter::ServerSide qw(:all);

$| = 1;

my $q = new CGI;
set_nph($q);

server_log("************* Locking region ************");

my $odb    = get_DBAdaptor_from_CGI_species($q, $OTTER_SPECIES);
my $author = get_Author_from_CGI($q);
####################################################################
####################################################################
####################################################################
# Get all the params in nice variables

my %params   = $q->Vars;

my $chr       = $params{chr}      || error_exit($q, "No chromosome entered");
my $chrstart  = $params{chrstart} || error_exit($q, "No chromosome start coordinate entered");
my $chrend    = $params{chrend}   || error_exit($q, "No chromosome end coordinate entered");
my $cl_host   = $params{hostname} || $ENV{REMOTE_ADDR};

####################################################################

my $sgp  = $odb->get_SliceAdaptor;
my $cb   = Bio::Otter::CloneLockBroker->new($odb);
$cb->client_hostname($cl_host);

server_log("Getting slice [$chr] [$chrstart] [$chrend]");
my $slice = $sgp->fetch_by_chr_start_end($chr,
                                         $chrstart,
                                         $chrend);
server_log("Got the slice [$chr] [$chrstart] [$chrend]");

####################################################################
# Now actually do the locking
server_log("Attempting to lock clones...");

eval {
    $cb->lock_clones_by_slice($slice,$author);
};
error_exit($q, "Clones locked - exiting [$@]") if $@;

server_log("Obtained the locks.");

my $tp         = $slice->get_tiling_path();
my $xml_string = Bio::Otter::Converter::path_to_XML($chr, $chrstart, $chrend, $odb->assembly_type(), $tp);

send_response($q, $xml_string, 1);

####################################################################
