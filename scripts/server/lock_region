#!/usr/local/bin/perl -w

use OtterDefs;
use strict;

use Bio::Otter::ServerQuery;

use Bio::Otter::DBSQL::DBAdaptor;
use Bio::Otter::CloneLockBroker;
use Bio::Otter::Converter;

use Bio::Otter::ServerSide qw(:all);

$| = 1;

my $sq = Bio::Otter::ServerQuery->new('dataset',
    'chr', 'type', 'start', 'end', 'hostname'
);
set_nph($sq);

server_log("************* Locking region ************");

my $odb    = get_DBAdaptor_from_CGI_species($sq, $OTTER_SPECIES);
my $author = get_Author_from_CGI($sq);

my $chr     = $sq->getarg('chr')      || error_exit($sq, "No chromosome entered");
my $type    = $sq->getarg('type')     || error_exit($sq, "No assembly type entered");
my $start   = $sq->getarg('start')    || error_exit($sq, "No chromosome start coordinate entered");
my $end     = $sq->getarg('end')      || error_exit($sq, "No chromosome end coordinate entered");
my $cl_host = $sq->getarg('hostname') || $ENV{REMOTE_ADDR};

####################################################################

my $cb   = Bio::Otter::CloneLockBroker->new($odb);
$cb->client_hostname($cl_host);

server_log("Getting slice [$chr] [$start] [$end]");
my $slice = $odb->get_SliceAdaptor->fetch_by_chr_start_end($chr,
                                         $start,
                                         $end);

####################################################################
# Now actually do the locking
server_log("Attempting to lock clones...");

eval {
    $cb->lock_clones_by_slice($slice,$author);
};
error_exit($sq, "Clones locked - exiting [$@]") if $@;

server_log("Obtained the locks.");

my $tp         = $slice->get_tiling_path();
my $xml_string = Bio::Otter::Converter::path_to_XML($chr, $start, $end, $odb->assembly_type(), $tp);

send_response($sq, $xml_string, 1);

####################################################################
