#!/usr/local/bin/perl -w

use strict;
use Bio::Otter::ServerScriptSupport;
use Bio::Vega::ContigLockBroker;
use Bio::Otter::CloneLockBroker;
use Bio::Otter::Converter;
use Bio::Vega::Transform::Otter;
use Bio::Vega::Transform::XML;

my $server = Bio::Otter::ServerQuery->new('dataset',
    'cs', 'csver', 'name', 'type', 'start', 'end', 'strand', 'hostname'
);

my $cs     = $server->getarg('cs')     || 'chromosome';
my $csver  = $server->getarg('csver')  || (($cs eq 'chromosome') ? 'Otter' : undef);
my $name    = $server->requite_argument('name');
my $type    = $server->requite_argument('type');
my $start   = $server->requite_argument('start');
my $end     = $server->requite_argument('end');
my $strand = $server->getarg('strand') || undef;
my $cl_host = $server->getarg('hostname') || $ENV{REMOTE_ADDR};

my $running_headcode = $server->running_headcode();
my $odb        = $server->otter_dba();

my $cb = $running_headcode
    ? Bio::Vega::ContigLockBroker->new
    : Bio::Otter::CloneLockBroker->new($odb);
$cb->client_hostname($cl_host);

$server->log("Getting slice [$name] [$start] [$end]");
my $slice      = $server->get_slice($odb, $cs, $name, $type, $start, $end, $strand, $csver);
my $author_obj = $server->make_Author_obj();

$server->log("Attempting to lock clones...");
eval {
    $cb->lock_clones_by_slice($slice,$author_obj,$odb);
};
$server->error_exit("Clones locked - exiting [$@]") if $@;

$server->log("Obtained the locks.");

if($running_headcode) {
    my $xml = Bio::Vega::Transform::XML->generate_OtterXML([$slice],$odb,0);
    $server->send_response($xml);
} else {
    my $tp  = $slice->get_tiling_path();
    my $xml = Bio::Otter::Converter::path_to_XML($name, $start, $end, $odb->assembly_type(), $tp);
    $server->send_response($xml, 1);
}

1;

