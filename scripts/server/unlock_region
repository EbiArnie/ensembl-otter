#!/usr/local/bin/perl -w

use strict;
use Bio::Otter::ServerScriptSupport;
use Bio::Otter::CloneLockBroker;
use Bio::Otter::Converter;
use Bio::Vega::ContigLockBroker;
use Bio::Vega::Transform::Otter;

my $server = Bio::Otter::ServerScriptSupport->new(
    'dataset',
    'data',
    'author', 'email',
);

my $odba        = $server->otter_dba();
my $author_obj  = $server->make_Author_obj();

if ($odba->isa('Bio::Otter::DBSQL::DBAdaptor')) {

    my $input_stream = $server->tempfile_from_argument('data')->read_file_handle();
    my $slice;


  eval {
    my $dummy_genes;
    ($dummy_genes,$slice) = Bio::Otter::Converter::XML_to_otter($input_stream, $odba);

    my $chrname  = $slice->chr_name;
    my $chrstart = $slice->chr_start;
    my $chrend   = $slice->chr_end;
    $server->log("Processed incoming xml file with slice: [$chrname] [$chrstart] [$chrend]");
  };
  if ($@) {
	 $server->error_exit("Failed converting XML to otter [$@]");
  }
  $server->log("Done converting.");
  my $cb   = new Bio::Otter::CloneLockBroker($odba);
  $server->log("Checking region is locked...");
  eval {
	 $cb->check_locks_exist_by_slice($slice,$author_obj);
  };
  if ($@) {
	 $server->error_exit("Failed checking locks [$@]");
  }
  $server->log("Done checking region is locked.");
  $server->log("Unlocking clones...");
  eval{
    $cb->remove_by_slice($slice,$author_obj);
  };
  $server->error_exit("Failed to unlock clones") if $@;
  $server->log("Done unlocking clones.");
  $server->send_response("<response>\n</response>\n", 1);

} elsif ($odba->isa('Bio::Vega::DBSQL::DBAdaptor')) {

  my $slice;

  # the original string lives here:
  my    $xml_string = $server->require_argument('data');
  eval{
	 my $parser = Bio::Vega::Transform::Otter->new;
	 $parser->parse($xml_string);

	 my $cs             = 'chromosome';
	 my $segment_name   = $parser->get_AssemblyType;
	 my $chr_slice      = $parser->get_ChromosomeSlice;
	 my $chrstart       = $chr_slice->start;
	 my $chrend         = $chr_slice->end;
	 my $strand         = $chr_slice->strand;
	 my $cs_version     = $parser->init_CoordSystem_Version;

	 my $chrname        = $chr_slice->seq_region_name;
	 $slice =  $odba->get_SliceAdaptor()->fetch_by_region($cs,$segment_name,$chrstart,$chrend,$strand,$cs_version);
	 $server->log("Processed incoming xml file with slice: [$chrname] [$chrstart] [$chrend]");
  };
  if ($@) {
	 $server->error_exit("Failed converting XML to otter [$@]");
  }
  $server->log("Done converting.");
  $server->log("Checking region is locked...");
  my $cb=Bio::Vega::ContigLockBroker->new;
  eval {
	 $cb->check_locks_exist_by_slice($slice,$author_obj,$odba);
  };
  if ($@) {
	 $server->error_exit("Failed checking locks [$@]");
  }
  $server->log("Done checking region is locked.");
  $server->log("Unlocking clones...");
  eval{
	 $cb->remove_by_slice($slice,$author_obj,$odba);
  };
  $server->error_exit("Failed to unlock clones\n $@\n***\n") if $@;
  $server->log("Done unlocking clones.");
  $server->send_response("<response>\n</response>\n", 1);

} else {
  $server->error_exit("Require an Otter DB Adaptor and not '$odba'");
}

1;

