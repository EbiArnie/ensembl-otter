#!/usr/local/bin/perl -w

my $pipehead = $ENV{PIPEHEAD}; # is set by the server for any GET/POST request

use OtterDefs;
use strict;

use Bio::Otter::ServerQuery;

use Bio::Otter::CloneLockBroker;
use Bio::Vega::ContigLockBroker;
use Bio::Otter::Converter;
use Bio::Vega::Transform::Otter;
use Bio::Otter::Lace::TempFile;

use Bio::Otter::ServerSide qw(:all);


$| = 1;
my $sq = Bio::Otter::ServerQuery->new('dataset',
    'data', 'author', 'email',
);
set_nph($sq);

server_log("******* Starting to unlock region *********");
my $odb    = get_DBAdaptor_from_CGI_species($sq, $OTTER_SPECIES,$pipehead);
my $author = get_Author_from_CGI($sq,$pipehead);
my $auth_name = $author->name;
my $xml_data  = $sq->getarg('data') || error_exit($sq, "No xml data entered. Can't write region");
server_log("Length of data " . length($xml_data) );
my $tmp_xml = Bio::Otter::Lace::TempFile->new;
$tmp_xml->root('/tmp');
$tmp_xml->name(qq`unlock_region_${auth_name}.xml`);
my $tmp_xml_name = $tmp_xml->full_name();
server_log("Writing xml to tmp file [$tmp_xml_name]");

my $xml_fh = eval{
    $tmp_xml->write_file_handle();
} || error_exit($sq, "Can't write to '$tmp_xml_name' : $!");
print $xml_fh $xml_data;

# Save a bit of memory
$xml_data = undef;

server_log("Converting xml to otter...");
my $fh = $tmp_xml->read_file_handle();

####################################################################

my( $genes, $slice );
if ($odb->isa('Bio::Otter::DBSQL::DBAdaptor')) {
  eval {
    ($genes,$slice) = Bio::Otter::Converter::XML_to_otter($fh, $odb);
    my $chrname  = $slice->chr_name;
    my $chrstart = $slice->chr_start;
    my $chrend   = $slice->chr_end;
    server_log("Processed incoming xml file with slice: [$chrname] [$chrstart] [$chrend]");
  };
  if ($@) {
	 error_exit($sq, "Failed converting XML to otter [$@]");
  }
  server_log("Done converting.");
  my $cb   = new Bio::Otter::CloneLockBroker($odb);
  server_log("Checking region is locked...");
  eval {
	 $cb->check_locks_exist_by_slice($slice,$author);
  };
  if ($@) {
	 error_exit($sq, "Failed checking locks [$@]");
  }
  server_log("Done checking region is locked.");
  server_log("Unlocking clones...");
  eval{
    $cb->remove_by_slice($slice,$author);
  };
  error_exit($sq, "Failed to unlock clones") if $@;
  server_log("Done unlocking clones.");
  send_response($sq, "<response>\n</response>\n", 1);
}

elsif ($odb->isa('Bio::Vega::DBSQL::DBAdaptor')) {

##trying to unlock a new Otter db
  eval{
	 my $parser = Bio::Vega::Transform::Otter->new;
	 $parser->parsefile($tmp_xml_name);
	 my $cs='chromosome';
	 my $chr_slice=$parser->get_ChromosomeSliceDB($odb);
	 my $chrstart=$chr_slice->start;
	 my $chrend=$chr_slice->end;
	 my $strand=$chr_slice->strand;
	 my $cs_version=$parser->init_CoordSystem_Version;
	 my $segment_name=$parser->get_AssemblyType->{'assembly_type'};
	 my $chrname=$chr_slice->seq_region_name;
	 $slice =  $odb->get_SliceAdaptor()->fetch_by_region($cs,$segment_name,$chrstart,$chrend,$strand,$cs_version);
	 #unless ($slice) {
		#die "no slice fetched for cs:$cs, segment_name:$segment_name,chrstart:$chrstart, chrend:$chrend, strand:$strand, cs-version:$cs_version";
	 #}
	 $genes=$parser->get_Genes;
	 server_log("Processed incoming xml file with slice: [$chrname] [$chrstart] [$chrend]");
  };
  if ($@) {
	 error_exit($sq, "Failed converting XML to otter [$@]");
  }
  server_log("Done converting.");
  server_log("Checking region is locked...");
  eval {
	 Bio::Vega::ContigLockBroker::check_locks_exist_by_slice($slice,$author,$odb);
  };
  if ($@) {
	 error_exit($sq, "Failed checking locks [$@]");
  }
  server_log("Done checking region is locked.");
  server_log("Unlocking clones...");
  eval{
	 Bio::Vega::ContigLockBroker::remove_by_slice($slice,$author,$odb);
  };
  error_exit($sq, "Failed to unlock clones\n $@\n***\n") if $@;
  server_log("Done unlocking clones.");
  send_response($sq, "<response>\n</response>\n", 1);
}
else {
  server_log("Require an Otter DB Adaptor and not:$odb");
}

1;
