#!/usr/local/bin/perl -w

use OtterDefs;
use strict;

use CGI;

use Bio::Otter::CloneLockBroker;
use Bio::Otter::Converter;
use Bio::Otter::Lace::TempFile;

use Bio::Otter::ServerSide qw(:all);

####################################################################
################ COMMON POST CGI SCRIPT BEGIN ######################
####################################################################

$| = 1;

my $q = new CGI;
set_nph($q);

print STDERR "******* Starting to unlock region *********";

my $odb    = get_DBAdaptor_from_CGI_species($q, $OTTER_SPECIES);
my $author = get_Author_from_CGI($q);
####################################################################
####################################################################
####################################################################
# Get all the params in nice variables

my %params = $q->Vars;

my $xml_data  = $params{'data'}   || error_exit($q,"No xml data entered. Can't write region");
delete $params{'data'};
print STDERR "Length of data " . length($xml_data) . "";

my $auth_name = $author->name();
my $tmp_xml = Bio::Otter::Lace::TempFile->new;
$tmp_xml->root('/tmp');
$tmp_xml->name(qq`unlock_region_${auth_name}.xml`);
my $tmp_xml_name = $tmp_xml->full_name();
print STDERR "Writing xml to tmp file [$tmp_xml_name]";

my $xml_fh = eval{
    $tmp_xml->write_file_handle();
} || error_exit($q, "Can't write to '$tmp_xml_name' : $!");
print $xml_fh $xml_data;

# Save a bit of memory
$xml_data = undef;

print STDERR "Converting xml to otter...";
my $fh = $tmp_xml->read_file_handle();

####################################################################
################ COMMON POST CGI SCRIPT _END_ ######################
####################################################################


####################################################################

my( $genes, $slice );

eval {
    ($genes,$slice) = Bio::Otter::Converter::XML_to_otter($fh, $odb);
    
    my $chrname  = $slice->chr_name;
    my $chrstart = $slice->chr_start;
    my $chrend   = $slice->chr_end;

    print STDERR "Processed incoming xml file with slice: [$chrname] [$chrstart] [$chrend]";
};
if ($@) {
  error_exit($q, "Failed converting XML to otter [$@]");
}
print STDERR "done";

my $cb   = new Bio::Otter::CloneLockBroker($odb);

print STDERR "Checking region is locked...";

eval {
  $cb->check_locks_exist_by_slice($slice,$author);
};
if ($@) {
  error_exit($q, "Failed checking locks [$@]");
}
print STDERR "done";

print STDERR "Unlocking clones...";
eval{
    $cb->remove_by_slice($slice,$author);
};
error_exit($q, "Failed to unlock clones") if $@;

print STDERR "done";
####################################################################

# send_response($q, "<otter>\n<response>\n</response>\n</otter>\n");
send_response($q, "<response>\n</response>\n", 1);


