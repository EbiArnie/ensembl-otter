#!/usr/local/bin/perl -w

=head1 DESCRIPTION

test_vega_xml_parser -dbhost xxx -dbport xxx -dbname xxx -dbuser xxx -dbpass xxx -xml filename

=head1 OPTIONS

-dbhost database host

-dbport dataabse port

-dbname database name

-dbuser database user name

-dbpass database user password

-xml input otter xml file to be parsed

=cut

use strict;

use Bio::Vega::Transform::Otter;
use Bio::Vega::DBSQL::DBAdaptor;
use Bio::EnsEMBL::Slice;
use Getopt::Long;
use Data::Dumper;


{
  my $dbhost;
  my $dbport;
  my $dbname;
  my $dbuser;
  my $dbpass;
  my $help;
  my $xmlfile;

  &GetOptions(
				  'dbhost=s'   => \$dbhost,
				  'dbport=n'   => \$dbport,
				  'dbname=s'   => \$dbname,
				  'dbuser=s'   => \$dbuser,
				  'dbpass=s'   => \$dbpass,
				  'h|help'     => \$help,
				  'xml=s'  => \$xmlfile,
				 ) or ($help = 1);
  if ($help || !defined ($dbhost) || !defined($dbport) || !defined($dbname) || !defined($dbuser) || !defined($dbpass) ||!defined($xmlfile) ) {
    exec('perldoc', $0);
  }

  my $parser = Bio::Vega::Transform::Otter->new;
  $parser->parsefile($xmlfile);

  my $db = Bio::Vega::DBSQL::DBAdaptor->new(
				 -dbname => $dbname,
	          -host   => $dbhost,
             -user   => $dbuser,
             -port   => $dbport,
             -pass   => $dbpass,
	          );

 # print Dumper($parser->get_AssemblySlices);
  $parser->LoadAssemblySlices($db);



=head2 COMMENT

  ##check if project and the assembly of parser yield the same segment list
  my $chr='20';
  my $sa=$db->get_SliceAdaptor();
  my $chr_slice=$sa->fetch_by_region('chromosome','20',1,3351238,1,'Otter');
  print "\n\nfrom DB chromosome - contig\n\n";
  for my $segment ( @{$chr_slice->project('contig')} ) {
	 my $contig_slice=$segment->to_Slice();
	 print "$chr:",$segment->from_start," to "
		         ,$segment->from_end," vs "
			 ,$contig_slice->seq_region_name,":"
			 ,$contig_slice->start," to "
			 ,$contig_slice->end
			 ,"\n";
  }

 my $segment=$parser->make_Assembly_ProjectionSegment;

  print "\n\nfrom xml parser chromosome - contig\n\n";
  my $chr_ctg = $segment->{chr_ctg};

  for my $segment ( @{$chr_ctg} ) {
	 my $contig_slice=$segment->to_Slice();
	 print "$chr:",$segment->from_start," to "
		         ,$segment->from_end," vs "
			 ,$contig_slice->seq_region_name,":"
			 ,$contig_slice->start," to "
			 ,$contig_slice->end
			 ,"\n";
  }

  print "\n\nfrom DB clone - contig\n\n";

  my @cln_ids=('AL121905.23','AL160414.18','AL121891.22','AL109976.23','AL117334.29');
  foreach my $cln (@cln_ids){
	 my $cln_slice=$sa->fetch_by_region('clone',$cln);
	 for my $segment ( @{$cln_slice->project('contig')} ) {
		my $contig_slice=$segment->to_Slice();
		print "$chr:",$segment->from_start," to "
		  ,$segment->from_end," vs "
			 ,$contig_slice->seq_region_name,":"
				,$contig_slice->start," to "
				  ,$contig_slice->end
					 ,"\n";
	 }
  }

  print "\n\nfrom xml parser clone - contig\n\n";
  my $cln_ctg = $segment->{cln_ctg};

  for my $segment ( @{$cln_ctg} ) {
	 my $contig_slice=$segment->to_Slice();
	 print "$chr:",$segment->from_start," to "
		         ,$segment->from_end," vs "
			 ,$contig_slice->seq_region_name,":"
			 ,$contig_slice->start," to "
			 ,$contig_slice->end
			 ,"\n";
  }

=cut

  $parser->DESTROY;

}



warn "Parser now out of scope\n";








__END__

=head1 NAME - test_vega_xml_parser

=head1 AUTHOR

James Gilbert B<email> jgrg@sanger.ac.uk

