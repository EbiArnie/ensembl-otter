#!/usr/bin/env perl

use warnings;


### ana_notes

use strict;
use GenomeCanvas;

use Bio::EnsEMBL::Pipeline::AnaSubmission qw{ set_db_args sub_db prepare_statement get_db}  ;
use Hum::Submission qw{ submission_user user_has_access  get_user};
use Bio::Otter::Lace::Version;

use Hum::AnaStatus qw{ annotator_full_name };
use Hum::AnaStatus::Sequence;
use Hum::AnaStatus::SequenceSet;
use Hum::Conf qw{ HUMACESERVER_HOST HUMGIFACESERVER_PORT };
use GenomeCanvas::Band::SeqChooser;

use GenomeCanvas::AnaNotes;
#use GenomeCanvas::AnaNotes::History;
use Carp;
use Getopt::Long 'GetOptions';
#use Hum::SubmissionVersion;
use Tk::ROText;
use Tk::Dialog;

use Bio::Otter::Lace::PipelineDB;

my $user;
my $write;
my $set_name;

my ($db_pass , $db_name , $port , $host);
my ($pipeline_db); # pipeline database adaptor (holds the submission status details)
{
    my $list_sets = 0;
    GetOptions(
        'help!'     => \&useage,
        'list!'     => \$list_sets,
	'user:s'    => \$user,
	'write'	    => \$write,
        'password:s'=> \$db_pass,
        'dbname:s'  => \$db_name,
        'port:i'    => \$port,
        'host:s'    => \$host
        ) or useage();
   
        
    set_db_args(  db_name => $db_name ,
                  db_pass => $db_pass ,
                  user    => $user ,        
                  port    => $port ,
                  host    => $host,
                                );

    # check global access to database
    exit 0 unless Hum::SubmissionVersion::check_version();   #note: this line will need the package directory added
    
    # user is login unless overridden by 'user'en
    # (this would be place to put password check)
    $user=submission_user($user);

    # create subroutine that call be called from anywhere to return
    # user
    {
		sub main_user {
		    return $user;
		}
    }

    # list based on R/RW permissions of user
    if ($list_sets) {
        list_sets($user);
        exit;
    }

    $set_name = shift(@ARGV) || useage();
    die "Unknown elements on command line: '@ARGV'\n" if @ARGV;
    
    # annotator is set to user, if has RW access, else set to '' for R access
    my( $annotator , $annotator_id  );
    if (is_valid_annotator($user,$set_name)) {
        $annotator = $user;
        $annotator_id = annotator_id($user) ; 
    }
  
    # debug
    ##print "a: |$annotator|\n";s
    
    # Set group writable
    umask(002);
    
#    my $set_id = set_name_to_set_id($set_name);
    ##exit 0;
    
    my $mw = CanvasWindow::MainWindow->new;
    $mw->title($set_name);
    my $gc = GenomeCanvas::AnaNotes->new($mw);
    my $chooser = GenomeCanvas::Band::SeqChooser->new;
    $gc->add_Band($chooser);
    
    $chooser->chooser_map(make_chooser_map($set_name)); # chooser map stores informaion of db results
    $chooser->chooser_tags(get_seq_chooser_tags());     # chooser tags are the tags that go with each line of the display - taken from choosermap
    my @display_list = (1,2,3,4,5,6);                  # list contains the coulmns in the order to be displayed
    # if you want to display different columns / different order , then change this list to correspont with the rows in the chooser_map 
    $chooser->chooser_display_list(\@display_list);    
    
    my $canvas = $gc->canvas;
    $canvas->configure(-selectbackground => 'gold');
    $canvas->CanvasBind('<Button-1>', sub {
        return if $gc->delete_message;
        $gc->deselect_all_selected_not_current();
        $gc->toggle_current;
        });
    $canvas->CanvasBind('<Shift-Button-1>', sub {
        return if $gc->delete_message;
        $gc->toggle_current;
        });
    
    {
        my( $comment );
        if ($annotator) {
            my $button_frame = $mw->Frame;
            $button_frame->pack(
                -side => 'top',
                );

            my $comment_label = $button_frame->Label(
                -text => 'Note text:',
                );
            $comment_label->pack(
                -side => 'left',
                );

            $comment = $button_frame->Entry(
                -width              => 55,
                -background         => 'white',
                -selectbackground   => 'gold',
                );
            $comment->pack(
                -side => 'left',
                );
        }
        
        
        my $button_frame2 = $mw->Frame;
        $button_frame2->pack(
            -side => 'top',
            );
        
        if ($annotator) {
            my $set_reviewed = sub{
                my $c = $comment->get;
#                my @ana_seq_id_list = list_selected_ana_seq_ids($canvas);
                my @ana_seq_id_list = list_selected_unique_ids($canvas);
                return unless @ana_seq_id_list;
                warn "here";
                set_reviewed($annotator_id, $c, @ana_seq_id_list);
                $chooser->chooser_map(make_chooser_map($set_name));
                $gc->render;
                $gc->set_scroll_region_and_maxsize;
                };
            make_button($button_frame2, 'Set note', $set_reviewed, 0);
            $mw->bind('<Control-s>', $set_reviewed);
            $mw->bind('<Control-S>', $set_reviewed);
        }
        
        my $hunter = sub{
            watch_cursor($mw);
            hunt_for_selection($gc);
            default_cursor($mw);
            };
        
        ## First call to this returns empty list!
        #my @all_text_obj = $canvas->find('withtag', 'contig_text');
        
        make_button($button_frame2, 'Hunt selection', $hunter, 0);
        $mw->bind('<Control-h>', $hunter);
        $mw->bind('<Control-H>', $hunter);
        
        my $refesher = sub{
            watch_cursor($mw);
            $chooser->chooser_map(make_chooser_map($set_name));
            $gc->render;
            $gc->set_scroll_region_and_maxsize;
            default_cursor($mw);
            };
        make_button($button_frame2, 'Refresh', $refesher, 0);
        $mw->bind('<Control-r>', $refesher);
        $mw->bind('<Control-R>', $refesher);
        $mw->bind('<F5>', $refesher);

        my $run_lace = sub{
            watch_cursor($mw);
            #my @sequence_name_list = list_selected_sequence_names($canvas);
            my @sequence_name_list = list_selected_accessions($canvas);
            return unless @sequence_name_list;
            fork_lace_process($annotator, @sequence_name_list);
            default_cursor($mw);
            };
        make_button($button_frame2, 'Run lace', $run_lace, 4);
        $mw->bind('<Control-l>', $run_lace);
        $mw->bind('<Control-L>', $run_lace);

        if ($annotator) {
            
            my $do_embl_dump = sub{
                watch_cursor($mw);
                my @sequence_name_list = list_selected_sequence_names($canvas);
                foreach my $seq (@sequence_name_list) {
                    do_embl_dump($seq);
                }
                default_cursor($mw);
                };
            make_button($button_frame2, 'EMBL dump', $do_embl_dump, 0);
            $mw->bind('<Control-e>', $do_embl_dump);
            $mw->bind('<Control-E>', $do_embl_dump);
        }
        
        my $print_to_file = sub {
            $gc->page_width(591);
            $gc->page_height(841);
            my @files = $gc->print_postscript($set_name);
            warn "Printed to files:\n",
                map "  $_\n", @files;
          };
        $mw->bind('<Control-p>', $print_to_file);
        $mw->bind('<Control-P>', $print_to_file);
                    

        
        $mw->bind('<Control-Button-1>', sub{ popup_ana_seq_history($gc) });
        $mw->bind('<Double-Button-1>',  sub{  popup_ana_seq_history($gc) });
        make_button($button_frame2, 'Quit',    sub{ $pipeline_db = undef; # otherwise we see "potential memory leak" errors 
                                                    $mw->destroy }, 0);
    }
    
    
    
#    my $status = 'CREATED';
#    my $analysis = 'test';   
    $gc->render;
    $gc->fix_window_min_max_sizes;
    
    ###############
    Tk::MainLoop();
    ###############
}
#---------------------------------------------------------------------------------------------------------------------
{
    my( $top, $hist , $hist_gen_canv, $hist_chooser , $comment_string, $asid);

    sub popup_ana_seq_history {
        my( $gc ) = @_;
        
        my $canvas = $gc->canvas;
               
        $asid = get_current_unique_id($canvas)
            or return;
                
        unless ($top) {
            # Make a new Toplevel object which is a transient of $master
            my $master = $canvas->toplevel;
            $top = $master->Toplevel;
            $top->transient($master);
            
            # create new GenomeCanvas object
            $hist_gen_canv = GenomeCanvas::AnaNotes::History->new($top) ;
            # create new SeqChooser object
            $hist_chooser = GenomeCanvas::Band::SeqChooser->new ;
            # add band to history canvas
            $hist_gen_canv->add_Band($hist_chooser) ;

            # Close only unmaps it from the display
            my $close_command = sub{ $top->withdraw ;
                                   };
            $top->bind(    '<Control-w>',      $close_command);
            $top->bind(    '<Control-W>',      $close_command);
            $top->bind(    '<Escape>',         $close_command);
            $top->protocol('WM_DELETE_WINDOW', $close_command);
            
            my $font = 'helvetica';
            my $size = $gc->font_size;

            my $canv = $hist_gen_canv->canvas;
            $canv->configure(-selectbackground => 'gold');

            # Make a buttons inside a frame
            my $frame = $top->Frame->pack(
                    -side   => 'top',
                    );
                    
            my $exit = $frame->Button(
                -text => 'Close',
                -command => $close_command ,
                )->pack(
                    -side   => 'left',
                    );
            
            $frame->Label(
                -text   => ' Note text:',
                )->pack(-side => 'left');
            
            # entry widget to type updated comment into
            my $comment_entry = $frame->Entry(
                -width              => 55,
                -background         => 'white',
                -selectbackground   => 'gold',
                -textvariable       => \$comment_string ,
                )->pack(
                        -side   => 'left',
                        -padx   => 4,
                        -fill   => 'x',
                        );      

            # button to update database and refresh remark history
            my $update_button = $frame->Button(
                -text=> 'Update Comment',
                -command => sub { 
                    if (confirm_update($top) eq 'Ok'){
                        update_db_comment($canv , $hist_chooser, $comment_entry->get());
                        update_window($hist_chooser, $asid);
                        $comment_string = "";
                        $hist_gen_canv->render;
                    }
                })->pack(-side   => 'left', -padx   => 4,);
            
            $canv->CanvasBind('<Button-1>',
                sub {
                    #my $selected = $canv->find('withtag' , 'current');
                    $hist_gen_canv->deselect_all_selected_not_current();
                    $hist_gen_canv->toggle_current();    
 
                    # get id of currently selected row
                    my @list = $canv->gettags('current'); 
                    #if (scalar(@list) == 0) {warn  "no current\n "} else {warn (join ":" ,@list)}  ; 
                    my @id = grep {s/^unique_id=//} @list;
                    my @choosermap = $hist_chooser->chooser_map;
                    
                    # get comment from choosermap (choosermap is a 2 dimensional array)
                    $comment_string = @choosermap[$id[0]]->[5] ; 
                    @choosermap[$id[0]]->[5] = $comment_entry->get();
                   
                    $comment_entry->focusForce;
                    });
        } else {
            # window is already present, just need to clear textbox
            $comment_string = '';
        }   
        my @text = get_history_for_ana_seq_id($asid);
                 
        $hist_chooser ->chooser_map(@text);
        $hist_chooser->chooser_tags(get_hist_chooser_tags());
        # to change which of these elements are displayed or their order, alter the list on the next line 
        my @display_list = ( 2,3,4,5,6); # this is the list of elements in the chooser_map array that are to be displayed
        $hist_chooser->chooser_display_list(\@display_list);  
    
        $hist_gen_canv->render;
        
        $top->deiconify;
        $top->raise;
                    
#        my $lines = $text =~ tr/\n//;
#        $hist->delete('1.0', 'end');                   #
#        $hist->insert('1.0', $text);                   #

        # Size widget to fitc
        $hist_gen_canv->fix_window_min_max_sizes;    

        # Set the window title, and make it visible
        my $win = $hist_gen_canv->canvas->toplevel; #$hist->toplevel;
        $win->configure( -title => "Remark history" );
                
    }

#--------------------------------------------------------------------------------------------------------
sub get_hist_chooser_tags{
    ## these chooser tags correspond to the  2d array produced below, to make the hist_chooser work
    
    my %tag_hash = ("unique_id=" => 0) ;   
    
    return \%tag_hash ;
    
}
#--------------------------------------------------------------------------------------------------------------------------
## this next method returns a 2d array that holds most of the information for the history canvas.
## the 1st array contains information contained in each row of the display. Each row (currently) has the format 
## [0] row_id 
## [1] contig_id
## [2] contig name
## [3] note time
## [4] author name
## [5] note
## [6] db_id 

    sub get_history_for_ana_seq_id {
        my( $asid ) = @_;
    
        my $sth = prepare_statement(qq{
            SELECT  cg.contig_id ,
                    cg.name ,
                    sn.note_time ,
                    a.author_name ,
                    sn.note   
            FROM    sequence_note sn,
                    author a,
                    contig cg        
            WHERE   cg.contig_id = sn.contig_id
            AND     a.author_id = sn.author_id
            AND     cg.contig_id = ?
            ORDER BY sn.note_time DESC
        });
    
        $sth->execute($asid);
    
        my @text  ;
        my $id = 0; # for just now - used as a row_id - needs a unique identifier, as the clone name wont work in the history 
        while (my @row = $sth->fetchrow) { 
        
 #         $txt .= join("\t", @row) . "\n";
            unshift @row , $id;

            push (@text,[@row]);            
            $id++;
        } 
    
        # if an undefined array is returned, the choosermap get/set method will not update the previous version 
        if (! @text ){
            @text = [-1, -1 ,"no notes to go with this contig"];
        }
        return @text;
    }
}
#--------------------------------------------------------------------------------------------------------------------

sub list_sets {
    my ( $user ) = @_;
    my $sth = prepare_statement(q{
        SELECT assembly_type
          , description
        FROM sequence_set
        });
    $sth->execute;
    
    my $rows = $sth->fetchall_arrayref;
    if (@$rows == 0) {
        print "No sets found!\n";
        return;
    }
    
    my @head = ('Set name', 'Description');
    my $max_l = length($head[0]);
    foreach my $set_name (map $_->[0], @$rows) {

	# check if user has access to this set
	next if (user_has_access($user,$set_name) eq '');

        my $l = length($set_name);
        if ($l > $max_l) {
            $max_l = $l
        }
    }
    my $pattern = "  \%${max_l}s  %-s\n";
    
    print "\n";
    printf($pattern, @head);
    print "\n";
    foreach my $r (@$rows) {

	# check if user has access to this set
	next if (user_has_access($user,$r->[0]) eq '');

        printf($pattern, @$r);
    }
    print "\n";
}
#-----------------------------------------------------------------------------------------------------------------------
##sub set_name_to_set_id {
##    my( $set_name ) = @_;
##    
##    my $sth = prepare_statement(q{
##        SELECT set_id
##        FROM ana_set
##        WHERE set_name = ?
##        });
##    $sth->execute($set_name);
##    my ($set_id) = $sth->fetchrow;
##    
##    if ($set_id) {
##        return $set_id;
##    } else {
##        die "No such set '$set_name'\n";
##    }
##}

sub watch_cursor {
    my( $w ) = @_;
    
    $w->configure( -cursor => 'watch' );
    $w->update;
}

sub default_cursor {
    my( $w ) = @_;
    
    $w->configure( -cursor => undef );
    $w->update;
}

{
    my( %lace_dir );

    sub fork_lace_process {
        my( $annotator, @seq_name_list ) = @_;

        # Record the lace db directory of each
        # of the sequences.
        my $time = hr_min_sec();
        my $lace_dir = "/var/tmp/lace-$seq_name_list[0]-$time";
        foreach my $seq (@seq_name_list) {
            if (my $dir = $lace_dir{$seq}) {
                if (-e $dir) {
                    warn "Error lace already running on '$seq' in '$dir'\n";
                    return;
                }
            }
        }
        map $lace_dir{$_} = $lace_dir, @seq_name_list;

        if (my $pid = fork) {
            #$SIG{'CHLD'} = 'IGNORE';
            #sleep 15;   # Prevent multiple button presses
            return 1;
        }
        elsif (defined $pid) {
            my @lace = ('otter', '-path', $lace_dir, '-set', $set_name);
	    # RO unless recognised annotator + asked for write
	    if ($annotator) {
		push(@lace, '-user', $user);
		if ($write){
		    push(@lace, '-write',);
		}	
	    }
	    exec(@lace, @seq_name_list);
        }
        else {
            die "Error: Can't fork : $!";
        }
    }

    sub do_embl_dump {
        my( $sequence_name ) = @_;
        
        my $ana_seq = Hum::AnaStatus::Sequence->new_from_sequence_name($sequence_name);
        my $ana_dir = $ana_seq->analysis_directory;
        my( $lace_dir );
        if ($lace_dir = $lace_dir{$sequence_name} and -e $lace_dir) {
            my @embl_dump_command = ('emblDump',
                '-path', $lace_dir,
                '-dump', $ana_dir,
                $sequence_name,
                );
            warn "Running '@embl_dump_command'\n";
            system(@embl_dump_command) == 0
                or warn "Error ($?) from emblDump";
        } else {
            warn "No lace database for '$sequence_name'";
        }
    }
}

sub hr_min_sec {
    my ($sec, $min, $hr) = localtime(time);

    return sprintf("%02d_%02d_%02d", $hr, $min, $sec);
}

sub hunt_for_selection {
    my( $gc ) = @_;
    
    my $canvas = $gc->canvas;

    ##my $ana_seq = get_current_ana_seq_id($canvas);
    ##return unless $ana_seq;

    ##my ($rec) = $canvas->find('withtag', "ana_seq_id=$ana_seq&&contig_seq_rectangle");        
    ##toggle_selection($gc, $rec);
    my( $query_str );
    eval {
        $query_str = $canvas->SelectionGet;
    };
    return if $@;
    #warn "Looking for '$query_str'";
    my $matcher = make_matcher($query_str);
    
    my $current_obj;
    foreach my $obj ($canvas->find('withtag', 'selected')) {
        $current_obj ||= $obj;
        toggle_selection($gc, $obj);
    }
    
    my $selected_text_obj = $canvas->selectItem;

    ### Weirdly, I have to call this "find" twice,
    ### or the first time it is called it returns
    ### an empty list.
    my @all_text_obj = $canvas->find('withtag', 'contig_text');
       @all_text_obj = $canvas->find('withtag', 'contig_text');
    
    if ($selected_text_obj) {
        if ($selected_text_obj == $all_text_obj[$#all_text_obj]) {
            # selected obj is last on list, so is to leave at end
        } else {
            for (my $i = 0; $i < @all_text_obj; $i++) {
                if ($all_text_obj[$i] == $selected_text_obj) {
                    my @tail = @all_text_obj[$i + 1 .. $#all_text_obj];
                    my @head = @all_text_obj[0 .. $i];
                    @all_text_obj = (@tail, @head);
                    last;
                }
            }
        }
    }

    my $found = 0;
    foreach my $obj (@all_text_obj) {
        my $text = $canvas->itemcget($obj, 'text');
        my $hit = &$matcher($text);
        if ($hit) {
            $canvas->selectClear;
            my $start = index($text, $hit);
            die "Can't find '$hit' in '$text'" if $start == -1;
            $canvas->selectFrom($obj, $start);
            $canvas->selectTo  ($obj, $start + length($hit) - 1);
            $found = $obj;
            last;
        }
    }
    
    unless ($found) {
        $gc->message("Can't find '$query_str'");
        return;
    }
    
    $gc->scroll_to_obj($found);
    
    my @overlapping = $canvas->find('overlapping', $canvas->bbox($found));
    foreach my $obj (@overlapping) {
        my @tags = $canvas->gettags($obj);
        if (grep $_ eq 'contig_seq_rectangle', @tags) {
            unless (grep $_ eq 'selected', @tags) {
                toggle_selection($gc, $obj);
            }
        }
    }
}

sub make_matcher {
    my( $pattern ) = @_;
    
    # Escape non word characters
    $pattern =~ s{(\W)}{\\$1}g;
    
    my $matcher = eval "sub {
        my( \$text ) = \@_;
        
        \$text =~ /($pattern)/i;
        return \$1;
        }";
    if ($@) {
        die "Error in pattern '$pattern' \n$@";
    } else {
        return $matcher;
    }
}
#--------------------------------------------------------------------------------------
sub list_selected_unique_ids{
    
    my $canvas = shift @_;
    my @selected_objects = $canvas->find('withtag', 'selected');
    my( @db_id_list );
    foreach my $obj (@selected_objects) { 
#        warn    join "\n",     $canvas->gettags($obj); 
        my ($ana_seq_id) = grep s/^unique_id=//, $canvas->gettags($obj); 
        die "Found selected object without unique_id" unless $ana_seq_id;
        push(@db_id_list, $ana_seq_id);
    }
    return @db_id_list;
    
}
#---------------------------------------------------------------------------------------
##sub list_selected_ana_seq_ids {
##    my( $canvas ) = @_;
##    
##    my @selected_objects = $canvas->find('withtag', 'selected');
##    my( @ana_seq_id_list );
##    foreach my $obj (@selected_objects) {
##        ### rather than return the tag that I am expecting , this is returning a 1 (should be a grep rather than a map?)
##        my ($ana_seq_id) = map /ana_seq_id=/, $canvas->gettags($obj); 
##        die "Found selected object without ana_seq_id" unless $ana_seq_id;
##        push(@ana_seq_id_list, $ana_seq_id);
##    }
##    return @ana_seq_id_list;
##}
##
###---------------------------------------------------------------------------------------

sub list_selected_sequence_names {
    my( $canvas ) = @_;
    
    my @selected_objects = $canvas->find('withtag', 'selected');
    my( @sequence_name_list );
    foreach my $obj (@selected_objects) {
        my ($sequence_name) = map /sequence_name=(.+)/, $canvas->gettags($obj); 
        die "Found selected object without sequence_name" unless $sequence_name;
        push(@sequence_name_list, $sequence_name);
    }
    return @sequence_name_list;
}

sub list_selected_accessions {
    my( $canvas ) = @_;
    
    my @selected_objects = $canvas->find('withtag', 'selected');
    my( @sequence_name_list );
    foreach my $obj (@selected_objects) {
        my ($sequence_name) = map /accession=(.+)/, $canvas->gettags($obj); 
        die "Found selected object without accession" unless $sequence_name;
        push(@sequence_name_list, $sequence_name);
    }
    return @sequence_name_list;
}

sub set_reviewed {
    my( $user, $comment, @ana_id_list ) = @_;

    
    foreach my $id (@ana_id_list) {
        update_old_notes($id);
        add_new_entry($id, $user, $comment);
    }
}

##sub contig_name_to_id{
##    my  @name_list = @_ ;
##    my $name_list_string = '"' . (join '" , "' , @name_list) .'"' ;
##    warn $name_list_string ;
##    my $sth = prepare_statement(q{SELECT clone_id FROM clone, contig WHERE IN ()});
##    
##    return @name_list;    
##}


sub confirm_update{
    my $mw = shift @_;
    my $confirm = $mw->messageBox(
                            -title      =>  "Warning!" ,
                            -message    =>  "This action will overwrite the selected entry. (Use the text entry field in the main window if you want to add a new comment)\nAre you sure you want to change this entry?", 
                            -type       =>  "OKCancel"   
                            );
    return $confirm;
}

 
sub update_old_notes{
    my  $ctg_id = shift @_;
#    warn "updating contig : $ctg_id";
    my ($sth);
    
    $sth ||= prepare_statement(q{
                UPDATE sequence_note 
                SET is_current = 'N'
                WHERE contig_id = ?
    });
    $sth->execute($ctg_id);    
}


{
    my( $sth );
    
    sub add_new_entry {
        my( $ctg_id, $user_id, $comment ) = @_;
      
        $sth ||= prepare_statement (q{
                INSERT INTO sequence_note (
                    contig_id, 
                    author_id,
                    is_current,
                    note_time,
                    note )
                VALUES (?,?,'Y',NOW(),?)
        });
        
#        warn "id : $ctg_id \nuser id: $user_id\ncomment : $comment  ";
        
        $sth->execute($ctg_id, $user_id, $comment);
        $sth->rows or confess "Error inserting [$ctg_id, $user, $comment]";
    }
}


sub make_button {
    my( $parent, $label, $command, $underline_index ) = @_;
    
    my @args = (
        -text => $label,
        -command => $command,
        );
    push(@args, -underline => $underline_index)
        if defined $underline_index;
    my $button = $parent->Button(@args);
    $button->pack(
        -side => 'left',
        );
    return $button;
}

# return 1 if annotator has RW access; 0 if not;
sub is_valid_annotator {
    my( $annotator, $set_name ) = @_;

    my $access_type = user_has_access($annotator, $set_name);

    # if access is restricted and this annotator has no access then report as if no such set
    if($access_type eq ''){
	die "No such set '$set_name'\n";
    }elsif($access_type eq 'RW'){
	return 1;
    }else{
	return 0;
    }
}
#----------------------------------------------------------------------------------------------------
sub get_current_unique_id {
    my( $canvas ) = @_;
    
   # my ($ana_seq) = map /^ana_seq_id=(\d+)/, $canvas->gettags('current');
    my ($ana_seq) = map /^unique_id=(\d+)/, $canvas->gettags('current');
    
    return $ana_seq;
}
#----------------------------------------------------------------------------------------------------
sub deselect_all_selected_not_current {
    my( $gc ) = @_;
    
    my $canvas = $gc->canvas;
    $canvas->selectClear;
    foreach my $obj ($canvas->find('withtag', 'selected&&!current')) {
        toggle_selection($gc,  $obj);
    }
}
#----------------------------------------------------------------------------------------------------
sub toggle_selection {
    my( $gc, $obj ) = @_;
    
    my $canvas = $gc->canvas;
    my $is_selected = grep $_ eq 'selected', $canvas->gettags($obj);
    my( $new_colour ); 
    if ($is_selected) {
        $new_colour = '#aaaaff';
        $canvas->dtag($obj, 'selected');
    } else {
        $new_colour = '#ffcccc';
        $canvas->addtag('selected', 'withtag', $obj);
    }
    $canvas->itemconfigure($obj,
        -fill => $new_colour,
        );
}
#---------------------------------------------------------------------------------------------------

sub useage {
    exec('perldoc', $0);
}

#----------------------------------------------------------------------------------------------------

sub get_seq_chooser_tags{
    ## these chooser tags correspond to the chooser map produced below, to make the sequence_chooser work
    
    my %tag_hash = ("dbid=" => 6 , "sequence_name="=> 0  , "accession=" => 1 , "unique_id="=>0) ;   
    
    return \%tag_hash ;
    
}

#--------------------------------------------------------------------------------------------------------

#each row has the format ..
##  [0] clone_name
##  [1] clone_accession
##  [2] author_name
##  [3] note time
##  [4] note
##  [5] status
##  [6] contig_id

sub make_chooser_map {
    my( $set_name ) = @_;
    
    
    unless (defined $pipeline_db){
    ## connect to otterdb to get pipeline db details. get submission status from there
        my $otter_db = get_db();
        ## defined $otter_db ?  warn "defined" : warn "not defined";
        $pipeline_db = Bio::Otter::Lace::PipelineDB::get_pipeline_DBAdaptor($otter_db) ;
    }
               
    confess "No set_id given" unless $set_name;
    
    print STDERR "Getting set notes...";
        
    my $sql = q{
        SELECT cl.name
          , cl.embl_acc
          , cl.embl_version
          , au.author_name
          , sn.note_time
          , sn.note
          , cg.contig_id
          , a.chr_start
          , a.chr_end
        FROM (sequence_set ss
              , clone cl
              , contig cg)
        LEFT JOIN assembly a
          ON ss.assembly_type = a.type
        LEFT JOIN sequence_note sn
          ON sn.contig_id = a.contig_id
        LEFT JOIN author au
          ON au.author_id = sn.author_id
        WHERE cg.contig_id = a.contig_id
          AND cl.clone_id = cg.clone_id
          AND (sn.is_current = 'Y'
               OR sn.is_current IS NULL)
          AND ss.assembly_type = ?
        ORDER BY chr_start
          , chr_end
          , sn.note_time
    };
    
    
        
    my $sth = prepare_statement($sql);
    $sth->execute($set_name);

    my(  $clone_name,   $acc,       $ver,
         $author_name,  $note_time, $note ,
         $contig_id,         $chr_st ,   $chr_end 
          );
    $sth->bind_columns(
         \$clone_name,  \$acc,       \$ver,
         \$author_name, \$note_time, \$note ,
         \$contig_id,   \$chr_st ,     \$chr_end );
    
    my( @map );
    my $prev_end ;
    while ($sth->fetch) {
        
        # if there is a gap of more than 10 kb , add a gap band        
        if (defined $prev_end && ($chr_st - $prev_end) > 10000 )
        {  
            push(@map, ['GAP']);
        }
        $prev_end = $chr_end;
        
        # format time 
        ($note_time) = $note_time =~ /(\d{4}-\d\d-\d\d)/ if $note_time;
        

        my $status ;         #   = 'CURRENT';
#            my $analysis =  $clone_name;
#            $monitor->show_jobs_by_status_and_analysis ($status , $analysis);
        $status = get_status($pipeline_db , $clone_name);   

        push(@map,
                [$contig_id , $clone_name, $acc,  $author_name, $note_time, $note , $status   ]
            );
    }
    print STDERR " got them.\n";
    
    return @map;    
}

#---------------------------------------------------------------------------------------------------------------

sub get_status{
    my ($db , $name) = @_ ;
    
#    warn defined ($name) ? "defined $name" : "not defined" ;
    my $sth = $db->prepare(q{ SELECT status 
                    FROM job j, job_status js, clone c
                    WHERE  j.job_id = js.job_id
                    AND c.name = j.input_id
                    AND is_current = 'Y'
                    AND c.name = ?
                    });
    
    $sth->execute($name);
    
    my $status = $sth->fetch();
#    warn @$status->[0];
    
    if ($status){
        return @$status->[0];
    }else {
        return "";
    }
}

## doesnt appear to be used any more......?
sub get_unplaced_clones {
    my( @map ) = @_;
    
    my %is_placed = map {$_->[1], 1} grep $_->[1], @map;
    my( @unplaced );
    foreach my $seq_name (list_all_seq_names())  {
        push(@unplaced, $seq_name) unless $is_placed{$seq_name};
    }
    return @unplaced;
}

sub annotator_id{
    my $username = shift @_ ;
    
    my $sth = prepare_statement(q{
        SELECT author_id FROM author WHERE author_email = ?
        });
    $sth->execute($username);
    my $id = $sth->fetchrow;
    return $id;    
}


{
       
    sub update_db_comment{
        
        my $canv = shift @_;            #canvas object of popup window
        my $chooser = shift @_;         #hist_chooser object 
        my $new_string = shift @_;      # new string to be updated
        my @choosermap = $chooser->chooser_map;
        
       
        my ($time_variable, $seq_id_variable , $ctg_id, $current_time);
        
        my @list = $canv->gettags('selected');
        my @row_ids = grep {s/^unique_id=//} @list;
        my $row_selected = $row_ids[0];

#        warn $row_selected;

        if ( scalar(@list) > 0 ) #checks that something has been selected.
        {
            
            $time_variable   =  $choosermap[$row_selected]->[3];
            $ctg_id          =  $choosermap[$row_selected]->[1];

            ##warn $ctg_id ;
            ##warn $time_variable;
            ##warn $new_string;
            
            $choosermap[$row_selected]->[4] = $new_string ;
 
            
            $chooser->chooser_map(@choosermap);
 
#$$comment_ref = '';
            
            # assuming that a combination of time and contig_name will be unique.  
            my $sth = prepare_statement(qq{
                    UPDATE sequence_note 
                    SET note = ?
                    WHERE contig_id = ?
                    AND note_time =  ?
                                    });
                                    
             $sth->execute($new_string,$ctg_id, $time_variable);
            
        }
        else
        {   warn "nothing has been selected to update";

        }
    }
    
    sub update_window{   
        my ($hist_chooser, $asid) = @_;
        my @text = get_history_for_ana_seq_id($asid);
    
        $hist_chooser->chooser_map(@text);
        
    
    }

    sub contig_id_from_band{
        my $canvas = shift @_ ;
        
        my ($ana_seq) = map /^dbid=(\d+)/, $canvas->gettags('current');
        return $ana_seq;
        
    }
}



__END__

=head1 NAME - ana_notes

=head1 SYNOPSIS

  ana_notes SEQUENCE_SET_NAME
  ana_notes -list
  ana_notes -help

=head1 DESCRIPTION

Used to attach notes to sequences in sets of
sequences during annotation.  A new note replaces
the note seen in the display, but does not delete
it from the central database.

If run by non-annotators, it doesn't display the
editing controls.

=head1 PARAMETERS

=over 4

=item -list

Lists all the sequence sets in the database to the
terminal.

=item SEQUENCE_SET_NAME

The name of the sequence set.

=back

=head1 KEYBOARD SHORT CUTS

=over 4

=item Control-H

B<H>unts for the text in the clipboard.  Just
highlight a piece of text in your terminal or
editor, and press B<Control-H> in ana_notes to
find it.

=item Control-S

B<S>ave the current text in the B<Note text>
entry box to all the selected (pink)
sequences.  This also re-synchronizes with the
central database.

=item Control-R or F5

Re-synchronizes with the central database, so
that you can see the changes to notes made by
other annotators.

=item Control-L

Run B<lace> on the selected sequences.

=item Control-E

Run B<emblDump> on the selected sequences.

=back

=head1 AUTHOR

James Gilbert B<email> jgrg@sanger.ac.uk

