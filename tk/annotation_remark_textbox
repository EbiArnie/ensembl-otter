#!/usr/bin/env perl

use warnings;


### annotation_remark_textbox

use strict;
use Tk::ROText;
use CanvasWindow;

my $ann_tag = 'annotation';
my $voc_tag = 'controlled_vocabulary';

{
    my $widget = CanvasWindow::MainWindow->new('Annotation Remarks');

    my $std_border = 3;
    my $frame = $widget->Frame(
        -border => $std_border,
        )->pack(-side => 'top');
    my $label_switch_frame = $frame->Frame(
        -border => $std_border,
        )->pack(
            -side => 'left',
            -expand => 1,
            -fill => 'y',
            );
    
    my @label_pack = (-side => 'top', -expand => 1, -fill => 'x');
    my @label_anchor = (-padx => $std_border, -anchor => 'w');
    my $text_label = $label_switch_frame->Label(
        -text   => "Remarks:",
        @label_anchor,
        )->pack(@label_pack);


    # Button for setting Visible/annotation remarks
    my @annotation_color = (-foreground => 'white', -background => 'IndianRed3');
    my $annotation_button = $label_switch_frame->Button(
        -text   => $ann_tag,
        @label_anchor,
        @annotation_color,
        -activeforeground => 'white',
        -activebackground => 'IndianRed2',
        )->pack(@label_pack);

    my $text = $frame->Scrolled('Text',
        -scrollbars         => 'e',
        -width              => 30,
        -height             => 4,
        -exportselection    => 1,
        -background         => 'white',
        -wrap               => 'word',
        );
    $text->pack(-side => 'left', -expand => 1, -fill => 'both');
    $text->tagConfigure($ann_tag, @annotation_color);
    $text->tagLower($ann_tag, 'sel');
    $text->tagConfigure($voc_tag,
            -foreground => 'black',
            -background => 'GreenYellow',
            );
    $text->tagLower($voc_tag, 'sel');

    my $tw = $text->Subwidget('text');
    my $class = ref($tw);

    my @disable = qw{

        <Button-2>
        <ButtonRelease-2>

        <<Cut>>
        <<Paste>>

        <Control-Key-t>

        <Return>
        <Control-Key-o>
        
        <Tab>
        <Control-Key-i>
    };
    foreach my $seq (@disable) {
        # $tw->bind($class, $seq, '');
        $tw->bind($seq, [\&ignore_in_controlled_vocab, Tk::Ev('K')]);
    }
    
    my @back_delete_sequences = qw{
        
        <BackSpace>
        <Control-Key-h>
        <Meta-Key-BackSpace>

    };
    foreach my $seq (@back_delete_sequences) {
        $tw->bind($seq, [\&backspace_delete_whole_ctrl_vocab_line, Tk::Ev('K')]);
    }

    my @forward_delete_sequences = qw{
        
        <Delete>
        <Meta-Key-d>

        <Control-Key-k>
        <Control-Key-d>

    };
    foreach my $seq (@forward_delete_sequences) {
        $tw->bind($seq, [\&forward_delete_whole_ctrl_vocab_line, Tk::Ev('K')]);
    }
    
    $tw->bind($class, '<Button-3>', '');

    $tw->bind($class, '<Key>', '');
    $tw->bind('<Key>', [\&insert_char, Tk::Ev('A')]);


    my (@tags) = $tw->bindtags;
    warn "tags=(@tags)\n";
    $tw->bindtags([@tags[1, 0, 2, 3]]);

    # $tw->tagBind('annotation', '<BackSpace>', sub{ warn "BackSpace\n" });


    foreach my $sequence ($tw->Tk::bind($class)) {
        print "        $sequence\n";
        # if ($sequence =~ /Key/) {
        #     #print STDERR "seq=$sequence\n";
        #     $canvas->Tk::bind($class, $sequence, '');
        # }
    }
    

    #my $class = ref($text->Subwidget('text'));
    #foreach my $sequence ($text->bind($class)) {
    #    if ($sequence =~ /Key/) {
    #        print STDERR "seq=$sequence\n";
    #        #$text->bind($class, $sequence, '');
    #    } else {
    #        print STDERR "non-key=$sequence\n";
    #    }
    #}

    
    $annotation_button->configure(-command => sub {
        my ($line) = $text->index('insert') =~ /^(\d+)/;
        my $line_start = "$line.0";
        my @this_line = ("$line_start", "$line_start lineend");
        #warn "line start = $line_start";
        my $annotation_is_set = 0;
        if (grep $_ eq $ann_tag, $text->tagNames("$line_start")) {
            $annotation_is_set = 1;
            $text->tagRemove($ann_tag, @this_line);
        }
        unless ($annotation_is_set) {
            $text->tagAdd($ann_tag, @this_line);
        }
    });
    
    my $button_frame = $widget->Frame->pack(-side => 'top');
    $button_frame->Button(
        -text => 'Get remarks',
        -command => sub {
                my %ann_index = $text->tagRanges($ann_tag);
                my $line = 0;
                foreach my $string (split /\n/, $text->get('1.0', 'end')) {
                    $line++;
                    # Trim trailing spaces and full-stops from remark
                    $string =~ s/[\s\.]+$//;
                    next if $string eq '';
                    my $type = $ann_index{"$line.0"} ? 'Annotation_remark' : 'Remark';
                    print STDERR "$type: '$string'\n";
                }
            },
        )->pack(-side => 'left');

    $text->insert('1.0', "Line 1\nLine second is a really long line that will wrap\nLine the third\n");
    $text->insert('2.0', "Controlled vocab", $voc_tag, "\n");

    Tk::MainLoop();
}

sub backspace_delete_whole_ctrl_vocab_line {
    my ($text, $keysym) = @_;

    my $n = 1;
    if ($text->compare('insert', '==', 'insert linestart')) {
        # Need to check 2 chars back past "\n" if we are at linestart
        $n = 2;
    }
    my $prev = $text->index("insert - $n chars");
    if (is_ctrl_vocab_char($text, $prev)) {
        $text->delete("$prev linestart", "$prev lineend");
        if ($n == 2) {
            $text->SetCursor('insert - 1 chars');
        }
        $text->break;
    }
    elsif ($n == 2 and is_ctrl_vocab_char($text, 'insert')) {
        # We are at the start of a controlled vocab line
        # so don't delete because it would join lines.
        $text->break;
    }
}

sub forward_delete_whole_ctrl_vocab_line {
    my ($text, $keysym) = @_;
    
    my $modifier = '';
    if ($text->compare('insert', '==', 'insert lineend')) {
        $modifier = ' + 1 chars';
    }
    my $next = $text->index('insert' . $modifier);
    if (is_ctrl_vocab_char($text, $next)) {
        $text->delete("$next linestart", "$next lineend");
        $text->break;
    }
    elsif ($modifier and is_ctrl_vocab_char($text, 'insert - 1 chars')) {
        # We are at the end of a controlled vocab line
        # so don't delete because it would join lines
        $text->break;
    }
}

sub ignore_in_controlled_vocab {
    my ($text, $keysym) = @_;
    
    # Need to choose "insert" for keyboard events
    # and "current" for mouse events.
    my $posn = $keysym ? 'insert' : 'current';

    if ($text->compare($posn, '==', "$posn linestart")) {
        # Return at linestart is always OK
        return if $keysym eq 'Return';
    }

    if ($text->compare($posn, '==', "$posn lineend")) {
        if (is_ctrl_vocab_char($text, "$posn + 1 chars")) {
            if ($keysym eq 'Delete'
            or $keysym eq 'd'
            or $keysym eq 'k')
            {
                # Delete not OK at line end where next line is Controlled Vocab
                warn "Ignoring a delete at line end\n";
                $text->break;
            }
            # elsif () {
            #         
            # }
        }
    }
    
    if (is_ctrl_vocab_char($text, $posn)) {
        warn "Ignoring a $keysym\n";
        $text->break;
    }
}

sub is_ctrl_vocab_char {
    my ($text, $posn) = @_;
    
    return grep $_ eq $voc_tag, $text->tagNames($posn);
}

# Inserts (printing) characters with the same style as the rest of the line
sub insert_char {
    my( $text, $char ) = @_;
    
    # We only want to insert printing characters in the Text box!
    # [:print:] is the POSIX class of printing characters.
    return unless $char =~ /[[:print:]]/;

    # Do not edit controlled vocabulary
    return if grep $_ eq $voc_tag, $text->tagNames('insert linestart');

    # Expected behaviour is that any selected text will
    # be replaced by what the user types.
    $text->deleteSelected;
    
    # There will only ever be one or zero tags per line in out Text box.
    my ($tag) = grep $_ eq $ann_tag, $text->tagNames('insert linestart');
    
    $text->insert('insert', $char, $tag);
}

__END__

=head1 NAME - annotation_remark_textbox

=head1 AUTHOR

James Gilbert B<email> jgrg@sanger.ac.uk

