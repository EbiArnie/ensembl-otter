#!/usr/bin/env perl -Tw

### fader_gif

use strict;
use GD;
use CGI;
use CGI::Carp 'fatalsToBrowser';

{
    my $q = CGI->new;

    my $max_steps = 255;
    my $max_img_width = 2000;
    
    my( $steps );
    if ($steps = $q->param('steps')) {
        if ($steps > $max_steps) {
            $steps = $max_steps;
        }
    } else {
        $steps = $max_steps;
    }
    $q->param('steps', $steps);
    
    my( $width );
    if ($width = $q->param('width')) {
        my $max_width = int($max_img_width / $steps);
        if ($width > $max_width) {
            $width = $max_width;
        }

    } else {
        $width = 2;
    }
    $q->param('width', $width);
    
    my $img_height = 200;
    my $img_width = ($steps + 1) * $width;

    if ($q->param('get_gif')) {
        print_gif ($q, $steps, $width, $img_height, $img_width);
    } else {
        print_form($q, $steps,         $img_height, $img_width);
    }
}

sub print_gif {
    my( $q, $n_steps, $step_width, $img_height, $img_width ) = @_;
    
    my $rgb_param = $q->param('rgb')
        or die "No rgb paramter given";
    my @steps = make_tile_colours($rgb_param, $n_steps);

    my $img = GD::Image->new($img_width, $img_height);
    
    my($y1, $y2) = (0, $img_height - 1);
    for (my $i = 0; $i < @steps; $i++) {
        my $rgb = $steps[$i];
        my $color = $img->colorAllocate(@$rgb);
        my $x = $i * $step_width;
        $img->filledRectangle($x,$y1,$x + $step_width - 1,$y2, $color);
    }
    print $q->header(
        -type => 'image/gif',
        ),
        $img->gif;
}

sub print_form {
    my( $q, $n_steps, $img_height, $img_width ) = @_;
    
    
    print $q->header,
        $q->start_html(
            -title => 'Fading a color to white',
            -bgcolor => '#999999',
            ),
        $q->start_form(
            -method => 'GET',
            ),
        
        "<br>Colour to fade (rgb):\n",
        $q->textfield(
            -name => 'rgb',
            -size => 7,
            -default => '#339900',
            ),
        
        "&nbsp;Number of steps:\n",
        $q->textfield(
            -name => 'steps',
            -size => 3,
            -default => 255,
            ),
        
        "&nbsp;Step width:\n",
        $q->textfield(
            -name => 'width',
            -size => 3,
            -default => 2,
            ),
        
        "&nbsp\n",
        $q->submit,
        $q->end_form,
        "<hr><br>\n";

    if (my $rgb_param = $q->param('rgb')) {
        eval{ web_hex_to_rgb($rgb_param) };
        if ($@) {
            print qq{<font size=6>Illegal rgb parameter: <b><code>'$rgb_param'</code></b></font>\n};
        } else {
            my $url = $q->self_url;
            print qq{<img src="$url&get_gif=1" height=$img_height width=$img_width>};
            
            my @steps = make_tile_colours($rgb_param, $n_steps);
            print qq{<br><pre>\n};
            for (my $i = 0; $i < @steps; $i++) {
                my $rgb = $steps[$i];
                my $web = rgb_to_web_hex(@$rgb);
                printf "   %3d  %s\n", $i + 1, $web;
            }
            print qq{</pre>\n};
        }
    }
    print $q->end_html;
}

sub make_tile_colours {
    my( $rgb_param, $n_steps ) = @_;
    
    my $max = 0xff;
    my @begin_rgb = web_hex_to_rgb($rgb_param);
    
    my( @steps );
    for (my $i = 0; $i < $n_steps; $i++) {
        my $rgb = [];
        foreach my $c (@begin_rgb) {
            push(@$rgb,
                $c + (($max - $c) / $n_steps) * $i
                );
        }
        push(@steps, $rgb);
    }
    push(@steps, [$max, $max, $max]);
    
    return @steps
}

sub web_hex_to_rgb {
    my( $rgb_param ) = @_;
    
    my @rgb = $rgb_param =~ /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
        or die "Illegal rgb parameter '$rgb_param'\n";
    @rgb = map hex($_), @rgb;
    return @rgb;
}

sub rgb_to_web_hex {
    my( @rgb ) = @_;
    
    return sprintf "#%02x%02x%02x", @rgb;
}

__END__

=head1 NAME - fader_gif

=head1 AUTHOR

James Gilbert B<email> jgrg@sanger.ac.uk

