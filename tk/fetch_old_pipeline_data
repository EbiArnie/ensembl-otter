#!/usr/bin/env perl

use warnings;


use lib '/Users/jgrg/work/ensembl-branch-6/modules';
use lib '/Users/jgrg/work/bioperl-0.7.2';

### fetch_old_pipeline_data

use strict;
use Hum::AnaStatus::Sequence;
use Hum::AnaStatus::EnsAnalysis;

use Bio::EnsEMBL::Ace::Filter;
use Bio::EnsEMBL::Ace::DataFactory;
use Bio::EnsEMBL::Ace::Filter::Gene;
use Bio::EnsEMBL::Ace::Filter::Gene::Predicted;
use Bio::EnsEMBL::Ace::Filter::Gene::Halfwise;
use Bio::EnsEMBL::Ace::Filter::Repeatmasker;
use Bio::EnsEMBL::Ace::Filter::TRF;
use Bio::EnsEMBL::Ace::Filter::Similarity;
use Bio::EnsEMBL::Ace::Filter::SimpleFeature;
use Bio::EnsEMBL::Ace::Filter::CpG;

# Now get DNA from otter db
#use Bio::EnsEMBL::Ace::Filter::DNA;

{
    my( @seq_names ) = @ARGV;
    
    my( @ana_seq );
    foreach my $name (@seq_names) {
        my( $seq );
        eval{ 
            $seq = Hum::AnaStatus::Sequence
                ->new_from_sequence_name($name);
        };
        if ($@) {
            warn "Can't fetch Hum::AnaStatus::Sequence '$name' :\n$@"
        } else {
            push(@ana_seq, $seq);
        }
    }
    
    foreach my $seq (@ana_seq) {
        my $name = $seq->full_sequence_name;
        my @ens_ana = Hum::AnaStatus::EnsAnalysis
            ->fetch_all_complete_for_ana_seq_id($seq->ana_seq_id);

        # Always parse humace.ace file
        ###find_humace_acefile($lace_files, $seq);

        if (@ens_ana > 1) {
            warn "Got ", scalar(@ens_ana), " complete ensembl analyses!\n",
                " -- choosing the first";
        }
        warn "Using Ensembl pipeline data for '$name'\n";
        write_enspipe_ace_data($ens_ana[0], \*STDOUT, $name);
        
        ### Need to add in:
        ###write_ensembl_genes(\*ENSPIPEACE, $seq);
    }
}

sub write_enspipe_ace_data {
    my( $ens_ana, $fh, $name ) = @_;
    
    my $ens_db = $ens_ana->get_EnsAnalysisDB;
           
    my( $factory );
    unless ($factory = $ens_db->ace_data_factory) {
        $factory = make_ace_filter_factory($ens_db->db_adaptor);
        $ens_db->ace_data_factory($factory);
    }
    
    my $vcontig = $ens_ana->get_EnsEMBL_VirtualContig_of_contig;
    $vcontig->id($name);
    
    print $fh $factory->ace_data_from_contig($vcontig);
}


sub make_ace_filter_factory {
    my( $ens_db ) = @_;

    warn "Making ace filter factory\n";

    my $ana_adaptor = $ens_db->get_AnalysisAdaptor;

    my $factory = Bio::EnsEMBL::Ace::DataFactory->new;

    # DNA now comes from the otter db
    #my $DNA = Bio::EnsEMBL::Ace::Filter::DNA->new;
    #$DNA->analysis_object( $ana_adaptor->fetch_by_logic_name('SubmitContig') );
    #$factory->add_AceFilter($DNA);

    my $halfwise = Bio::EnsEMBL::Ace::Filter::Gene::Halfwise->new;
    $halfwise->analysis_object( $ana_adaptor->fetch_by_logic_name('Halfwise') );
    $halfwise->url_string('http\\:\\/\\/www.sanger.ac.uk\\/cgi-bin\\/Pfam\\/getacc?%s');
    $factory->add_AceFilter($halfwise);

    my $genscan = Bio::EnsEMBL::Ace::Filter::Gene::Predicted->new;
    $genscan->is_off_by_one(1);
    $genscan->analysis_object( $ana_adaptor->fetch_by_logic_name('genscan') );
    $factory->add_AceFilter( $genscan );

    my $fgenesh = Bio::EnsEMBL::Ace::Filter::Gene::Predicted->new;
    $fgenesh->is_off_by_one(1);
    $fgenesh->analysis_object( $ana_adaptor->fetch_by_logic_name('fgenesh') );
    $factory->add_AceFilter($fgenesh);

    my $repeatmasker = Bio::EnsEMBL::Ace::Filter::Repeatmasker->new;
    my $repeat_lib_dir='/nfs/humace2/RepeatMasker_2001-06-19';
    if($ENV{"LACE_LOCAL"}){
	$repeat_lib_dir=$ENV{"LACE_LOCAL"}."/RepeatMasker_2001-06-19";
    }
    $repeatmasker->repeatmasker_home($repeat_lib_dir);
    $repeatmasker->analysis_object( $ana_adaptor->fetch_by_logic_name('RepeatMask') );
    $factory->add_AceFilter($repeatmasker);

    my $trf = Bio::EnsEMBL::Ace::Filter::TRF->new;
    $trf->analysis_object($ana_adaptor->fetch_by_logic_name('trf'));
    $factory->add_AceFilter($trf);

    my %logic_tag_method = (
        'Est2Genome'        => [qw{             EST_homol  EST_eg           }],
        'Est2Genome_human'  => [qw{             EST_homol  EST_eg-human     }],
        'Est2Genome_mouse'  => [qw{             EST_homol  EST_eg-mouse     }],
        'Est2Genome_other'  => [qw{             EST_homol  EST_eg           }],
        'Full_dbGSS'        => [qw{             GSS_homol  GSS_eg           }],
        'Full_dbSTS'        => [qw{             STS_homol  STS_eg           }],
        'sccd'              => [qw{             EST_homol  egag             }],
        'riken_mouse_cdna'  => [qw{             EST_homol  riken_mouse_cdna }],
        'primer'            => [qw{             DNA_homol  primer           }],
        'vertrna'           => [qw{ vertebrate_mRNA_homol  vertebrate_mRNA  }],
        'Swall'             => [qw{             Pep_homol  BLASTX           }],
        'zfishEST'          => [qw{             EST_homol  EST_eg-fish      }],
        );
    foreach my $logic_name (keys %logic_tag_method) {
        if (my ($ana) = $ana_adaptor->fetch_by_logic_name($logic_name)) {
            my( $tag, $meth ) = @{$logic_tag_method{$logic_name}};
            my $sim = Bio::EnsEMBL::Ace::Filter::Similarity->new;
            $sim->analysis_object($ana);
            $sim->homol_tag($tag);
            $sim->method_tag($meth);
            unless ($logic_name eq 'Swall' or $logic_name eq 'Swall') {
                $sim->hseq_prefix('Em:');
            }
            #if ($percent_identity_cutoff) {
            #    $sim->percent_identity_cutoff($percent_identity_cutoff);
            #}
            $factory->add_AceFilter($sim);
        }
    }

    my $GC = Bio::EnsEMBL::Ace::Filter::SimpleFeature->new;
    $GC->analysis_object( $ana_adaptor->fetch_by_logic_name('GC') );
    $factory->add_AceFilter($GC);

    my $CpG = Bio::EnsEMBL::Ace::Filter::CpG->new;
    $CpG->analysis_object( $ana_adaptor->fetch_by_logic_name('CpG') );
    $factory->add_AceFilter($CpG);

    return $factory;
}



__END__

=head1 NAME - fetch_old_pipeline_data

=head1 AUTHOR

James Gilbert B<email> jgrg@sanger.ac.uk

