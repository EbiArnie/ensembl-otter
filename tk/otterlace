#!/usr/bin/env perl

use strict;
use warnings;

### otterlace

use POSIX ();
use Log::Log4perl;
use Try::Tiny;

use Bio::Otter::Lace::Client;
use Bio::Otter::Git;
use Bio::Otter::Error;
use Bio::Otter::Utils::RipVanWinkle;

use CanvasWindow::MainWindow;
use MenuCanvasWindow::SpeciesListWindow;
use EditWindow::Password;

{
    # Become leader of process group so that "kill -$$" at end works
    setpgrp();

    my $do_recover;
    Bio::Otter::Lace::Defaults::do_getopt('recover!' => \$do_recover);
    if (@ARGV) {
        my $name = $ENV{OTTERLACE_RAN_AS};
        if (defined $name) {
            $name =~ s{ -> .*}{};
        } else {
            $name = $0;
        }
        die "$name: options (@ARGV) were not understood"; # RT#334602
    }

    my $client = Bio::Otter::Lace::Defaults::make_Client();
    $client->make_log_file('otterlace');
    # After this, we are writing logfile
    my $logger = Log::Log4perl->get_logger('otter.main');

    $client->cleanup_sessions;
    $client->cleanup_log_dir('otterlace');

    Bio::Otter::Git->dump($logger);

    $client->ua_tell_hostinfo;

    my $main_window = CanvasWindow::MainWindow->new
      ($Bio::Otter::Lace::Client::PFX."Species List");

    # Look for zombies every 5 seconds
    $main_window->repeat(
        5000,
        sub {
            while ((my $dead_pid = waitpid(-1, POSIX::WNOHANG)) > 0) {
                my $rc = $?;
                $rc .= ($rc & 127
                        ? ' = signal '.($rc & 127)
                        : ' = rc '.($rc >> 8)) if $rc != 0;
                $logger->warn("Process $dead_pid exited $rc");
            }
        }
    );

    $main_window->repeat(8 * 3600 * 1000, # 8 hours; RT#317950
                         [ $logger, 'warn', 'Logfile keepalive (8h)' ]);

    # When we wake up late, log it
    my $rvw_ticker = Bio::Otter::Utils::RipVanWinkle->new($main_window, 1000, 3);

    my $SpeciesListWindow = MenuCanvasWindow::SpeciesListWindow->new($main_window);
    $SpeciesListWindow->Client($client);

    my $prompt_sub = sub {
        my ($self) = @_;
        my $user = $self->author;

        my $pass = '';
        my $toplevel = $main_window->Toplevel
          (-title => $Bio::Otter::Lace::Client::PFX.'Enter Password');
        my $pass_win = EditWindow::Password->new($toplevel);
        $pass_win->prompt_string("Enter web password for '$user'");
        $pass_win->passref(\$pass);
        $pass_win->initialise;
        $toplevel->deiconify;
        $toplevel->raise;
        $toplevel->focus;
        $pass_win->get_password;
        return $pass;
    };
    my $passwarn_sub = sub {
        my ($self, $msg) = @_;
        $logger->warn("passwarn: $msg");
        my $dialog = $main_window->DialogBox
          (-title => $Bio::Otter::Lace::Client::PFX.'Problem logging in',
           -buttons => ['Ok'],);
        $dialog->add(qw( Label -justify left -text ), $msg)->pack;
        $dialog->Show;
        return;
    };

    $client->password_prompt($prompt_sub);
    $client->password_problem($passwarn_sub);

    if ($client->no_user_config) {
        $SpeciesListWindow->show_preferences(wait => 1);
    }

    try {
        $client->get_server_otter_config;
        $client->reauthorize_if_cookie_will_expire_soon;
    } catch {
        my $msg = "Cannot start: $_";
        $passwarn_sub->($client, $msg);
        die $msg;
    };

    $SpeciesListWindow->draw;

    # postpone slow checks, for improved responsiveness
    $main_window->after(750, [ $SpeciesListWindow, 'ensure_tools' ]);

    if ($do_recover) { # otterlace --recover
        $main_window->iconify;
        $main_window->afterIdle([ $SpeciesListWindow, 'recover_some_sessions', 'no_wait']);
    }

    Tk::MainLoop();

    $logger->info("Exiting");

    local $SIG{'TERM'} = 'IGNORE';

    # Sending signal to negative of our PID sends
    # signal to all the processes in our process
    # group, ie: all of the children. This cleans
    # up any stray processes we have launched.
    kill TERM => -$$;

    # NB. we are still here, and so is our logger.  Session recovery
    # may be blocked until we are gone.
}

__END__

=head1 NAME - otterlace

=head1 DESCRIPTION

B<otterlace> is a graphical client for the otter
annotation database that uses a local acedb
database with ZMap and Perl/Tk tools to provide a
gene annotation interface.

=head1 COMMAND LINE

The standard parameters controlled by the
B<Bio::Otter::Lace::Defaults> module can be given
on the command line, but the user will not
usually need to give them.  See its documentation
for details.

=head1 FLAGS

=over 4

=item B<view>

Turns off write access to the database, providing
a safe read-only session.  It is still possible
to edit gene structures, but they will not be
saved to the otter server.

=back

=head1 AUTHOR

Ana Code B<email> anacode@sanger.ac.uk

