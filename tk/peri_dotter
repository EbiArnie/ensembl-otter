#!/usr/local/bin/perl -w

### peri_dotter

use strict;
use Hum::EnsCmdLineDB;
use CanvasWindow;

## ~/.ensdb_defaults entry for Hum::EnsCmdLineDB

=pod

    # chr 9 peri VEGA
    -host vegabuild
    -port 3304
    -user ottadmin
    -password wibble
    -dbname vega_homo_sapiens_chr9peri_20051103
    -sgp peri_short

=cut

{
    Hum::EnsCmdLineDB::do_getopt();
    my $dba = Hum::EnsCmdLineDB::connect();
    my $type = $dba->assembly_type('peri_short');
    my $slice_aptr = $dba->get_SliceAdaptor;
    my $ana_aptr   = $dba->get_AnalysisAdaptor;
    
    my $ana_logic = 'peri_dna';
    my $chr_name  = '9';
    my $chr_start = 1;
    my $chr_end   = 15655045;
    my $table_cloth_style = 0;

    my $ana = $ana_aptr->fetch_by_logic_name($ana_logic);
    my $ana_id = $ana->dbID;
    my $slice = $slice_aptr->fetch_by_chr_start_end($chr_name, $chr_start, $chr_end);
    
    my $length = $slice->length;
    printf STDERR "Slice from %d to %d\n", $slice->chr_start, $slice->chr_end;
        
    my $mw = CanvasWindow::MainWindow->new('chr9peri_dotter');
    my $cw = CanvasWindow->new($mw);
    my $canvas = $cw->canvas;
    $canvas->toplevel->bind('<Control-p>', sub{ $cw->print_postscript });
    
    my $size = 800;
    my $scale = $length / $size;
    
    unless ($table_cloth_style) {
        $canvas->createRectangle(
            0,0, $size, $size,
            -fill       => 'LightGrey',
            -outline    => undef,
            );
    }
    
    my @fill_map = (
        ['#cccccc', '#b2b2b2'],
        ['#b2b2b2', '#999999'],
        );
    
    my $tile_path = $slice->get_tiling_path;
    for (my $i = 0; $i < @$tile_path; $i++) {
        my $x1 = $tile_path->[$i]->assembled_start / $scale;
        my $x2 = $tile_path->[$i]->assembled_end   / $scale;
        for (my $j = 0; $j < @$tile_path; $j++) {
            my $y1 = $tile_path->[$j]->assembled_start / $scale;
            my $y2 = $tile_path->[$j]->assembled_end   / $scale;

            my $fill;
            if ($table_cloth_style) {
                $fill = @fill_map[$i % 2]->[$j % 2];
            } else {
                $fill = 'white';
            }

            $canvas->createRectangle(
                $x1,$y1, $x2,$y2,
                -fill       => $fill,
                -outline    => undef,
                );
        }
    }
    
    my %tile_name = map {$_->component_Seq->name, $_} @$tile_path;
    foreach my $this_tile (@$tile_path) {
        my $this_contig = $this_tile->component_Seq;
        my $this_length = $this_contig->length;
        my $peri_feat = $this_contig->get_all_DnaAlignFeatures($ana_logic);
        foreach my $this (@$peri_feat) {
            my $hit_name = $this->hseqname;

            # We're only interested in matches to pericentromeric clones
            my $pair_tile = $tile_name{$hit_name};
            next unless $pair_tile;

            my ($this_start, $this_end);
            if ($this_tile->component_ori == 1) {
                my $offset = $this_tile->assembled_start - $this_tile->component_start;
                $this_start = $offset + $this->start;
                $this_end   = $offset + $this->end;
            } else {
                my $offset = $this_tile->assembled_start - ($this_length - $this_tile->component_end) - 1;
                $this_start = $offset + ($this_length - $this->start);
                $this_end   = $offset + ($this_length - $this->end);
            }
            #my $strand = $this_tile->component_ori * $this->strand;
            if ($this->strand == -1) {
                ($this_start, $this_end) = ($this_end, $this_start);
            }

            my $pair_contig = $pair_tile->component_Seq;
            my $pair_length = $pair_contig->length;
            my ($pair_start, $pair_end);
            if ($pair_tile->component_ori == 1) {
                my $offset = $pair_tile->assembled_start - $pair_tile->component_start;
                $pair_start = $offset + $this->hstart;
                $pair_end   = $offset + $this->hend;
            } else {
                my $offset = $pair_tile->assembled_start - ($pair_length - $pair_tile->component_end) - 1;
                $pair_start = $offset + ($pair_length - $this->hstart);
                $pair_end   = $offset + ($pair_length - $this->hend);
            }
            #my $hstrand = $pair_tile->component_ori * $this->hstrand;
            if ($this->hstrand == -1) {
                ($pair_start, $pair_end) = ($pair_end, $pair_start);
            }

            my $x1 = $this_start / $scale;
            my $x2 = $this_end   / $scale;
            my $y1 = $pair_start / $scale;
            my $y2 = $pair_end   / $scale;

            $canvas->createLine($x1,$y1, $x2,$y2,
                -fill       => 'black',
                -width      => 0.25,
                );
        }
    }

    $canvas->createRectangle(0,0, $size, $size,
        -fill       => undef,
        -outline    => 'black',
        -width      => 0.5,
        );
    
    $cw->fix_window_min_max_sizes;
    Tk::MainLoop();
}




__END__

=head1 NAME - peri_dotter

=head1 AUTHOR

James Gilbert B<email> jgrg@sanger.ac.uk

