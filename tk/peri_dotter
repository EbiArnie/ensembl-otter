#!/usr/local/bin/perl -w

### peri_dotter

use strict;
use Hum::EnsCmdLineDB;
use CanvasWindow;

## ~/.ensdb_defaults entry for Hum::EnsCmdLineDB

=pod

    # chr 9 peri VEGA
    -host vegabuild
    -port 3304
    -user ottadmin
    -password wibble
    -dbname vega_homo_sapiens_chr9peri_20051103
    -sgp peri_short

=cut

{
    Hum::EnsCmdLineDB::do_getopt();
    my $dba = Hum::EnsCmdLineDB::connect();
    my $slice_aptr = $dba->get_SliceAdaptor;
    my $ana_aptr   = $dba->get_AnalysisAdaptor;
    
    my $ana_logic = 'peri_dna';
    my $chr_name  = '9';
    
    my $type = $dba->assembly_type('peri_short');

    my $ana = $ana_aptr->fetch_by_logic_name($ana_logic);
    my $ana_id = $ana->dbID;
    my $slice = $slice_aptr->fetch_by_chr_start_end($chr_name, 1, 15481367);
    
    my $peri_feat = $slice->get_all_DnaAlignFeatures($ana_logic);
    warn "Found ", scalar(@$peri_feat), " features\n";
    my %id_feat = map {$_->dbID, $_} @$peri_feat;
    $peri_feat = undef;
    
    my $length = $slice->length;
    printf STDERR "Slice from %d to %d\n", $slice->chr_start, $slice->chr_end;
    
    my $find_pairs = $dba->prepare(qq{
        SELECT daf1.dna_align_feature_id
          , daf2.dna_align_feature_id
        FROM dna_align_feature daf1
          , contig g1
          , dna_align_feature daf2
          , contig g2
        WHERE daf1.contig_id = g1.contig_id
          AND daf2.contig_id = g2.contig_id

          AND daf1.hit_name = g2.name
          AND daf2.hit_name = g1.name
          AND daf1.contig_start = daf2.hit_start
          AND daf1.contig_end = daf2.hit_end

          AND daf1.analysis_id = daf2.analysis_id
          AND daf2.analysis_id = ?
        });
    $find_pairs->execute($ana_id);
    
    my %id_pair;
    my $pairs_count = 0;
    while (my ($id1, $id2) = $find_pairs->fetchrow) {
        $pairs_count++;
        if (my $exist = $id_pair{$id1}) {
            die "Already have pair ($exist) for feature $id1 (new = $id2)";
        } else {
            $id_pair{$id1} = $id2;
        }
    }
    warn "Found $pairs_count pairs\n";
    
    
    my $mw = CanvasWindow::MainWindow->new('chr9peri_dotter');
    my $cw = CanvasWindow->new($mw);
    my $canvas = $cw->canvas;
    
    my $size = 800;
    my $scale = $length / $size;
    
    my @fill_map = (
        ['#cccccc', '#4c4c4c'],
        ['#4c4c4c', '#999999'],
        );
    
    my $tile_path = $slice->get_tiling_path;
    my %peri_contig_name = map {$_->component_Seq->name, $_} @$tile_path;
    for (my $i = 0; $i < @$tile_path; $i++) {
        my $x1 = $tile_path->[$i]->assembled_start / $scale;
        my $x2 = $tile_path->[$i]->assembled_end   / $scale;
        for (my $j = 0; $j < @$tile_path; $j++) {
            my $y1 = $tile_path->[$j]->assembled_start / $scale;
            my $y2 = $tile_path->[$j]->assembled_end   / $scale;

            my $fill = @fill_map[$i % 2]->[$j % 2];

            $canvas->createRectangle(
                $x1,$y1, $x2,$y2,
                -fill       => $fill,
                -outline    => undef,
                );
        }
    }
    
    my $missing = 0;
    my $drawn   = 0;
    foreach my $this_id (keys %id_feat) {
        # Could check that hit is outside pericentromere
        my $this = $id_feat{$this_id};
        my $pair_id = $id_pair{$this_id};
        unless ($pair_id) {
            my $hit_name = $this->hseqname;
            if ($peri_contig_name{$hit_name}) {
                warn "No pair for $this_id matching $hit_name\n";
            }
            next;
        }
        
        my $pair = $id_feat{$pair_id};
        if ($pair) {
            $drawn++;
        } else {
            warn "Feature $pair_id not in Slice\n";
            $missing++;
            next;
        }
        
        my $x1 = $this->start / $scale;
        my $x2 = $this->end   / $scale;
        my $y1 = $pair->start / $scale;
        my $y2 = $pair->end   / $scale;
        
        $canvas->createLine($x1,$y1, $x2,$y2,
            -fill       => 'black',
            -width      => 1,
            );
    }

    $canvas->createRectangle(0,0, $size, $size,
        -fill       => undef,
        -outline    => 'black',
        -width      => 0.5,
        );
    
    warn "Could not find pair in slice for $missing features but drew $drawn\n";
    
    $cw->fix_window_min_max_sizes;
    Tk::MainLoop();
}




__END__

=head1 NAME - peri_dotter

=head1 AUTHOR

James Gilbert B<email> jgrg@sanger.ac.uk

