#!/usr/bin/env perl

### show_X11_colors

use strict;
use warnings;
use Getopt::Long 'GetOptions';
use Hum::Ace::Colors qw{ webhex_to_acename };
use CanvasWindow;

{
    my $rgb_txt_file;
    foreach my $rgbf (qw{
        /etc/X11/rgb.txt
        /usr/X11R6/lib/X11/rgb.txt
        /usr/X11/share/X11/rgb.txt
    }) {
        if (-e $rgbf) {
            $rgb_txt_file = $rgbf;
            last;
        }
    }
    die "Can't find rgb.txt file\n" unless $rgb_txt_file;
    
    my $hex_on_clip = 0;
    my $help = sub { exec('perldoc', $0) };
    GetOptions(
        'rgb=s' => \$rgb_txt_file,
        'hex!'  => \$hex_on_clip,
        'help!' => $help,
        ) or $help->();

    my $mw = CanvasWindow::MainWindow->new;
    $mw->title('X11 colors');
    my $cw = CanvasWindow->new($mw);
    my $canvas = $cw->canvas;
    $canvas->SelectionHandle(\&return_selection);

    open RGB_TXT, $rgb_txt_file
        or die "Can't read '$rgb_txt_file' : $!";

    my $size = 15;
    my $pad = $size / 2;
    
    
    my $font = ['Helvetica', $size, 'normal'];
    my $i = 0;
    while (<RGB_TXT>) {
        s/^\s+//;
        chomp;
        next if /^\!/;   # Skip comment lines
        my ($red, $green, $blue, $name) = split /\s+/, $_, 4;
        
        #warn join(',', map "'$_'", ($red, $green, $blue, $name)), "\n";
        
        # Skip the names with spaces such as "old lace", which will still
        # be shown as their CamelCase equivalents like "OldLace".
        next if $name =~ /\s/;
        
        # Skip "grey" colours, which duplicate some of the "gray"s.
        next if $name =~ /grey/i;

        my $hex = sprintf "#%02x%02x%02x", $red, $green, $blue;
        my $ace = webhex_to_acename($hex);

        # warn "$name = $hex\n";
        
        my $tags = [$name];

        my $x1 = $size;
        my $x2 = $x1 + $size;
        my $y1 = $size + (($size + $pad) * $i);
        my $y2 = $y1 + $size;
        $canvas->createRectangle(
            $x1, $y1, $x2, $y2,
            -fill       => 'white',
            -outline    => $hex,
            -tags       => $tags,
            );
        
        $canvas->createRectangle(
            $x2 + $pad, $y1, $x2 + $pad + $size, $y2,
            -fill       => $hex,
            -outline    => 'black',
            -tags       => $tags,
            );
        
        my $txt = $canvas->createText(
            $x2 + $size + $size, $y1,
            -text       => $ace ? "$name ($ace)" : $name,
            -anchor     => 'nw',
            -font       => $font,
            -tags       => $tags,
            );

        $canvas->bind($name, '<Button-1>', sub{
            set_selection($hex_on_clip ? $hex : $name);
            $canvas->SelectionOwn;
            });

        $i++;
    }

    $cw->fix_window_min_max_sizes;

    Tk::MainLoop();
       
}

{
    my $clip;

    sub return_selection {
        my ($offset, $max_bytes) = @_;

        return unless $clip;

        my $str = substr($clip, $offset, $max_bytes);
    }

    sub set_selection {
        $clip = shift;
    }
}

__END__

=head1 NAME - show_X11_colors

=head1 SYNOPSIS

  show_X11_colors [-hex] [-rgb FILE]

=head1 OPTIONS

=over 4

=item B<-hex>

Put hex code on clipboard rather than X11 name.

=item B<-rgb FILE>

Use specified file instead of default C</usr/X11R6/lib/X11/rgb.txt>

=back

=head1 AUTHOR

James Gilbert B<email> jgrg@sanger.ac.uk

